
projects/lab2Leo/out/lab2Leo.elf:     file format elf32-littlearm
projects/lab2Leo/out/lab2Leo.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000759

Program Header:
0x70000001 off    0x00011d60 vaddr 0x1a001d60 paddr 0x1a001d60 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010038 vaddr 0x10000038 paddr 0x10000038 align 2**16
         filesz 0x00000000 memsz 0x00000014 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001d68 memsz 0x00001d68 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001d68 align 2**16
         filesz 0x00000038 memsz 0x00000038 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d5c  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  10000000  1a001d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020038  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
  6 .bss          00000014  10000038  10000038  00010038  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 11 .init_array   00000004  1a001d5c  1a001d5c  00011d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a001d60  1a001d60  00011d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020038  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020038  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020038  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 18 .noinit       00000000  1000004c  1000004c  00020038  2**2
                  CONTENTS
 19 .debug_info   00011bfa  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00002d37  00000000  00000000  00031c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00007406  00000000  00000000  00034969  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000008a8  00000000  00000000  0003bd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000008e0  00000000  00000000  0003c618  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000091df  00000000  00000000  0003cef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00007afa  00000000  00000000  000460d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0001e7e2  00000000  00000000  0004dbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000031  00000000  00000000  0006c3b3  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  0006c3e4  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001364  00000000  00000000  0006c41c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000038 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001d5c l    d  .init_array	00000000 .init_array
1a001d60 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000004c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 configuracion.c
00000000 l    df *ABS*	00000000 lab2Leo.c
10000038 l     O .bss	00000001 actualizar
1000003c l     O .bss	00000004 contador.11021
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 board.c
1a00094c l     F .text	00000044 Board_LED_Init
1a000990 l     F .text	00000040 Board_TEC_Init
1a0009d0 l     F .text	00000040 Board_GPIO_Init
1a000a10 l     F .text	00000030 Board_ADC_Init
1a000a40 l     F .text	00000038 Board_SPI_Init
1a000a78 l     F .text	00000024 Board_I2C_Init
1a001be8 l     O .text	00000008 GpioButtons
1a001bf0 l     O .text	0000000c GpioLeds
1a001bfc l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001c14 l     O .text	00000004 InitClkStates
1a001c18 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000ba4 l     F .text	0000002c Chip_UART_GetIndex
1a001c8c l     O .text	00000008 UART_BClock
1a001c94 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000d0c l     F .text	00000014 Chip_ADC_GetClockIndex
1a000d20 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000dd4 l     F .text	000000a0 pll_calc_divs
1a000e74 l     F .text	0000010c pll_get_frac
1a000f80 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0011f4 l     F .text	00000022 Chip_Clock_GetDivRate
10000040 l     O .bss	00000008 audio_usb_pll_freq
1a001ca8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001d14 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0014cc l     F .text	00000014 Chip_SSP_GetClockIndex
1a0014e0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a001d60 l       .init_array	00000000 __init_array_end
1a001d5c l       .bss_RAM5	00000000 __preinit_array_end
1a001d5c l       .init_array	00000000 __init_array_start
1a001d5c l       .bss_RAM5	00000000 __preinit_array_start
1a001018 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000aec g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000dc6 g     F .text	0000000c Chip_ADC_SetResolution
1a0003ec g     F .text	0000005c SysTick_Handler
1a000754  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a001d68 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0004c0 g     F .text	00000020 UARTEscribirString
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff7136 g       *ABS*	00000000 __valid_user_code_checksum
1a001d68 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001296 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0008d4 g     F .text	00000078 Led_Toggle
1a0004ac g     F .text	00000014 UARTEscribirByte
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00163c g     F .text	00000000 .hidden __aeabi_uldivmod
1000004c g       .noinit	00000000 _noinit
10000048 g     O .bss	00000004 SystemCoreClock
1a000bd0 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a001314 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000b2c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00166c g     F .text	000002dc .hidden __udivmoddi4
1a001be4 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00085c g     F .text	00000078 Led_Off
1a000448 g     F .text	00000036 ConfigurarUART
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a00034c g     F .text	000000a0 ConfigurarPuertosLaboratorio
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001d60 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00055c g     F .text	00000088 ConfigurarMODEM
1a00194c g     F .text	00000050 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000ac0 g     F .text	0000002c Board_Init
1a0007e2  w    F .text	00000002 _init
1a0007e4 g     F .text	00000078 Led_On
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000004c g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000758 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0015c4 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000fcc g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0015a0 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001188 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0014f8 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a001270 g     F .text	00000026 Chip_Clock_GetBaseClock
10000038 g       .bss	00000000 _bss
1a000486 g     F .text	00000026 UARTLeerByte
1a000d94 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00150a g     F .text	0000003e Chip_SSP_SetBitRate
1a0014c8 g     F .text	00000002 Chip_GPIO_Init
1a001c10 g     O .text	00000004 OscRateIn
1000004c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a00047e g     F .text	00000008 UARTDisponible
1a000178 g       .text	00000000 __bss_section_table_end
1a001948  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0001ba  w    F .text	00000002 USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000300 g     F .text	0000004c ConfigurarInterrupcion
1a001034 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00199c g     F .text	0000009a memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0005e4 g     F .text	00000170 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0012a4 g     F .text	0000003c Chip_Clock_EnableOpts
1a001050 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001108 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0015fc g     F .text	00000040 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0007e0  w    F .text	00000002 _fini
1a000d54 g     F .text	00000040 Chip_ADC_Init
1a000af4 g     F .text	00000038 Board_SetupMuxing
1a000c24 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1000004c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001548 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000a9c g     F .text	00000024 Board_Debug_Init
10000038 g       .data	00000000 _edata
1a0004e0 g     F .text	0000007a EnviarComandoAT
1a001580 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001374 g     F .text	00000154 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a001360 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001948  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001a40 g     F .text	000000dc strlen
1a0012e0 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001218 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000b98 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 59 07 00 1a 79 01 00 1a 7b 01 00 1a     ....Y...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 36 71 ff 53     }...........6q.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	ed 03 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a001d68 	.word	0x1a001d68
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000038 	.word	0x00000038
1a000120:	1a001d68 	.word	0x1a001d68
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001d68 	.word	0x1a001d68
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001d68 	.word	0x1a001d68
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001d68 	.word	0x1a001d68
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000038 	.word	0x10000038
1a000154:	00000014 	.word	0x00000014
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ConfigurarInterrupcion>:
#include "configuracion.h"


void ConfigurarInterrupcion(void) {
1a000300:	b508      	push	{r3, lr}
   __asm__ volatile ("cpsid i");
1a000302:	b672      	cpsid	i

   /* Activate SysTick */
   SystemCoreClockUpdate();
1a000304:	f001 f82c 	bl	1a001360 <SystemCoreClockUpdate>
   SysTick_Config(SystemCoreClock/1000);
1a000308:	4b0c      	ldr	r3, [pc, #48]	; (1a00033c <ConfigurarInterrupcion+0x3c>)
1a00030a:	681b      	ldr	r3, [r3, #0]
1a00030c:	4a0c      	ldr	r2, [pc, #48]	; (1a000340 <ConfigurarInterrupcion+0x40>)
1a00030e:	fba2 2303 	umull	r2, r3, r2, r3
1a000312:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a000314:	3b01      	subs	r3, #1
1a000316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a00031a:	d209      	bcs.n	1a000330 <ConfigurarInterrupcion+0x30>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a00031c:	4a09      	ldr	r2, [pc, #36]	; (1a000344 <ConfigurarInterrupcion+0x44>)
1a00031e:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000320:	21e0      	movs	r1, #224	; 0xe0
1a000322:	4b09      	ldr	r3, [pc, #36]	; (1a000348 <ConfigurarInterrupcion+0x48>)
1a000324:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a000328:	2300      	movs	r3, #0
1a00032a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00032c:	2307      	movs	r3, #7
1a00032e:	6013      	str	r3, [r2, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000330:	22e0      	movs	r2, #224	; 0xe0
1a000332:	4b05      	ldr	r3, [pc, #20]	; (1a000348 <ConfigurarInterrupcion+0x48>)
1a000334:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

   /* Update priority set by SysTick_Config */
   NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);

   __asm__ volatile ("cpsie i");
1a000338:	b662      	cpsie	i
1a00033a:	bd08      	pop	{r3, pc}
1a00033c:	10000048 	.word	0x10000048
1a000340:	10624dd3 	.word	0x10624dd3
1a000344:	e000e010 	.word	0xe000e010
1a000348:	e000ed00 	.word	0xe000ed00

1a00034c <ConfigurarPuertosLaboratorio>:
}

void ConfigurarPuertosLaboratorio(void) {
1a00034c:	b410      	push	{r4}
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00034e:	4b25      	ldr	r3, [pc, #148]	; (1a0003e4 <ConfigurarPuertosLaboratorio+0x98>)
1a000350:	22d4      	movs	r2, #212	; 0xd4
1a000352:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
1a000356:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a00035a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_ClearValue(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue)
{
	pGPIO->CLR[portNum] = bitValue;
1a00035e:	4a22      	ldr	r2, [pc, #136]	; (1a0003e8 <ConfigurarPuertosLaboratorio+0x9c>)
1a000360:	2007      	movs	r0, #7
1a000362:	f242 2194 	movw	r1, #8852	; 0x2294
1a000366:	5050      	str	r0, [r2, r1]
		pGPIO->DIR[portNum] |= bitValue;
1a000368:	f242 0014 	movw	r0, #8212	; 0x2014
1a00036c:	5811      	ldr	r1, [r2, r0]
1a00036e:	f041 0107 	orr.w	r1, r1, #7
1a000372:	5011      	str	r1, [r2, r0]
1a000374:	21d0      	movs	r1, #208	; 0xd0
1a000376:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
1a00037a:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
1a00037e:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
	pGPIO->CLR[portNum] = bitValue;
1a000382:	f502 510a 	add.w	r1, r2, #8832	; 0x2280
1a000386:	f44f 4080 	mov.w	r0, #16384	; 0x4000
1a00038a:	6008      	str	r0, [r1, #0]
1a00038c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
1a000390:	f242 2184 	movw	r1, #8836	; 0x2284
1a000394:	5050      	str	r0, [r2, r1]
		pGPIO->DIR[portNum] |= bitValue;
1a000396:	f502 5000 	add.w	r0, r2, #8192	; 0x2000
1a00039a:	6801      	ldr	r1, [r0, #0]
1a00039c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
1a0003a0:	6001      	str	r1, [r0, #0]
1a0003a2:	f242 0104 	movw	r1, #8196	; 0x2004
1a0003a6:	5854      	ldr	r4, [r2, r1]
1a0003a8:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
1a0003ac:	5054      	str	r4, [r2, r1]
1a0003ae:	2440      	movs	r4, #64	; 0x40
1a0003b0:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
1a0003b4:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
1a0003b8:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
1a0003bc:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
		pGPIO->DIR[portNum] &= ~bitValue;
1a0003c0:	6804      	ldr	r4, [r0, #0]
1a0003c2:	f424 7444 	bic.w	r4, r4, #784	; 0x310
1a0003c6:	6004      	str	r4, [r0, #0]
1a0003c8:	5850      	ldr	r0, [r2, r1]
1a0003ca:	f420 7000 	bic.w	r0, r0, #512	; 0x200
1a0003ce:	5050      	str	r0, [r2, r1]
1a0003d0:	22d6      	movs	r2, #214	; 0xd6
1a0003d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
1a0003d6:	2246      	movs	r2, #70	; 0x46
1a0003d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
   Chip_GPIO_SetDir(LPC_GPIO_PORT, 0, (1 << 4) | (1 << 8) | (1 << 9), false);
   Chip_GPIO_SetDir(LPC_GPIO_PORT, 1, (1 << 9), false);

   Chip_SCU_PinMux(4, 1, SCU_MODE_SAL, SCU_MODE_FUNC6);
   Chip_SCU_PinMux(4, 2, SCU_MODE_ENT, SCU_MODE_FUNC6);
}
1a0003dc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0003e0:	4770      	bx	lr
1a0003e2:	bf00      	nop
1a0003e4:	40086000 	.word	0x40086000
1a0003e8:	400f4000 	.word	0x400f4000

1a0003ec <SysTick_Handler>:
#define BREAK "ERROR BREAK\r\n"
#define UNKNOWN "ERROR UNKNOWN\r\n"

static uint8_t actualizar = 0;

void SysTick_Handler(void) {
1a0003ec:	b508      	push	{r3, lr}
   static int contador = 0;

   contador++;
1a0003ee:	4a13      	ldr	r2, [pc, #76]	; (1a00043c <SysTick_Handler+0x50>)
1a0003f0:	6813      	ldr	r3, [r2, #0]
1a0003f2:	3301      	adds	r3, #1
1a0003f4:	6013      	str	r3, [r2, #0]
   if (contador%500 == 0) {
1a0003f6:	4912      	ldr	r1, [pc, #72]	; (1a000440 <SysTick_Handler+0x54>)
1a0003f8:	fb81 2103 	smull	r2, r1, r1, r3
1a0003fc:	17da      	asrs	r2, r3, #31
1a0003fe:	ebc2 1261 	rsb	r2, r2, r1, asr #5
1a000402:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a000406:	fb01 3212 	mls	r2, r1, r2, r3
1a00040a:	b19a      	cbz	r2, 1a000434 <SysTick_Handler+0x48>
      Led_Toggle(RED_LED);
   }
   if(contador %1000 == 0) {
1a00040c:	4b0b      	ldr	r3, [pc, #44]	; (1a00043c <SysTick_Handler+0x50>)
1a00040e:	681a      	ldr	r2, [r3, #0]
1a000410:	490b      	ldr	r1, [pc, #44]	; (1a000440 <SysTick_Handler+0x54>)
1a000412:	fb81 3102 	smull	r3, r1, r1, r2
1a000416:	17d3      	asrs	r3, r2, #31
1a000418:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
1a00041c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000420:	fb01 2313 	mls	r3, r1, r3, r2
1a000424:	b92b      	cbnz	r3, 1a000432 <SysTick_Handler+0x46>
       contador = 0;
1a000426:	2200      	movs	r2, #0
1a000428:	4b04      	ldr	r3, [pc, #16]	; (1a00043c <SysTick_Handler+0x50>)
1a00042a:	601a      	str	r2, [r3, #0]
       actualizar = 1;
1a00042c:	2201      	movs	r2, #1
1a00042e:	4b05      	ldr	r3, [pc, #20]	; (1a000444 <SysTick_Handler+0x58>)
1a000430:	701a      	strb	r2, [r3, #0]
1a000432:	bd08      	pop	{r3, pc}
      Led_Toggle(RED_LED);
1a000434:	2003      	movs	r0, #3
1a000436:	f000 fa4d 	bl	1a0008d4 <Led_Toggle>
1a00043a:	e7e7      	b.n	1a00040c <SysTick_Handler+0x20>
1a00043c:	1000003c 	.word	0x1000003c
1a000440:	10624dd3 	.word	0x10624dd3
1a000444:	10000038 	.word	0x10000038

1a000448 <ConfigurarUART>:
   }
}

void ConfigurarUART(LPC_USART_T *pUART){
1a000448:	b510      	push	{r4, lr}
1a00044a:	4604      	mov	r4, r0
    Chip_UART_Init(pUART);
1a00044c:	f000 fbc0 	bl	1a000bd0 <Chip_UART_Init>

    pUART -> LCR = pUART -> LCR | 0x00000080;
1a000450:	68e3      	ldr	r3, [r4, #12]
1a000452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000456:	60e3      	str	r3, [r4, #12]
    pUART -> DLL = 0x01;
1a000458:	2301      	movs	r3, #1
1a00045a:	6023      	str	r3, [r4, #0]
    pUART -> DLM = 0x4C;
1a00045c:	234c      	movs	r3, #76	; 0x4c
1a00045e:	6063      	str	r3, [r4, #4]
    pUART -> LCR = pUART -> LCR & 0xFFFFFF7F;
1a000460:	68e3      	ldr	r3, [r4, #12]
1a000462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000466:	60e3      	str	r3, [r4, #12]
	
    //Configuro el LCR
    //8bits, sin paridad, 1 bit de parada
    pUART -> LCR = (pUART->LCR & 0xFFFFFFF3) | 0x00000003;
1a000468:	68e3      	ldr	r3, [r4, #12]
1a00046a:	f023 030f 	bic.w	r3, r3, #15
1a00046e:	f043 0303 	orr.w	r3, r3, #3
1a000472:	60e3      	str	r3, [r4, #12]

	  //Habilito Tx
    pUART -> TER2 = pUART -> TER2 | 0x01;
1a000474:	6de3      	ldr	r3, [r4, #92]	; 0x5c
1a000476:	f043 0301 	orr.w	r3, r3, #1
1a00047a:	65e3      	str	r3, [r4, #92]	; 0x5c
1a00047c:	bd10      	pop	{r4, pc}

1a00047e <UARTDisponible>:

}

uint8_t UARTDisponible(LPC_USART_T *pUART){
    return ((pUART->LSR & UART_LSR_THRE) != 0 );
1a00047e:	6940      	ldr	r0, [r0, #20]
}
1a000480:	f3c0 1040 	ubfx	r0, r0, #5, #1
1a000484:	4770      	bx	lr

1a000486 <UARTLeerByte>:

uint8_t UARTLeerByte(LPC_USART_T *pUART, uint8_t* data, uint8_t* error){
    uint8_t resultado = 0;
    uint8_t status = pUART->LSR;
1a000486:	6943      	ldr	r3, [r0, #20]
1a000488:	b2db      	uxtb	r3, r3
    if (status & (1<<0)){
1a00048a:	f013 0f01 	tst.w	r3, #1
1a00048e:	d00b      	beq.n	1a0004a8 <UARTLeerByte+0x22>
        resultado = 1;
        if (status & ((1<<1)|(1<<2)|(1<<3)|(1<<4))){
1a000490:	f013 0f1e 	tst.w	r3, #30
1a000494:	d103      	bne.n	1a00049e <UARTLeerByte+0x18>
            /*ERROR*/
            *error = status & (0x1E);
        } else {
            *data = (pUART->RBR & (0xFF));
1a000496:	6803      	ldr	r3, [r0, #0]
1a000498:	700b      	strb	r3, [r1, #0]
        resultado = 1;
1a00049a:	2001      	movs	r0, #1
1a00049c:	4770      	bx	lr
            *error = status & (0x1E);
1a00049e:	f003 031e 	and.w	r3, r3, #30
1a0004a2:	7013      	strb	r3, [r2, #0]
        resultado = 1;
1a0004a4:	2001      	movs	r0, #1
1a0004a6:	4770      	bx	lr
    uint8_t resultado = 0;
1a0004a8:	2000      	movs	r0, #0
        }
    }
    return resultado;
}
1a0004aa:	4770      	bx	lr

1a0004ac <UARTEscribirByte>:

void UARTEscribirByte(LPC_USART_T *pUART, uint8_t data){
1a0004ac:	b538      	push	{r3, r4, r5, lr}
1a0004ae:	4604      	mov	r4, r0
1a0004b0:	460d      	mov	r5, r1
    while(!UARTDisponible(pUART)){};
1a0004b2:	4620      	mov	r0, r4
1a0004b4:	f7ff ffe3 	bl	1a00047e <UARTDisponible>
1a0004b8:	2800      	cmp	r0, #0
1a0004ba:	d0fa      	beq.n	1a0004b2 <UARTEscribirByte+0x6>
    pUART->THR = data;
1a0004bc:	6025      	str	r5, [r4, #0]
1a0004be:	bd38      	pop	{r3, r4, r5, pc}

1a0004c0 <UARTEscribirString>:
}

void UARTEscribirString(LPC_USART_T *pUART, char string[]){
1a0004c0:	b570      	push	{r4, r5, r6, lr}
1a0004c2:	4606      	mov	r6, r0
1a0004c4:	460d      	mov	r5, r1
    for(int i = 0; i < strlen(string); i++){
1a0004c6:	2400      	movs	r4, #0
1a0004c8:	e004      	b.n	1a0004d4 <UARTEscribirString+0x14>
        UARTEscribirByte(pUART, (uint8_t)string[i]);
1a0004ca:	5d29      	ldrb	r1, [r5, r4]
1a0004cc:	4630      	mov	r0, r6
1a0004ce:	f7ff ffed 	bl	1a0004ac <UARTEscribirByte>
    for(int i = 0; i < strlen(string); i++){
1a0004d2:	3401      	adds	r4, #1
1a0004d4:	4628      	mov	r0, r5
1a0004d6:	f001 fab3 	bl	1a001a40 <strlen>
1a0004da:	42a0      	cmp	r0, r4
1a0004dc:	d8f5      	bhi.n	1a0004ca <UARTEscribirString+0xa>
    }
}
1a0004de:	bd70      	pop	{r4, r5, r6, pc}

1a0004e0 <EnviarComandoAT>:

uint8_t EnviarComandoAT(LPC_USART_T *pUART_MODEM, char AT[]){
1a0004e0:	b570      	push	{r4, r5, r6, lr}
1a0004e2:	b082      	sub	sp, #8
1a0004e4:	4604      	mov	r4, r0
1a0004e6:	460e      	mov	r6, r1
    uint8_t byte0 = 0;
1a0004e8:	2300      	movs	r3, #0
1a0004ea:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t byte1 = 0;
1a0004ee:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t byteError = 0;
1a0004f2:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8_t resultado = 0;
    uint8_t aux = 0;

    // LIMPIAR CUALQUIER BASURA QUE PUDIERA QUEDAR
    while(UARTLeerByte(pUART_MODEM, &byte0, &byteError)){}
1a0004f6:	f10d 0205 	add.w	r2, sp, #5
1a0004fa:	f10d 0107 	add.w	r1, sp, #7
1a0004fe:	4620      	mov	r0, r4
1a000500:	f7ff ffc1 	bl	1a000486 <UARTLeerByte>
1a000504:	4605      	mov	r5, r0
1a000506:	2800      	cmp	r0, #0
1a000508:	d1f5      	bne.n	1a0004f6 <EnviarComandoAT+0x16>

    // ENVIAR COMANDO
    UARTEscribirString(pUART_MODEM, AT);
1a00050a:	4631      	mov	r1, r6
1a00050c:	4620      	mov	r0, r4
1a00050e:	f7ff ffd7 	bl	1a0004c0 <UARTEscribirString>

    // INTERPRETAR RESPUESTA (PISTA: BYTE 0 Y 1)
    aux = UARTLeerByte(pUART_MODEM, &byte0, &byteError);
1a000512:	f10d 0205 	add.w	r2, sp, #5
1a000516:	f10d 0107 	add.w	r1, sp, #7
1a00051a:	4620      	mov	r0, r4
1a00051c:	f7ff ffb3 	bl	1a000486 <UARTLeerByte>
    aux = UARTLeerByte(pUART_MODEM, &byte1, &byteError);
1a000520:	f10d 0205 	add.w	r2, sp, #5
1a000524:	f10d 0106 	add.w	r1, sp, #6
1a000528:	4620      	mov	r0, r4
1a00052a:	f7ff ffac 	bl	1a000486 <UARTLeerByte>
    if(byte0 == 'O' && byte1 == 'K') {
1a00052e:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000532:	2b4f      	cmp	r3, #79	; 0x4f
1a000534:	d00b      	beq.n	1a00054e <EnviarComandoAT+0x6e>
      resultado = 1;
    }

    // VACIAR EL RESTO DEL BUFFER
    while(UARTLeerByte(pUART_MODEM, &byte0, &byteError)){}
1a000536:	f10d 0205 	add.w	r2, sp, #5
1a00053a:	f10d 0107 	add.w	r1, sp, #7
1a00053e:	4620      	mov	r0, r4
1a000540:	f7ff ffa1 	bl	1a000486 <UARTLeerByte>
1a000544:	2800      	cmp	r0, #0
1a000546:	d1f6      	bne.n	1a000536 <EnviarComandoAT+0x56>

    return resultado;

}
1a000548:	4628      	mov	r0, r5
1a00054a:	b002      	add	sp, #8
1a00054c:	bd70      	pop	{r4, r5, r6, pc}
    if(byte0 == 'O' && byte1 == 'K') {
1a00054e:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a000552:	2b4b      	cmp	r3, #75	; 0x4b
1a000554:	d1ef      	bne.n	1a000536 <EnviarComandoAT+0x56>
      resultado = 1;
1a000556:	2501      	movs	r5, #1
1a000558:	e7ed      	b.n	1a000536 <EnviarComandoAT+0x56>
1a00055a:	Address 0x000000001a00055a is out of bounds.


1a00055c <ConfigurarMODEM>:


void ConfigurarMODEM(LPC_USART_T *pUART_USB, LPC_USART_T *pUART_MODEM){
1a00055c:	b510      	push	{r4, lr}
1a00055e:	b082      	sub	sp, #8
1a000560:	460c      	mov	r4, r1
    uint8_t aux;
    uint8_t err;
    while(UARTLeerByte(pUART_MODEM, &aux, &err)){}
1a000562:	f10d 0206 	add.w	r2, sp, #6
1a000566:	f10d 0107 	add.w	r1, sp, #7
1a00056a:	4620      	mov	r0, r4
1a00056c:	f7ff ff8b 	bl	1a000486 <UARTLeerByte>
1a000570:	2800      	cmp	r0, #0
1a000572:	d1f6      	bne.n	1a000562 <ConfigurarMODEM+0x6>
    if(1){
        // ENVIAR COMANDOS AT PARA CONFIGURAR (PISTA, YO TENGO ANOTADOS 6)
        aux = EnviarComandoAT(pUART_MODEM,"AT\r\n");
1a000574:	4914      	ldr	r1, [pc, #80]	; (1a0005c8 <ConfigurarMODEM+0x6c>)
1a000576:	4620      	mov	r0, r4
1a000578:	f7ff ffb2 	bl	1a0004e0 <EnviarComandoAT>
1a00057c:	f88d 0007 	strb.w	r0, [sp, #7]
        aux = EnviarComandoAT(pUART_MODEM,"AT+NAME=BLUETOOTH_TERMINAL\r\n");
1a000580:	4912      	ldr	r1, [pc, #72]	; (1a0005cc <ConfigurarMODEM+0x70>)
1a000582:	4620      	mov	r0, r4
1a000584:	f7ff ffac 	bl	1a0004e0 <EnviarComandoAT>
1a000588:	f88d 0007 	strb.w	r0, [sp, #7]
        aux = EnviarComandoAT(pUART_MODEM,"AT+PSWD=123457\r\n");
1a00058c:	4910      	ldr	r1, [pc, #64]	; (1a0005d0 <ConfigurarMODEM+0x74>)
1a00058e:	4620      	mov	r0, r4
1a000590:	f7ff ffa6 	bl	1a0004e0 <EnviarComandoAT>
1a000594:	f88d 0007 	strb.w	r0, [sp, #7]
        aux = EnviarComandoAT(pUART_MODEM,"AT+ROLE=0\r\n");
1a000598:	490e      	ldr	r1, [pc, #56]	; (1a0005d4 <ConfigurarMODEM+0x78>)
1a00059a:	4620      	mov	r0, r4
1a00059c:	f7ff ffa0 	bl	1a0004e0 <EnviarComandoAT>
1a0005a0:	f88d 0007 	strb.w	r0, [sp, #7]
        aux = EnviarComandoAT(pUART_MODEM,"AT+UART=38400,1,0,\r\n");
1a0005a4:	490c      	ldr	r1, [pc, #48]	; (1a0005d8 <ConfigurarMODEM+0x7c>)
1a0005a6:	4620      	mov	r0, r4
1a0005a8:	f7ff ff9a 	bl	1a0004e0 <EnviarComandoAT>
1a0005ac:	f88d 0007 	strb.w	r0, [sp, #7]
        aux = EnviarComandoAT(pUART_MODEM,"AT+INIT\r\n");
1a0005b0:	490a      	ldr	r1, [pc, #40]	; (1a0005dc <ConfigurarMODEM+0x80>)
1a0005b2:	4620      	mov	r0, r4
1a0005b4:	f7ff ff94 	bl	1a0004e0 <EnviarComandoAT>
1a0005b8:	f88d 0007 	strb.w	r0, [sp, #7]
        aux = EnviarComandoAT(pUART_MODEM,"AT+RESET\r\n");
1a0005bc:	4908      	ldr	r1, [pc, #32]	; (1a0005e0 <ConfigurarMODEM+0x84>)
1a0005be:	4620      	mov	r0, r4
1a0005c0:	f7ff ff8e 	bl	1a0004e0 <EnviarComandoAT>
    }
}
1a0005c4:	b002      	add	sp, #8
1a0005c6:	bd10      	pop	{r4, pc}
1a0005c8:	1a001b1c 	.word	0x1a001b1c
1a0005cc:	1a001b24 	.word	0x1a001b24
1a0005d0:	1a001b44 	.word	0x1a001b44
1a0005d4:	1a001b58 	.word	0x1a001b58
1a0005d8:	1a001b64 	.word	0x1a001b64
1a0005dc:	1a001b7c 	.word	0x1a001b7c
1a0005e0:	1a001b88 	.word	0x1a001b88

1a0005e4 <main>:

int main(void)
{
1a0005e4:	b570      	push	{r4, r5, r6, lr}
1a0005e6:	b086      	sub	sp, #24
   uint8_t readData = 0;
1a0005e8:	2500      	movs	r5, #0
1a0005ea:	f88d 5017 	strb.w	r5, [sp, #23]
   uint8_t readError = 0;
1a0005ee:	f88d 5016 	strb.w	r5, [sp, #22]
   uint8_t buffer[20] = "";
1a0005f2:	9500      	str	r5, [sp, #0]
1a0005f4:	9501      	str	r5, [sp, #4]
1a0005f6:	9502      	str	r5, [sp, #8]
1a0005f8:	9503      	str	r5, [sp, #12]
1a0005fa:	9504      	str	r5, [sp, #16]
   uint8_t *ptrBuffer = buffer;
   uint8_t contador = 0;

   ConfigurarPuertosLaboratorio();
1a0005fc:	f7ff fea6 	bl	1a00034c <ConfigurarPuertosLaboratorio>
   ConfigurarInterrupcion();
1a000600:	f7ff fe7e 	bl	1a000300 <ConfigurarInterrupcion>
   ConfigurarUART(USB_UART);
1a000604:	4c4a      	ldr	r4, [pc, #296]	; (1a000730 <main+0x14c>)
1a000606:	4620      	mov	r0, r4
1a000608:	f7ff ff1e 	bl	1a000448 <ConfigurarUART>
   ConfigurarUART(MODEM_UART);
1a00060c:	4e49      	ldr	r6, [pc, #292]	; (1a000734 <main+0x150>)
1a00060e:	4630      	mov	r0, r6
1a000610:	f7ff ff1a 	bl	1a000448 <ConfigurarUART>
   ConfigurarMODEM(USB_UART, MODEM_UART);
1a000614:	4631      	mov	r1, r6
1a000616:	4620      	mov	r0, r4
1a000618:	f7ff ffa0 	bl	1a00055c <ConfigurarMODEM>
1a00061c:	e014      	b.n	1a000648 <main+0x64>
   while (1) {
       if(actualizar){
           actualizar = 0;
           Led_On(GREEN_LED);
           while (*ptrBuffer != '\0'){
               UARTEscribirByte(USB_UART, *ptrBuffer);
1a00061e:	4844      	ldr	r0, [pc, #272]	; (1a000730 <main+0x14c>)
1a000620:	f7ff ff44 	bl	1a0004ac <UARTEscribirByte>
               ptrBuffer++;
1a000624:	3401      	adds	r4, #1
           while (*ptrBuffer != '\0'){
1a000626:	7821      	ldrb	r1, [r4, #0]
1a000628:	2900      	cmp	r1, #0
1a00062a:	d1f8      	bne.n	1a00061e <main+0x3a>
           }
           ptrBuffer = buffer;
           buffer[0] = '\0';
1a00062c:	2300      	movs	r3, #0
1a00062e:	f88d 3000 	strb.w	r3, [sp]
           Led_Off(GREEN_LED);
1a000632:	2005      	movs	r0, #5
1a000634:	f000 f912 	bl	1a00085c <Led_Off>
       }
       if(UARTLeerByte(MODEM_UART, &readData, &readError)){
1a000638:	f10d 0216 	add.w	r2, sp, #22
1a00063c:	f10d 0117 	add.w	r1, sp, #23
1a000640:	483c      	ldr	r0, [pc, #240]	; (1a000734 <main+0x150>)
1a000642:	f7ff ff20 	bl	1a000486 <UARTLeerByte>
1a000646:	b958      	cbnz	r0, 1a000660 <main+0x7c>
       if(actualizar){
1a000648:	4b3b      	ldr	r3, [pc, #236]	; (1a000738 <main+0x154>)
1a00064a:	781b      	ldrb	r3, [r3, #0]
1a00064c:	2b00      	cmp	r3, #0
1a00064e:	d0f3      	beq.n	1a000638 <main+0x54>
           actualizar = 0;
1a000650:	2200      	movs	r2, #0
1a000652:	4b39      	ldr	r3, [pc, #228]	; (1a000738 <main+0x154>)
1a000654:	701a      	strb	r2, [r3, #0]
           Led_On(GREEN_LED);
1a000656:	2005      	movs	r0, #5
1a000658:	f000 f8c4 	bl	1a0007e4 <Led_On>
           while (*ptrBuffer != '\0'){
1a00065c:	466c      	mov	r4, sp
1a00065e:	e7e2      	b.n	1a000626 <main+0x42>
          if(readError){
1a000660:	f89d 4016 	ldrb.w	r4, [sp, #22]
1a000664:	b38c      	cbz	r4, 1a0006ca <main+0xe6>
              Led_Toggle(YELLOW_LED);
1a000666:	2004      	movs	r0, #4
1a000668:	f000 f934 	bl	1a0008d4 <Led_Toggle>
              if(readError & (1<<1)){
1a00066c:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a000670:	f013 0f02 	tst.w	r3, #2
1a000674:	d10e      	bne.n	1a000694 <main+0xb0>
                 strcpy(buffer, OVERRUN);
              } else if(readError & (1<<2)){
1a000676:	f013 0f04 	tst.w	r3, #4
1a00067a:	d113      	bne.n	1a0006a4 <main+0xc0>
                 strcpy(buffer, PARITY);
              } else if(readError & (1<<3)){
1a00067c:	f013 0f08 	tst.w	r3, #8
1a000680:	d119      	bne.n	1a0006b6 <main+0xd2>
                 strcpy(buffer, FRAMING);
              } else if(readError & (1<<4)){
1a000682:	f013 0f10 	tst.w	r3, #16
1a000686:	d01b      	beq.n	1a0006c0 <main+0xdc>
                 strcpy(buffer, BREAK);
1a000688:	4b2c      	ldr	r3, [pc, #176]	; (1a00073c <main+0x158>)
1a00068a:	466c      	mov	r4, sp
1a00068c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a00068e:	c407      	stmia	r4!, {r0, r1, r2}
1a000690:	8023      	strh	r3, [r4, #0]
1a000692:	e003      	b.n	1a00069c <main+0xb8>
                 strcpy(buffer, OVERRUN);
1a000694:	4b2a      	ldr	r3, [pc, #168]	; (1a000740 <main+0x15c>)
1a000696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a000698:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
              } else{
                 strcpy(buffer, UNKNOWN);
              }
              readError = 0;
1a00069c:	2300      	movs	r3, #0
1a00069e:	f88d 3016 	strb.w	r3, [sp, #22]
1a0006a2:	e7d1      	b.n	1a000648 <main+0x64>
                 strcpy(buffer, PARITY);
1a0006a4:	4b27      	ldr	r3, [pc, #156]	; (1a000744 <main+0x160>)
1a0006a6:	466c      	mov	r4, sp
1a0006a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a0006aa:	c407      	stmia	r4!, {r0, r1, r2}
1a0006ac:	f824 3b02 	strh.w	r3, [r4], #2
1a0006b0:	0c1b      	lsrs	r3, r3, #16
1a0006b2:	7023      	strb	r3, [r4, #0]
1a0006b4:	e7f2      	b.n	1a00069c <main+0xb8>
                 strcpy(buffer, FRAMING);
1a0006b6:	4b24      	ldr	r3, [pc, #144]	; (1a000748 <main+0x164>)
1a0006b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a0006ba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
1a0006be:	e7ed      	b.n	1a00069c <main+0xb8>
                 strcpy(buffer, UNKNOWN);
1a0006c0:	4b22      	ldr	r3, [pc, #136]	; (1a00074c <main+0x168>)
1a0006c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a0006c4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
1a0006c8:	e7e8      	b.n	1a00069c <main+0xb8>
          }else{
              Led_Toggle(RGB_B_LED);
1a0006ca:	2002      	movs	r0, #2
1a0006cc:	f000 f902 	bl	1a0008d4 <Led_Toggle>
              if(readData == 'q'){
1a0006d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
1a0006d4:	2b71      	cmp	r3, #113	; 0x71
1a0006d6:	d01c      	beq.n	1a000712 <main+0x12e>
                  if(contador == 99){
                      contador = 0;
                  }else{
                      contador++;
                  }
              }else if(readData == 'w'){
1a0006d8:	2b77      	cmp	r3, #119	; 0x77
1a0006da:	d01f      	beq.n	1a00071c <main+0x138>
                  if(contador == 0){
                      contador = 99;
                  }else{
                      contador--;
                  }
              }else if(readData == 'e'){
1a0006dc:	2b65      	cmp	r3, #101	; 0x65
1a0006de:	d025      	beq.n	1a00072c <main+0x148>
                   contador = 0;
               }
            buffer[0] = (char)((contador/10)+48);
1a0006e0:	4b1b      	ldr	r3, [pc, #108]	; (1a000750 <main+0x16c>)
1a0006e2:	fba3 2305 	umull	r2, r3, r3, r5
1a0006e6:	08db      	lsrs	r3, r3, #3
1a0006e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a0006ec:	f88d 2000 	strb.w	r2, [sp]
            buffer[1] = (char)((contador%10)+48);
1a0006f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0006f4:	005a      	lsls	r2, r3, #1
1a0006f6:	1aab      	subs	r3, r5, r2
1a0006f8:	3330      	adds	r3, #48	; 0x30
1a0006fa:	f88d 3001 	strb.w	r3, [sp, #1]
            buffer[2] = '\r';
1a0006fe:	230d      	movs	r3, #13
1a000700:	f88d 3002 	strb.w	r3, [sp, #2]
            buffer[3] = '\n';
1a000704:	230a      	movs	r3, #10
1a000706:	f88d 3003 	strb.w	r3, [sp, #3]
            buffer[4] = '\0';
1a00070a:	2300      	movs	r3, #0
1a00070c:	f88d 3004 	strb.w	r3, [sp, #4]
1a000710:	e79a      	b.n	1a000648 <main+0x64>
                  if(contador == 99){
1a000712:	2d63      	cmp	r5, #99	; 0x63
1a000714:	d006      	beq.n	1a000724 <main+0x140>
                      contador++;
1a000716:	3501      	adds	r5, #1
1a000718:	b2ed      	uxtb	r5, r5
1a00071a:	e7e1      	b.n	1a0006e0 <main+0xfc>
                  if(contador == 0){
1a00071c:	b125      	cbz	r5, 1a000728 <main+0x144>
                      contador--;
1a00071e:	3d01      	subs	r5, #1
1a000720:	b2ed      	uxtb	r5, r5
1a000722:	e7dd      	b.n	1a0006e0 <main+0xfc>
                      contador = 0;
1a000724:	4625      	mov	r5, r4
1a000726:	e7db      	b.n	1a0006e0 <main+0xfc>
                      contador = 99;
1a000728:	2563      	movs	r5, #99	; 0x63
1a00072a:	e7d9      	b.n	1a0006e0 <main+0xfc>
                   contador = 0;
1a00072c:	4625      	mov	r5, r4
1a00072e:	e7d7      	b.n	1a0006e0 <main+0xfc>
1a000730:	400c1000 	.word	0x400c1000
1a000734:	400c2000 	.word	0x400c2000
1a000738:	10000038 	.word	0x10000038
1a00073c:	1a001bc4 	.word	0x1a001bc4
1a000740:	1a001b94 	.word	0x1a001b94
1a000744:	1a001ba4 	.word	0x1a001ba4
1a000748:	1a001bb4 	.word	0x1a001bb4
1a00074c:	1a001bd4 	.word	0x1a001bd4
1a000750:	cccccccd 	.word	0xcccccccd

1a000754 <initialise_monitor_handles>:
{
1a000754:	4770      	bx	lr
1a000756:	Address 0x000000001a000756 is out of bounds.


1a000758 <Reset_Handler>:
void Reset_Handler(void) {
1a000758:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00075a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00075c:	4a19      	ldr	r2, [pc, #100]	; (1a0007c4 <Reset_Handler+0x6c>)
1a00075e:	4b1a      	ldr	r3, [pc, #104]	; (1a0007c8 <Reset_Handler+0x70>)
1a000760:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000762:	4a1a      	ldr	r2, [pc, #104]	; (1a0007cc <Reset_Handler+0x74>)
1a000764:	3304      	adds	r3, #4
1a000766:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000768:	2300      	movs	r3, #0
1a00076a:	e005      	b.n	1a000778 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00076c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000770:	4a17      	ldr	r2, [pc, #92]	; (1a0007d0 <Reset_Handler+0x78>)
1a000772:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000776:	3301      	adds	r3, #1
1a000778:	2b07      	cmp	r3, #7
1a00077a:	d9f7      	bls.n	1a00076c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00077c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00077e:	4b15      	ldr	r3, [pc, #84]	; (1a0007d4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000780:	e007      	b.n	1a000792 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000782:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000786:	689a      	ldr	r2, [r3, #8]
1a000788:	6859      	ldr	r1, [r3, #4]
1a00078a:	6818      	ldr	r0, [r3, #0]
1a00078c:	f7ff fcfd 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000790:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000792:	4a11      	ldr	r2, [pc, #68]	; (1a0007d8 <Reset_Handler+0x80>)
1a000794:	4293      	cmp	r3, r2
1a000796:	d3f4      	bcc.n	1a000782 <Reset_Handler+0x2a>
1a000798:	e006      	b.n	1a0007a8 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00079a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00079c:	6859      	ldr	r1, [r3, #4]
1a00079e:	f854 0b08 	ldr.w	r0, [r4], #8
1a0007a2:	f7ff fd01 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0007a6:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0007a8:	4a0c      	ldr	r2, [pc, #48]	; (1a0007dc <Reset_Handler+0x84>)
1a0007aa:	4293      	cmp	r3, r2
1a0007ac:	d3f5      	bcc.n	1a00079a <Reset_Handler+0x42>
    SystemInit();
1a0007ae:	f000 ff25 	bl	1a0015fc <SystemInit>
    __libc_init_array();
1a0007b2:	f001 f8cb 	bl	1a00194c <__libc_init_array>
    initialise_monitor_handles();
1a0007b6:	f7ff ffcd 	bl	1a000754 <initialise_monitor_handles>
    main();
1a0007ba:	f7ff ff13 	bl	1a0005e4 <main>
        __asm__ volatile("wfi");
1a0007be:	bf30      	wfi
1a0007c0:	e7fd      	b.n	1a0007be <Reset_Handler+0x66>
1a0007c2:	bf00      	nop
1a0007c4:	10df1000 	.word	0x10df1000
1a0007c8:	40053100 	.word	0x40053100
1a0007cc:	01dff7ff 	.word	0x01dff7ff
1a0007d0:	e000e280 	.word	0xe000e280
1a0007d4:	1a000114 	.word	0x1a000114
1a0007d8:	1a000150 	.word	0x1a000150
1a0007dc:	1a000178 	.word	0x1a000178

1a0007e0 <_fini>:
void _fini(void) {}
1a0007e0:	4770      	bx	lr

1a0007e2 <_init>:
void _init(void) {}
1a0007e2:	4770      	bx	lr

1a0007e4 <Led_On>:
	return TRUE;
}

/** \brief Function to turn on a specific led */
uint8_t Led_On(uint8_t led)
{
1a0007e4:	4603      	mov	r3, r0
	/** \details Function to turn on a specific led at the EDU-CIAA board.
	 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
	 * */
	uint8_t result = FALSE;

	if (led == YELLOW_LED)
1a0007e6:	2804      	cmp	r0, #4
1a0007e8:	d00f      	beq.n	1a00080a <Led_On+0x26>
	uint8_t result = FALSE;
1a0007ea:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == RED_LED)
1a0007ec:	2b03      	cmp	r3, #3
1a0007ee:	d012      	beq.n	1a000816 <Led_On+0x32>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a0007f0:	2b05      	cmp	r3, #5
1a0007f2:	d018      	beq.n	1a000826 <Led_On+0x42>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
    if (led == RGB_R_LED)
1a0007f4:	b923      	cbnz	r3, 1a000800 <Led_On+0x1c>
	pGPIO->SET[port] = (1 << pin);
1a0007f6:	2001      	movs	r0, #1
1a0007f8:	f242 2214 	movw	r2, #8724	; 0x2214
1a0007fc:	4915      	ldr	r1, [pc, #84]	; (1a000854 <Led_On+0x70>)
1a0007fe:	5088      	str	r0, [r1, r2]
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a000800:	2b01      	cmp	r3, #1
1a000802:	d018      	beq.n	1a000836 <Led_On+0x52>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a000804:	2b02      	cmp	r3, #2
1a000806:	d01d      	beq.n	1a000844 <Led_On+0x60>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
}
1a000808:	4770      	bx	lr
1a00080a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a00080e:	4a12      	ldr	r2, [pc, #72]	; (1a000858 <Led_On+0x74>)
1a000810:	6011      	str	r1, [r2, #0]
		result = TRUE;
1a000812:	2001      	movs	r0, #1
1a000814:	e7ea      	b.n	1a0007ec <Led_On+0x8>
1a000816:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a00081a:	f242 2204 	movw	r2, #8708	; 0x2204
1a00081e:	490d      	ldr	r1, [pc, #52]	; (1a000854 <Led_On+0x70>)
1a000820:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000822:	2001      	movs	r0, #1
1a000824:	e7e4      	b.n	1a0007f0 <Led_On+0xc>
1a000826:	f44f 5080 	mov.w	r0, #4096	; 0x1000
1a00082a:	f242 2204 	movw	r2, #8708	; 0x2204
1a00082e:	4909      	ldr	r1, [pc, #36]	; (1a000854 <Led_On+0x70>)
1a000830:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000832:	2001      	movs	r0, #1
1a000834:	e7de      	b.n	1a0007f4 <Led_On+0x10>
1a000836:	2002      	movs	r0, #2
1a000838:	f242 2214 	movw	r2, #8724	; 0x2214
1a00083c:	4905      	ldr	r1, [pc, #20]	; (1a000854 <Led_On+0x70>)
1a00083e:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000840:	4618      	mov	r0, r3
1a000842:	e7df      	b.n	1a000804 <Led_On+0x20>
1a000844:	2104      	movs	r1, #4
1a000846:	f242 2314 	movw	r3, #8724	; 0x2214
1a00084a:	4a02      	ldr	r2, [pc, #8]	; (1a000854 <Led_On+0x70>)
1a00084c:	50d1      	str	r1, [r2, r3]
		result = TRUE;
1a00084e:	2001      	movs	r0, #1
1a000850:	e7da      	b.n	1a000808 <Led_On+0x24>
1a000852:	bf00      	nop
1a000854:	400f4000 	.word	0x400f4000
1a000858:	400f6200 	.word	0x400f6200

1a00085c <Led_Off>:

/** \brief Function to turn off a specific led */
uint8_t Led_Off(uint8_t led)
{
1a00085c:	4603      	mov	r3, r0
	/** \details Function to turn off a specific led at the EDU-CIAA board.
		 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
		 * */
	uint8_t result = FALSE;

	if (led == YELLOW_LED)
1a00085e:	2804      	cmp	r0, #4
1a000860:	d00f      	beq.n	1a000882 <Led_Off+0x26>
	uint8_t result = FALSE;
1a000862:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == RED_LED)
1a000864:	2b03      	cmp	r3, #3
1a000866:	d012      	beq.n	1a00088e <Led_Off+0x32>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a000868:	2b05      	cmp	r3, #5
1a00086a:	d018      	beq.n	1a00089e <Led_Off+0x42>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_R_LED)
1a00086c:	b923      	cbnz	r3, 1a000878 <Led_Off+0x1c>
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a00086e:	2001      	movs	r0, #1
1a000870:	f242 2294 	movw	r2, #8852	; 0x2294
1a000874:	4915      	ldr	r1, [pc, #84]	; (1a0008cc <Led_Off+0x70>)
1a000876:	5088      	str	r0, [r1, r2]
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a000878:	2b01      	cmp	r3, #1
1a00087a:	d018      	beq.n	1a0008ae <Led_Off+0x52>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a00087c:	2b02      	cmp	r3, #2
1a00087e:	d01d      	beq.n	1a0008bc <Led_Off+0x60>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
}
1a000880:	4770      	bx	lr
1a000882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a000886:	4a12      	ldr	r2, [pc, #72]	; (1a0008d0 <Led_Off+0x74>)
1a000888:	6011      	str	r1, [r2, #0]
		result = TRUE;
1a00088a:	2001      	movs	r0, #1
1a00088c:	e7ea      	b.n	1a000864 <Led_Off+0x8>
1a00088e:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a000892:	f242 2284 	movw	r2, #8836	; 0x2284
1a000896:	490d      	ldr	r1, [pc, #52]	; (1a0008cc <Led_Off+0x70>)
1a000898:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a00089a:	2001      	movs	r0, #1
1a00089c:	e7e4      	b.n	1a000868 <Led_Off+0xc>
1a00089e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
1a0008a2:	f242 2284 	movw	r2, #8836	; 0x2284
1a0008a6:	4909      	ldr	r1, [pc, #36]	; (1a0008cc <Led_Off+0x70>)
1a0008a8:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a0008aa:	2001      	movs	r0, #1
1a0008ac:	e7de      	b.n	1a00086c <Led_Off+0x10>
1a0008ae:	2002      	movs	r0, #2
1a0008b0:	f242 2294 	movw	r2, #8852	; 0x2294
1a0008b4:	4905      	ldr	r1, [pc, #20]	; (1a0008cc <Led_Off+0x70>)
1a0008b6:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a0008b8:	4618      	mov	r0, r3
1a0008ba:	e7df      	b.n	1a00087c <Led_Off+0x20>
1a0008bc:	2104      	movs	r1, #4
1a0008be:	f242 2394 	movw	r3, #8852	; 0x2294
1a0008c2:	4a02      	ldr	r2, [pc, #8]	; (1a0008cc <Led_Off+0x70>)
1a0008c4:	50d1      	str	r1, [r2, r3]
		result = TRUE;
1a0008c6:	2001      	movs	r0, #1
1a0008c8:	e7da      	b.n	1a000880 <Led_Off+0x24>
1a0008ca:	bf00      	nop
1a0008cc:	400f4000 	.word	0x400f4000
1a0008d0:	400f6280 	.word	0x400f6280

1a0008d4 <Led_Toggle>:

/** \brief Function to turn off a specific led */
uint8_t Led_Toggle(uint8_t led)
{
1a0008d4:	4603      	mov	r3, r0
	/** \details Function to toogle a specific led at the EDU-CIAA board.
	 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
	 * */
uint8_t result = FALSE;

	if (led == YELLOW_LED)
1a0008d6:	2804      	cmp	r0, #4
1a0008d8:	d00f      	beq.n	1a0008fa <Led_Toggle+0x26>
uint8_t result = FALSE;
1a0008da:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == RED_LED)
1a0008dc:	2b03      	cmp	r3, #3
1a0008de:	d012      	beq.n	1a000906 <Led_Toggle+0x32>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a0008e0:	2b05      	cmp	r3, #5
1a0008e2:	d018      	beq.n	1a000916 <Led_Toggle+0x42>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_R_LED)
1a0008e4:	b923      	cbnz	r3, 1a0008f0 <Led_Toggle+0x1c>
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinToggle(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->NOT[port] = (1 << pin);
1a0008e6:	2001      	movs	r0, #1
1a0008e8:	f242 3214 	movw	r2, #8980	; 0x2314
1a0008ec:	4915      	ldr	r1, [pc, #84]	; (1a000944 <Led_Toggle+0x70>)
1a0008ee:	5088      	str	r0, [r1, r2]
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a0008f0:	2b01      	cmp	r3, #1
1a0008f2:	d018      	beq.n	1a000926 <Led_Toggle+0x52>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a0008f4:	2b02      	cmp	r3, #2
1a0008f6:	d01d      	beq.n	1a000934 <Led_Toggle+0x60>
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
	
}
1a0008f8:	4770      	bx	lr
1a0008fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a0008fe:	4a12      	ldr	r2, [pc, #72]	; (1a000948 <Led_Toggle+0x74>)
1a000900:	6011      	str	r1, [r2, #0]
		result = TRUE;
1a000902:	2001      	movs	r0, #1
1a000904:	e7ea      	b.n	1a0008dc <Led_Toggle+0x8>
1a000906:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a00090a:	f242 3204 	movw	r2, #8964	; 0x2304
1a00090e:	490d      	ldr	r1, [pc, #52]	; (1a000944 <Led_Toggle+0x70>)
1a000910:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000912:	2001      	movs	r0, #1
1a000914:	e7e4      	b.n	1a0008e0 <Led_Toggle+0xc>
1a000916:	f44f 5080 	mov.w	r0, #4096	; 0x1000
1a00091a:	f242 3204 	movw	r2, #8964	; 0x2304
1a00091e:	4909      	ldr	r1, [pc, #36]	; (1a000944 <Led_Toggle+0x70>)
1a000920:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000922:	2001      	movs	r0, #1
1a000924:	e7de      	b.n	1a0008e4 <Led_Toggle+0x10>
1a000926:	2002      	movs	r0, #2
1a000928:	f242 3214 	movw	r2, #8980	; 0x2314
1a00092c:	4905      	ldr	r1, [pc, #20]	; (1a000944 <Led_Toggle+0x70>)
1a00092e:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000930:	4618      	mov	r0, r3
1a000932:	e7df      	b.n	1a0008f4 <Led_Toggle+0x20>
1a000934:	2104      	movs	r1, #4
1a000936:	f242 3314 	movw	r3, #8980	; 0x2314
1a00093a:	4a02      	ldr	r2, [pc, #8]	; (1a000944 <Led_Toggle+0x70>)
1a00093c:	50d1      	str	r1, [r2, r3]
		result = TRUE;
1a00093e:	2001      	movs	r0, #1
1a000940:	e7da      	b.n	1a0008f8 <Led_Toggle+0x24>
1a000942:	bf00      	nop
1a000944:	400f4000 	.word	0x400f4000
1a000948:	400f6300 	.word	0x400f6300

1a00094c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00094c:	2200      	movs	r2, #0
1a00094e:	2a05      	cmp	r2, #5
1a000950:	d819      	bhi.n	1a000986 <Board_LED_Init+0x3a>
{
1a000952:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000954:	490c      	ldr	r1, [pc, #48]	; (1a000988 <Board_LED_Init+0x3c>)
1a000956:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00095a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00095e:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a000960:	4b0a      	ldr	r3, [pc, #40]	; (1a00098c <Board_LED_Init+0x40>)
1a000962:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000966:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00096a:	2001      	movs	r0, #1
1a00096c:	40a0      	lsls	r0, r4
1a00096e:	4301      	orrs	r1, r0
1a000970:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000974:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000978:	2100      	movs	r1, #0
1a00097a:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00097c:	3201      	adds	r2, #1
1a00097e:	2a05      	cmp	r2, #5
1a000980:	d9e8      	bls.n	1a000954 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a000982:	bc70      	pop	{r4, r5, r6}
1a000984:	4770      	bx	lr
1a000986:	4770      	bx	lr
1a000988:	1a001bf0 	.word	0x1a001bf0
1a00098c:	400f4000 	.word	0x400f4000

1a000990 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000990:	2300      	movs	r3, #0
1a000992:	2b03      	cmp	r3, #3
1a000994:	d816      	bhi.n	1a0009c4 <Board_TEC_Init+0x34>
{
1a000996:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000998:	490b      	ldr	r1, [pc, #44]	; (1a0009c8 <Board_TEC_Init+0x38>)
1a00099a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00099e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0009a2:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0009a4:	4c09      	ldr	r4, [pc, #36]	; (1a0009cc <Board_TEC_Init+0x3c>)
1a0009a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0009aa:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0009ae:	2001      	movs	r0, #1
1a0009b0:	40a8      	lsls	r0, r5
1a0009b2:	ea21 0100 	bic.w	r1, r1, r0
1a0009b6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0009ba:	3301      	adds	r3, #1
1a0009bc:	2b03      	cmp	r3, #3
1a0009be:	d9eb      	bls.n	1a000998 <Board_TEC_Init+0x8>
    }
}
1a0009c0:	bc30      	pop	{r4, r5}
1a0009c2:	4770      	bx	lr
1a0009c4:	4770      	bx	lr
1a0009c6:	bf00      	nop
1a0009c8:	1a001be8 	.word	0x1a001be8
1a0009cc:	400f4000 	.word	0x400f4000

1a0009d0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0009d0:	2300      	movs	r3, #0
1a0009d2:	2b08      	cmp	r3, #8
1a0009d4:	d816      	bhi.n	1a000a04 <Board_GPIO_Init+0x34>
{
1a0009d6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0009d8:	490b      	ldr	r1, [pc, #44]	; (1a000a08 <Board_GPIO_Init+0x38>)
1a0009da:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0009de:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0009e2:	784d      	ldrb	r5, [r1, #1]
1a0009e4:	4c09      	ldr	r4, [pc, #36]	; (1a000a0c <Board_GPIO_Init+0x3c>)
1a0009e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0009ea:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0009ee:	2001      	movs	r0, #1
1a0009f0:	40a8      	lsls	r0, r5
1a0009f2:	ea21 0100 	bic.w	r1, r1, r0
1a0009f6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0009fa:	3301      	adds	r3, #1
1a0009fc:	2b08      	cmp	r3, #8
1a0009fe:	d9eb      	bls.n	1a0009d8 <Board_GPIO_Init+0x8>
    }
}
1a000a00:	bc30      	pop	{r4, r5}
1a000a02:	4770      	bx	lr
1a000a04:	4770      	bx	lr
1a000a06:	bf00      	nop
1a000a08:	1a001bfc 	.word	0x1a001bfc
1a000a0c:	400f4000 	.word	0x400f4000

1a000a10 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000a10:	b510      	push	{r4, lr}
1a000a12:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a000a14:	4c08      	ldr	r4, [pc, #32]	; (1a000a38 <Board_ADC_Init+0x28>)
1a000a16:	4669      	mov	r1, sp
1a000a18:	4620      	mov	r0, r4
1a000a1a:	f000 f99b 	bl	1a000d54 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000a1e:	4a07      	ldr	r2, [pc, #28]	; (1a000a3c <Board_ADC_Init+0x2c>)
1a000a20:	4669      	mov	r1, sp
1a000a22:	4620      	mov	r0, r4
1a000a24:	f000 f9b6 	bl	1a000d94 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000a28:	2200      	movs	r2, #0
1a000a2a:	4669      	mov	r1, sp
1a000a2c:	4620      	mov	r0, r4
1a000a2e:	f000 f9ca 	bl	1a000dc6 <Chip_ADC_SetResolution>
}
1a000a32:	b002      	add	sp, #8
1a000a34:	bd10      	pop	{r4, pc}
1a000a36:	bf00      	nop
1a000a38:	400e3000 	.word	0x400e3000
1a000a3c:	00061a80 	.word	0x00061a80

1a000a40 <Board_SPI_Init>:
{
1a000a40:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a000a42:	4c0b      	ldr	r4, [pc, #44]	; (1a000a70 <Board_SPI_Init+0x30>)
1a000a44:	4620      	mov	r0, r4
1a000a46:	f000 fd7f 	bl	1a001548 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000a4a:	6863      	ldr	r3, [r4, #4]
1a000a4c:	f023 0304 	bic.w	r3, r3, #4
1a000a50:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000a52:	6823      	ldr	r3, [r4, #0]
1a000a54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000a58:	f043 0307 	orr.w	r3, r3, #7
1a000a5c:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000a5e:	4905      	ldr	r1, [pc, #20]	; (1a000a74 <Board_SPI_Init+0x34>)
1a000a60:	4620      	mov	r0, r4
1a000a62:	f000 fd52 	bl	1a00150a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000a66:	6863      	ldr	r3, [r4, #4]
1a000a68:	f043 0302 	orr.w	r3, r3, #2
1a000a6c:	6063      	str	r3, [r4, #4]
1a000a6e:	bd10      	pop	{r4, pc}
1a000a70:	400c5000 	.word	0x400c5000
1a000a74:	000186a0 	.word	0x000186a0

1a000a78 <Board_I2C_Init>:
{
1a000a78:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a000a7a:	2000      	movs	r0, #0
1a000a7c:	f000 fd90 	bl	1a0015a0 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000a80:	f640 0208 	movw	r2, #2056	; 0x808
1a000a84:	4b03      	ldr	r3, [pc, #12]	; (1a000a94 <Board_I2C_Init+0x1c>)
1a000a86:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000a8a:	4903      	ldr	r1, [pc, #12]	; (1a000a98 <Board_I2C_Init+0x20>)
1a000a8c:	2000      	movs	r0, #0
1a000a8e:	f000 fd99 	bl	1a0015c4 <Chip_I2C_SetClockRate>
1a000a92:	bd08      	pop	{r3, pc}
1a000a94:	40086000 	.word	0x40086000
1a000a98:	000f4240 	.word	0x000f4240

1a000a9c <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000a9c:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a000a9e:	4c07      	ldr	r4, [pc, #28]	; (1a000abc <Board_Debug_Init+0x20>)
1a000aa0:	4620      	mov	r0, r4
1a000aa2:	f000 f895 	bl	1a000bd0 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000aa6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000aaa:	4620      	mov	r0, r4
1a000aac:	f000 f8ba 	bl	1a000c24 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000ab0:	2303      	movs	r3, #3
1a000ab2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000ab4:	2301      	movs	r3, #1
1a000ab6:	65e3      	str	r3, [r4, #92]	; 0x5c
1a000ab8:	bd10      	pop	{r4, pc}
1a000aba:	bf00      	nop
1a000abc:	400c1000 	.word	0x400c1000

1a000ac0 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000ac0:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000ac2:	f7ff ffeb 	bl	1a000a9c <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000ac6:	4808      	ldr	r0, [pc, #32]	; (1a000ae8 <Board_Init+0x28>)
1a000ac8:	f000 fcfe 	bl	1a0014c8 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a000acc:	f7ff ff80 	bl	1a0009d0 <Board_GPIO_Init>
   Board_ADC_Init();
1a000ad0:	f7ff ff9e 	bl	1a000a10 <Board_ADC_Init>
   Board_SPI_Init();
1a000ad4:	f7ff ffb4 	bl	1a000a40 <Board_SPI_Init>
   Board_I2C_Init();
1a000ad8:	f7ff ffce 	bl	1a000a78 <Board_I2C_Init>

   Board_LED_Init();
1a000adc:	f7ff ff36 	bl	1a00094c <Board_LED_Init>
   Board_TEC_Init();
1a000ae0:	f7ff ff56 	bl	1a000990 <Board_TEC_Init>
1a000ae4:	bd08      	pop	{r3, pc}
1a000ae6:	bf00      	nop
1a000ae8:	400f4000 	.word	0x400f4000

1a000aec <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a000aec:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000aee:	f7ff ffd5 	bl	1a000a9c <Board_Debug_Init>
1a000af2:	bd08      	pop	{r3, pc}

1a000af4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000af4:	2300      	movs	r3, #0
1a000af6:	2b1c      	cmp	r3, #28
1a000af8:	d812      	bhi.n	1a000b20 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000afa:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000afc:	4a09      	ldr	r2, [pc, #36]	; (1a000b24 <Board_SetupMuxing+0x30>)
1a000afe:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000b02:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000b06:	784a      	ldrb	r2, [r1, #1]
1a000b08:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000b0a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000b0e:	4906      	ldr	r1, [pc, #24]	; (1a000b28 <Board_SetupMuxing+0x34>)
1a000b10:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000b14:	3301      	adds	r3, #1
1a000b16:	2b1c      	cmp	r3, #28
1a000b18:	d9f0      	bls.n	1a000afc <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000b1e:	4770      	bx	lr
1a000b20:	4770      	bx	lr
1a000b22:	bf00      	nop
1a000b24:	1a001c18 	.word	0x1a001c18
1a000b28:	40086000 	.word	0x40086000

1a000b2c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000b2c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000b2e:	4a17      	ldr	r2, [pc, #92]	; (1a000b8c <Board_SetupClocking+0x60>)
1a000b30:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000b34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b38:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b3c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000b40:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000b44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b48:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b4c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000b50:	2201      	movs	r2, #1
1a000b52:	490f      	ldr	r1, [pc, #60]	; (1a000b90 <Board_SetupClocking+0x64>)
1a000b54:	2006      	movs	r0, #6
1a000b56:	f000 fc0d 	bl	1a001374 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b5a:	2400      	movs	r4, #0
1a000b5c:	b14c      	cbz	r4, 1a000b72 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000b5e:	4b0b      	ldr	r3, [pc, #44]	; (1a000b8c <Board_SetupClocking+0x60>)
1a000b60:	685a      	ldr	r2, [r3, #4]
1a000b62:	f022 020c 	bic.w	r2, r2, #12
1a000b66:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000b68:	685a      	ldr	r2, [r3, #4]
1a000b6a:	f042 0203 	orr.w	r2, r2, #3
1a000b6e:	605a      	str	r2, [r3, #4]
1a000b70:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000b72:	4808      	ldr	r0, [pc, #32]	; (1a000b94 <Board_SetupClocking+0x68>)
1a000b74:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000b78:	2301      	movs	r3, #1
1a000b7a:	788a      	ldrb	r2, [r1, #2]
1a000b7c:	7849      	ldrb	r1, [r1, #1]
1a000b7e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000b82:	f000 fb49 	bl	1a001218 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b86:	3401      	adds	r4, #1
1a000b88:	e7e8      	b.n	1a000b5c <Board_SetupClocking+0x30>
1a000b8a:	bf00      	nop
1a000b8c:	40043000 	.word	0x40043000
1a000b90:	0c28cb00 	.word	0x0c28cb00
1a000b94:	1a001c14 	.word	0x1a001c14

1a000b98 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000b98:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000b9a:	f7ff ffab 	bl	1a000af4 <Board_SetupMuxing>
    Board_SetupClocking();
1a000b9e:	f7ff ffc5 	bl	1a000b2c <Board_SetupClocking>
1a000ba2:	bd08      	pop	{r3, pc}

1a000ba4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000ba4:	4b09      	ldr	r3, [pc, #36]	; (1a000bcc <Chip_UART_GetIndex+0x28>)
1a000ba6:	4298      	cmp	r0, r3
1a000ba8:	d009      	beq.n	1a000bbe <Chip_UART_GetIndex+0x1a>
1a000baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000bae:	4298      	cmp	r0, r3
1a000bb0:	d007      	beq.n	1a000bc2 <Chip_UART_GetIndex+0x1e>
1a000bb2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000bb6:	4298      	cmp	r0, r3
1a000bb8:	d005      	beq.n	1a000bc6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000bba:	2000      	movs	r0, #0
1a000bbc:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000bbe:	2002      	movs	r0, #2
1a000bc0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000bc2:	2003      	movs	r0, #3
1a000bc4:	4770      	bx	lr
			return 1;
1a000bc6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000bc8:	4770      	bx	lr
1a000bca:	bf00      	nop
1a000bcc:	400c1000 	.word	0x400c1000

1a000bd0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000bd0:	b530      	push	{r4, r5, lr}
1a000bd2:	b083      	sub	sp, #12
1a000bd4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000bd6:	f7ff ffe5 	bl	1a000ba4 <Chip_UART_GetIndex>
1a000bda:	2301      	movs	r3, #1
1a000bdc:	461a      	mov	r2, r3
1a000bde:	4619      	mov	r1, r3
1a000be0:	4d0e      	ldr	r5, [pc, #56]	; (1a000c1c <Chip_UART_Init+0x4c>)
1a000be2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000be6:	f000 fb5d 	bl	1a0012a4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000bea:	2307      	movs	r3, #7
1a000bec:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000bee:	2300      	movs	r3, #0
1a000bf0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000bf2:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000bf4:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000bf6:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000bf8:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000bfa:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000bfc:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000bfe:	4b08      	ldr	r3, [pc, #32]	; (1a000c20 <Chip_UART_Init+0x50>)
1a000c00:	429c      	cmp	r4, r3
1a000c02:	d006      	beq.n	1a000c12 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000c04:	2303      	movs	r3, #3
1a000c06:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000c08:	2310      	movs	r3, #16
1a000c0a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000c0c:	9b01      	ldr	r3, [sp, #4]
}
1a000c0e:	b003      	add	sp, #12
1a000c10:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000c12:	2300      	movs	r3, #0
1a000c14:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000c16:	69a3      	ldr	r3, [r4, #24]
1a000c18:	9301      	str	r3, [sp, #4]
1a000c1a:	e7f3      	b.n	1a000c04 <Chip_UART_Init+0x34>
1a000c1c:	1a001c94 	.word	0x1a001c94
1a000c20:	40082000 	.word	0x40082000

1a000c24 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000c28:	b083      	sub	sp, #12
1a000c2a:	4683      	mov	fp, r0
1a000c2c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000c2e:	f7ff ffb9 	bl	1a000ba4 <Chip_UART_GetIndex>
1a000c32:	4b35      	ldr	r3, [pc, #212]	; (1a000d08 <Chip_UART_SetBaudFDR+0xe4>)
1a000c34:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000c38:	f000 fb6c 	bl	1a001314 <Chip_Clock_GetRate>
1a000c3c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000c3e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000c42:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000c44:	2300      	movs	r3, #0
1a000c46:	9301      	str	r3, [sp, #4]
1a000c48:	46a2      	mov	sl, r4
1a000c4a:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000c4c:	e02a      	b.n	1a000ca4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000c4e:	4243      	negs	r3, r0
				div ++;
1a000c50:	1c4a      	adds	r2, r1, #1
1a000c52:	e017      	b.n	1a000c84 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000c54:	b30b      	cbz	r3, 1a000c9a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000c56:	461f      	mov	r7, r3
			sd = d;
1a000c58:	9501      	str	r5, [sp, #4]
			sm = m;
1a000c5a:	46a2      	mov	sl, r4
			sdiv = div;
1a000c5c:	4691      	mov	r9, r2
		for (d = 0; d < m; d++) {
1a000c5e:	3501      	adds	r5, #1
1a000c60:	42ac      	cmp	r4, r5
1a000c62:	d91e      	bls.n	1a000ca2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000c64:	0933      	lsrs	r3, r6, #4
1a000c66:	0730      	lsls	r0, r6, #28
1a000c68:	fba4 0100 	umull	r0, r1, r4, r0
1a000c6c:	fb04 1103 	mla	r1, r4, r3, r1
1a000c70:	1962      	adds	r2, r4, r5
1a000c72:	fb08 f202 	mul.w	r2, r8, r2
1a000c76:	2300      	movs	r3, #0
1a000c78:	f000 fce0 	bl	1a00163c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000c7c:	4603      	mov	r3, r0
			div = (uint32_t) (dval >> 32);
1a000c7e:	460a      	mov	r2, r1
			if ((int)diff < 0) {
1a000c80:	2800      	cmp	r0, #0
1a000c82:	dbe4      	blt.n	1a000c4e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000c84:	429f      	cmp	r7, r3
1a000c86:	d3ea      	bcc.n	1a000c5e <Chip_UART_SetBaudFDR+0x3a>
1a000c88:	2a00      	cmp	r2, #0
1a000c8a:	d0e8      	beq.n	1a000c5e <Chip_UART_SetBaudFDR+0x3a>
1a000c8c:	0c11      	lsrs	r1, r2, #16
1a000c8e:	d1e6      	bne.n	1a000c5e <Chip_UART_SetBaudFDR+0x3a>
1a000c90:	2a02      	cmp	r2, #2
1a000c92:	d8df      	bhi.n	1a000c54 <Chip_UART_SetBaudFDR+0x30>
1a000c94:	2d00      	cmp	r5, #0
1a000c96:	d1e2      	bne.n	1a000c5e <Chip_UART_SetBaudFDR+0x3a>
1a000c98:	e7dc      	b.n	1a000c54 <Chip_UART_SetBaudFDR+0x30>
			odiff = diff;
1a000c9a:	461f      	mov	r7, r3
			sd = d;
1a000c9c:	9501      	str	r5, [sp, #4]
			sm = m;
1a000c9e:	46a2      	mov	sl, r4
			sdiv = div;
1a000ca0:	4691      	mov	r9, r2
	for (m = 1; odiff && m < 16; m++) {
1a000ca2:	3401      	adds	r4, #1
1a000ca4:	b11f      	cbz	r7, 1a000cae <Chip_UART_SetBaudFDR+0x8a>
1a000ca6:	2c0f      	cmp	r4, #15
1a000ca8:	d801      	bhi.n	1a000cae <Chip_UART_SetBaudFDR+0x8a>
1a000caa:	2500      	movs	r5, #0
1a000cac:	e7d8      	b.n	1a000c60 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000cae:	f1b9 0f00 	cmp.w	r9, #0
1a000cb2:	d024      	beq.n	1a000cfe <Chip_UART_SetBaudFDR+0xda>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000cb4:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000cbc:	f8cb 300c 	str.w	r3, [fp, #12]
1a000cc0:	fa5f f389 	uxtb.w	r3, r9
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000cc4:	f8cb 3000 	str.w	r3, [fp]
1a000cc8:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000ccc:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000cd0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000cd8:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000cdc:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000ce0:	b2db      	uxtb	r3, r3
1a000ce2:	9901      	ldr	r1, [sp, #4]
1a000ce4:	f001 020f 	and.w	r2, r1, #15
1a000ce8:	4313      	orrs	r3, r2
1a000cea:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000cee:	0933      	lsrs	r3, r6, #4
1a000cf0:	fb03 f30a 	mul.w	r3, r3, sl
1a000cf4:	448a      	add	sl, r1
1a000cf6:	fb0a f909 	mul.w	r9, sl, r9
1a000cfa:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000cfe:	4648      	mov	r0, r9
1a000d00:	b003      	add	sp, #12
1a000d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000d06:	bf00      	nop
1a000d08:	1a001c8c 	.word	0x1a001c8c

1a000d0c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000d0c:	4b03      	ldr	r3, [pc, #12]	; (1a000d1c <Chip_ADC_GetClockIndex+0x10>)
1a000d0e:	4298      	cmp	r0, r3
1a000d10:	d001      	beq.n	1a000d16 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000d12:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000d14:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000d16:	2004      	movs	r0, #4
1a000d18:	4770      	bx	lr
1a000d1a:	bf00      	nop
1a000d1c:	400e4000 	.word	0x400e4000

1a000d20 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000d20:	b570      	push	{r4, r5, r6, lr}
1a000d22:	460d      	mov	r5, r1
1a000d24:	4614      	mov	r4, r2
1a000d26:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000d28:	f7ff fff0 	bl	1a000d0c <Chip_ADC_GetClockIndex>
1a000d2c:	f000 faf2 	bl	1a001314 <Chip_Clock_GetRate>
	if (burstMode) {
1a000d30:	b965      	cbnz	r5, 1a000d4c <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a000d32:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000d36:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000d3a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000d3e:	0064      	lsls	r4, r4, #1
1a000d40:	fbb0 f0f4 	udiv	r0, r0, r4
1a000d44:	b2c0      	uxtb	r0, r0
1a000d46:	3801      	subs	r0, #1
	return div;
}
1a000d48:	b2c0      	uxtb	r0, r0
1a000d4a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a000d4c:	fb04 f406 	mul.w	r4, r4, r6
1a000d50:	e7f3      	b.n	1a000d3a <getClkDiv+0x1a>
1a000d52:	Address 0x000000001a000d52 is out of bounds.


1a000d54 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000d54:	b538      	push	{r3, r4, r5, lr}
1a000d56:	4605      	mov	r5, r0
1a000d58:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000d5a:	f7ff ffd7 	bl	1a000d0c <Chip_ADC_GetClockIndex>
1a000d5e:	2301      	movs	r3, #1
1a000d60:	461a      	mov	r2, r3
1a000d62:	4619      	mov	r1, r3
1a000d64:	f000 fa9e 	bl	1a0012a4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000d68:	2100      	movs	r1, #0
1a000d6a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000d6c:	4a08      	ldr	r2, [pc, #32]	; (1a000d90 <Chip_ADC_Init+0x3c>)
1a000d6e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000d70:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000d72:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000d74:	230b      	movs	r3, #11
1a000d76:	4628      	mov	r0, r5
1a000d78:	f7ff ffd2 	bl	1a000d20 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000d7c:	0200      	lsls	r0, r0, #8
1a000d7e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000d82:	7923      	ldrb	r3, [r4, #4]
1a000d84:	045b      	lsls	r3, r3, #17
1a000d86:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000d8a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000d8c:	6028      	str	r0, [r5, #0]
1a000d8e:	bd38      	pop	{r3, r4, r5, pc}
1a000d90:	00061a80 	.word	0x00061a80

1a000d94 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000d94:	b570      	push	{r4, r5, r6, lr}
1a000d96:	4605      	mov	r5, r0
1a000d98:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000d9a:	6804      	ldr	r4, [r0, #0]
1a000d9c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000da0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000da4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000da6:	790b      	ldrb	r3, [r1, #4]
1a000da8:	f1c3 030b 	rsb	r3, r3, #11
1a000dac:	b2db      	uxtb	r3, r3
1a000dae:	7949      	ldrb	r1, [r1, #5]
1a000db0:	f7ff ffb6 	bl	1a000d20 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000db4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000db8:	7934      	ldrb	r4, [r6, #4]
1a000dba:	0464      	lsls	r4, r4, #17
1a000dbc:	f404 2460 	and.w	r4, r4, #917504	; 0xe0000
1a000dc0:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a000dc2:	6028      	str	r0, [r5, #0]
1a000dc4:	bd70      	pop	{r4, r5, r6, pc}

1a000dc6 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000dc6:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000dc8:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000dca:	680a      	ldr	r2, [r1, #0]
1a000dcc:	f7ff ffe2 	bl	1a000d94 <Chip_ADC_SetSampleRate>
1a000dd0:	bd08      	pop	{r3, pc}
1a000dd2:	Address 0x000000001a000dd2 is out of bounds.


1a000dd4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000dd6:	680b      	ldr	r3, [r1, #0]
1a000dd8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000ddc:	d002      	beq.n	1a000de4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000de2:	600b      	str	r3, [r1, #0]
1a000de4:	4607      	mov	r7, r0
1a000de6:	2501      	movs	r5, #1
1a000de8:	e03b      	b.n	1a000e62 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000dea:	694b      	ldr	r3, [r1, #20]
1a000dec:	fb03 f302 	mul.w	r3, r3, r2
1a000df0:	fbb3 f3f5 	udiv	r3, r3, r5
1a000df4:	e014      	b.n	1a000e20 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000df6:	461c      	mov	r4, r3
1a000df8:	e020      	b.n	1a000e3c <pll_calc_divs+0x68>
		return -val;
1a000dfa:	f1ce 0e00 	rsb	lr, lr, #0
1a000dfe:	e020      	b.n	1a000e42 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a000e00:	3201      	adds	r2, #1
1a000e02:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000e06:	dc26      	bgt.n	1a000e56 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000e08:	680c      	ldr	r4, [r1, #0]
1a000e0a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000e0e:	d0ec      	beq.n	1a000dea <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000e10:	1c73      	adds	r3, r6, #1
1a000e12:	fa02 fe03 	lsl.w	lr, r2, r3
1a000e16:	694b      	ldr	r3, [r1, #20]
1a000e18:	fb03 f30e 	mul.w	r3, r3, lr
1a000e1c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000e20:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a000e6c <pll_calc_divs+0x98>
1a000e24:	4573      	cmp	r3, lr
1a000e26:	d9eb      	bls.n	1a000e00 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000e28:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a000e70 <pll_calc_divs+0x9c>
1a000e2c:	4573      	cmp	r3, lr
1a000e2e:	d812      	bhi.n	1a000e56 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000e30:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000e34:	d1df      	bne.n	1a000df6 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a000e36:	1c74      	adds	r4, r6, #1
1a000e38:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a000e3c:	ebb0 0e04 	subs.w	lr, r0, r4
1a000e40:	d4db      	bmi.n	1a000dfa <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a000e42:	4577      	cmp	r7, lr
1a000e44:	d9dc      	bls.n	1a000e00 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000e46:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000e48:	1c77      	adds	r7, r6, #1
1a000e4a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000e4c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000e4e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000e50:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000e52:	4677      	mov	r7, lr
1a000e54:	e7d4      	b.n	1a000e00 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000e56:	3601      	adds	r6, #1
1a000e58:	2e03      	cmp	r6, #3
1a000e5a:	dc01      	bgt.n	1a000e60 <pll_calc_divs+0x8c>
1a000e5c:	2201      	movs	r2, #1
1a000e5e:	e7d0      	b.n	1a000e02 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a000e60:	3501      	adds	r5, #1
1a000e62:	2d04      	cmp	r5, #4
1a000e64:	dc01      	bgt.n	1a000e6a <pll_calc_divs+0x96>
1a000e66:	2600      	movs	r6, #0
1a000e68:	e7f6      	b.n	1a000e58 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a000e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000e6c:	094c5eff 	.word	0x094c5eff
1a000e70:	1312d000 	.word	0x1312d000

1a000e74 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000e74:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000e76:	b099      	sub	sp, #100	; 0x64
1a000e78:	4605      	mov	r5, r0
1a000e7a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000e7c:	2260      	movs	r2, #96	; 0x60
1a000e7e:	2100      	movs	r1, #0
1a000e80:	4668      	mov	r0, sp
1a000e82:	f000 fd8b 	bl	1a00199c <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000e86:	2380      	movs	r3, #128	; 0x80
1a000e88:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000e8a:	6963      	ldr	r3, [r4, #20]
1a000e8c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000e8e:	7923      	ldrb	r3, [r4, #4]
1a000e90:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000e94:	4669      	mov	r1, sp
1a000e96:	4628      	mov	r0, r5
1a000e98:	f7ff ff9c 	bl	1a000dd4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000e9c:	9b06      	ldr	r3, [sp, #24]
1a000e9e:	429d      	cmp	r5, r3
1a000ea0:	d027      	beq.n	1a000ef2 <pll_get_frac+0x7e>
	if (val < 0)
1a000ea2:	1aeb      	subs	r3, r5, r3
1a000ea4:	d42e      	bmi.n	1a000f04 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000ea6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000ea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000eae:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000eb0:	6963      	ldr	r3, [r4, #20]
1a000eb2:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000eb4:	7923      	ldrb	r3, [r4, #4]
1a000eb6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000eba:	a910      	add	r1, sp, #64	; 0x40
1a000ebc:	4628      	mov	r0, r5
1a000ebe:	f7ff ff89 	bl	1a000dd4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000ec2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000ec4:	429d      	cmp	r5, r3
1a000ec6:	d01f      	beq.n	1a000f08 <pll_get_frac+0x94>
	if (val < 0)
1a000ec8:	1aeb      	subs	r3, r5, r3
1a000eca:	d425      	bmi.n	1a000f18 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000ecc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000ece:	4b2b      	ldr	r3, [pc, #172]	; (1a000f7c <pll_get_frac+0x108>)
1a000ed0:	429d      	cmp	r5, r3
1a000ed2:	d923      	bls.n	1a000f1c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000ed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000ed6:	1aed      	subs	r5, r5, r3
1a000ed8:	d433      	bmi.n	1a000f42 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000eda:	42ae      	cmp	r6, r5
1a000edc:	dc3b      	bgt.n	1a000f56 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000ede:	42be      	cmp	r6, r7
1a000ee0:	dc31      	bgt.n	1a000f46 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000ee2:	466d      	mov	r5, sp
1a000ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ee8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ef0:	e006      	b.n	1a000f00 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000ef2:	466d      	mov	r5, sp
1a000ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ef8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000f00:	b019      	add	sp, #100	; 0x64
1a000f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000f04:	425b      	negs	r3, r3
1a000f06:	e7ce      	b.n	1a000ea6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000f08:	ad10      	add	r5, sp, #64	; 0x40
1a000f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000f16:	e7f3      	b.n	1a000f00 <pll_get_frac+0x8c>
		return -val;
1a000f18:	425b      	negs	r3, r3
1a000f1a:	e7d7      	b.n	1a000ecc <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000f1c:	2340      	movs	r3, #64	; 0x40
1a000f1e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000f20:	6963      	ldr	r3, [r4, #20]
1a000f22:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000f24:	a908      	add	r1, sp, #32
1a000f26:	4628      	mov	r0, r5
1a000f28:	f7ff ff54 	bl	1a000dd4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000f2e:	429d      	cmp	r5, r3
1a000f30:	d1d0      	bne.n	1a000ed4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000f32:	ad08      	add	r5, sp, #32
1a000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000f40:	e7de      	b.n	1a000f00 <pll_get_frac+0x8c>
		return -val;
1a000f42:	426d      	negs	r5, r5
1a000f44:	e7c9      	b.n	1a000eda <pll_get_frac+0x66>
			*ppll = pll[2];
1a000f46:	ad10      	add	r5, sp, #64	; 0x40
1a000f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000f54:	e7d4      	b.n	1a000f00 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000f56:	42af      	cmp	r7, r5
1a000f58:	db07      	blt.n	1a000f6a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000f5a:	ad08      	add	r5, sp, #32
1a000f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000f68:	e7ca      	b.n	1a000f00 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000f6a:	ad10      	add	r5, sp, #64	; 0x40
1a000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000f78:	e7c2      	b.n	1a000f00 <pll_get_frac+0x8c>
1a000f7a:	bf00      	nop
1a000f7c:	068e7780 	.word	0x068e7780

1a000f80 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000f80:	b430      	push	{r4, r5}
1a000f82:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000f84:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000f86:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000f88:	e000      	b.n	1a000f8c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000f8a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000f8c:	281c      	cmp	r0, #28
1a000f8e:	d118      	bne.n	1a000fc2 <Chip_Clock_FindBaseClock+0x42>
1a000f90:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000f94:	0051      	lsls	r1, r2, #1
1a000f96:	4a0c      	ldr	r2, [pc, #48]	; (1a000fc8 <Chip_Clock_FindBaseClock+0x48>)
1a000f98:	440a      	add	r2, r1
1a000f9a:	7914      	ldrb	r4, [r2, #4]
1a000f9c:	42a0      	cmp	r0, r4
1a000f9e:	d010      	beq.n	1a000fc2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000fa0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000fa4:	004a      	lsls	r2, r1, #1
1a000fa6:	4908      	ldr	r1, [pc, #32]	; (1a000fc8 <Chip_Clock_FindBaseClock+0x48>)
1a000fa8:	5a8a      	ldrh	r2, [r1, r2]
1a000faa:	42aa      	cmp	r2, r5
1a000fac:	d8ed      	bhi.n	1a000f8a <Chip_Clock_FindBaseClock+0xa>
1a000fae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000fb2:	0051      	lsls	r1, r2, #1
1a000fb4:	4a04      	ldr	r2, [pc, #16]	; (1a000fc8 <Chip_Clock_FindBaseClock+0x48>)
1a000fb6:	440a      	add	r2, r1
1a000fb8:	8852      	ldrh	r2, [r2, #2]
1a000fba:	4295      	cmp	r5, r2
1a000fbc:	d8e5      	bhi.n	1a000f8a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000fbe:	4620      	mov	r0, r4
1a000fc0:	e7e4      	b.n	1a000f8c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000fc2:	bc30      	pop	{r4, r5}
1a000fc4:	4770      	bx	lr
1a000fc6:	bf00      	nop
1a000fc8:	1a001ca8 	.word	0x1a001ca8

1a000fcc <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000fcc:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000fd2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000fd4:	4a0d      	ldr	r2, [pc, #52]	; (1a00100c <Chip_Clock_EnableCrystal+0x40>)
1a000fd6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000fd8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000fdc:	6992      	ldr	r2, [r2, #24]
1a000fde:	4291      	cmp	r1, r2
1a000fe0:	d001      	beq.n	1a000fe6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000fe2:	4a0a      	ldr	r2, [pc, #40]	; (1a00100c <Chip_Clock_EnableCrystal+0x40>)
1a000fe4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000fe6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000fea:	4a09      	ldr	r2, [pc, #36]	; (1a001010 <Chip_Clock_EnableCrystal+0x44>)
1a000fec:	6811      	ldr	r1, [r2, #0]
1a000fee:	4a09      	ldr	r2, [pc, #36]	; (1a001014 <Chip_Clock_EnableCrystal+0x48>)
1a000ff0:	4291      	cmp	r1, r2
1a000ff2:	d901      	bls.n	1a000ff8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000ff4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000ff8:	4a04      	ldr	r2, [pc, #16]	; (1a00100c <Chip_Clock_EnableCrystal+0x40>)
1a000ffa:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000ffc:	9b01      	ldr	r3, [sp, #4]
1a000ffe:	1e5a      	subs	r2, r3, #1
1a001000:	9201      	str	r2, [sp, #4]
1a001002:	2b00      	cmp	r3, #0
1a001004:	d1fa      	bne.n	1a000ffc <Chip_Clock_EnableCrystal+0x30>
}
1a001006:	b002      	add	sp, #8
1a001008:	4770      	bx	lr
1a00100a:	bf00      	nop
1a00100c:	40050000 	.word	0x40050000
1a001010:	1a001c10 	.word	0x1a001c10
1a001014:	01312cff 	.word	0x01312cff

1a001018 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001018:	3012      	adds	r0, #18
1a00101a:	4b05      	ldr	r3, [pc, #20]	; (1a001030 <Chip_Clock_GetDividerSource+0x18>)
1a00101c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001020:	f010 0f01 	tst.w	r0, #1
1a001024:	d001      	beq.n	1a00102a <Chip_Clock_GetDividerSource+0x12>
		return CLKINPUT_PD;
1a001026:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001028:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00102a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00102e:	4770      	bx	lr
1a001030:	40050000 	.word	0x40050000

1a001034 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001034:	f100 0212 	add.w	r2, r0, #18
1a001038:	4b03      	ldr	r3, [pc, #12]	; (1a001048 <Chip_Clock_GetDividerDivisor+0x14>)
1a00103a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00103e:	4b03      	ldr	r3, [pc, #12]	; (1a00104c <Chip_Clock_GetDividerDivisor+0x18>)
1a001040:	5c18      	ldrb	r0, [r3, r0]
}
1a001042:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001046:	4770      	bx	lr
1a001048:	40050000 	.word	0x40050000
1a00104c:	1a001ca0 	.word	0x1a001ca0

1a001050 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001050:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001052:	2810      	cmp	r0, #16
1a001054:	d80a      	bhi.n	1a00106c <Chip_Clock_GetClockInputHz+0x1c>
1a001056:	e8df f000 	tbb	[pc, r0]
1a00105a:	0b44      	.short	0x0b44
1a00105c:	0921180d 	.word	0x0921180d
1a001060:	2d2a2724 	.word	0x2d2a2724
1a001064:	34300909 	.word	0x34300909
1a001068:	3c38      	.short	0x3c38
1a00106a:	40          	.byte	0x40
1a00106b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00106c:	2000      	movs	r0, #0
1a00106e:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001070:	481e      	ldr	r0, [pc, #120]	; (1a0010ec <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001072:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001074:	4b1e      	ldr	r3, [pc, #120]	; (1a0010f0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001076:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00107a:	f003 0307 	and.w	r3, r3, #7
1a00107e:	2b04      	cmp	r3, #4
1a001080:	d001      	beq.n	1a001086 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001082:	481c      	ldr	r0, [pc, #112]	; (1a0010f4 <Chip_Clock_GetClockInputHz+0xa4>)
1a001084:	bd08      	pop	{r3, pc}
	uint32_t rate = 0;
1a001086:	2000      	movs	r0, #0
1a001088:	bd08      	pop	{r3, pc}
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00108a:	4b19      	ldr	r3, [pc, #100]	; (1a0010f0 <Chip_Clock_GetClockInputHz+0xa0>)
1a00108c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001090:	f003 0307 	and.w	r3, r3, #7
1a001094:	2b04      	cmp	r3, #4
1a001096:	d027      	beq.n	1a0010e8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001098:	4816      	ldr	r0, [pc, #88]	; (1a0010f4 <Chip_Clock_GetClockInputHz+0xa4>)
1a00109a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a00109c:	4b16      	ldr	r3, [pc, #88]	; (1a0010f8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00109e:	6818      	ldr	r0, [r3, #0]
		break;
1a0010a0:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0010a2:	4b16      	ldr	r3, [pc, #88]	; (1a0010fc <Chip_Clock_GetClockInputHz+0xac>)
1a0010a4:	6818      	ldr	r0, [r3, #0]
		break;
1a0010a6:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0010a8:	4b15      	ldr	r3, [pc, #84]	; (1a001100 <Chip_Clock_GetClockInputHz+0xb0>)
1a0010aa:	6818      	ldr	r0, [r3, #0]
		break;
1a0010ac:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0010ae:	4b14      	ldr	r3, [pc, #80]	; (1a001100 <Chip_Clock_GetClockInputHz+0xb0>)
1a0010b0:	6858      	ldr	r0, [r3, #4]
		break;
1a0010b2:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0010b4:	f000 f868 	bl	1a001188 <Chip_Clock_GetMainPLLHz>
		break;
1a0010b8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0010ba:	2100      	movs	r1, #0
1a0010bc:	f000 f89a 	bl	1a0011f4 <Chip_Clock_GetDivRate>
		break;
1a0010c0:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0010c2:	2101      	movs	r1, #1
1a0010c4:	f000 f896 	bl	1a0011f4 <Chip_Clock_GetDivRate>
		break;
1a0010c8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0010ca:	2102      	movs	r1, #2
1a0010cc:	f000 f892 	bl	1a0011f4 <Chip_Clock_GetDivRate>
		break;
1a0010d0:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0010d2:	2103      	movs	r1, #3
1a0010d4:	f000 f88e 	bl	1a0011f4 <Chip_Clock_GetDivRate>
		break;
1a0010d8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0010da:	2104      	movs	r1, #4
1a0010dc:	f000 f88a 	bl	1a0011f4 <Chip_Clock_GetDivRate>
		break;
1a0010e0:	bd08      	pop	{r3, pc}
		rate = CRYSTAL_32K_FREQ_IN;
1a0010e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a0010e6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a0010e8:	4806      	ldr	r0, [pc, #24]	; (1a001104 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a0010ea:	bd08      	pop	{r3, pc}
1a0010ec:	00b71b00 	.word	0x00b71b00
1a0010f0:	40043000 	.word	0x40043000
1a0010f4:	017d7840 	.word	0x017d7840
1a0010f8:	1a001be4 	.word	0x1a001be4
1a0010fc:	1a001c10 	.word	0x1a001c10
1a001100:	10000040 	.word	0x10000040
1a001104:	02faf080 	.word	0x02faf080

1a001108 <Chip_Clock_CalcMainPLLValue>:
{
1a001108:	b538      	push	{r3, r4, r5, lr}
1a00110a:	4605      	mov	r5, r0
1a00110c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00110e:	7908      	ldrb	r0, [r1, #4]
1a001110:	f7ff ff9e 	bl	1a001050 <Chip_Clock_GetClockInputHz>
1a001114:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001116:	4b19      	ldr	r3, [pc, #100]	; (1a00117c <Chip_Clock_CalcMainPLLValue+0x74>)
1a001118:	442b      	add	r3, r5
1a00111a:	4a19      	ldr	r2, [pc, #100]	; (1a001180 <Chip_Clock_CalcMainPLLValue+0x78>)
1a00111c:	4293      	cmp	r3, r2
1a00111e:	d821      	bhi.n	1a001164 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001120:	b318      	cbz	r0, 1a00116a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001122:	2380      	movs	r3, #128	; 0x80
1a001124:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001126:	2300      	movs	r3, #0
1a001128:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00112a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00112c:	fbb5 f3f0 	udiv	r3, r5, r0
1a001130:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001132:	4a14      	ldr	r2, [pc, #80]	; (1a001184 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001134:	4295      	cmp	r5, r2
1a001136:	d903      	bls.n	1a001140 <Chip_Clock_CalcMainPLLValue+0x38>
1a001138:	fb03 f000 	mul.w	r0, r3, r0
1a00113c:	4285      	cmp	r5, r0
1a00113e:	d007      	beq.n	1a001150 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001140:	4621      	mov	r1, r4
1a001142:	4628      	mov	r0, r5
1a001144:	f7ff fe96 	bl	1a000e74 <pll_get_frac>
		if (!ppll->nsel) {
1a001148:	68a3      	ldr	r3, [r4, #8]
1a00114a:	b18b      	cbz	r3, 1a001170 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a00114c:	3b01      	subs	r3, #1
1a00114e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001150:	6923      	ldr	r3, [r4, #16]
1a001152:	b183      	cbz	r3, 1a001176 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001154:	68e2      	ldr	r2, [r4, #12]
1a001156:	b10a      	cbz	r2, 1a00115c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001158:	3a01      	subs	r2, #1
1a00115a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00115c:	3b01      	subs	r3, #1
1a00115e:	6123      	str	r3, [r4, #16]
	return 0;
1a001160:	2000      	movs	r0, #0
1a001162:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001168:	bd38      	pop	{r3, r4, r5, pc}
1a00116a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00116e:	bd38      	pop	{r3, r4, r5, pc}
			return -1;
1a001170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001174:	bd38      	pop	{r3, r4, r5, pc}
		return - 1;
1a001176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00117a:	bd38      	pop	{r3, r4, r5, pc}
1a00117c:	ff6b3a10 	.word	0xff6b3a10
1a001180:	0b940510 	.word	0x0b940510
1a001184:	094c5eff 	.word	0x094c5eff

1a001188 <Chip_Clock_GetMainPLLHz>:
{
1a001188:	b530      	push	{r4, r5, lr}
1a00118a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00118c:	4d17      	ldr	r5, [pc, #92]	; (1a0011ec <Chip_Clock_GetMainPLLHz+0x64>)
1a00118e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001190:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001194:	f7ff ff5c 	bl	1a001050 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001198:	4b15      	ldr	r3, [pc, #84]	; (1a0011f0 <Chip_Clock_GetMainPLLHz+0x68>)
1a00119a:	681b      	ldr	r3, [r3, #0]
1a00119c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00119e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0011a0:	f013 0f01 	tst.w	r3, #1
1a0011a4:	d01f      	beq.n	1a0011e6 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a0011a6:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0011aa:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0011ae:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0011b2:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0011b6:	3201      	adds	r2, #1
	n = nsel + 1;
1a0011b8:	3301      	adds	r3, #1
	p = ptab[psel];
1a0011ba:	f10d 0e08 	add.w	lr, sp, #8
1a0011be:	4471      	add	r1, lr
1a0011c0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0011c4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0011c8:	d108      	bne.n	1a0011dc <Chip_Clock_GetMainPLLHz+0x54>
1a0011ca:	b93d      	cbnz	r5, 1a0011dc <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0011cc:	0049      	lsls	r1, r1, #1
1a0011ce:	fbb2 f2f1 	udiv	r2, r2, r1
1a0011d2:	fbb0 f0f3 	udiv	r0, r0, r3
1a0011d6:	fb00 f002 	mul.w	r0, r0, r2
1a0011da:	e005      	b.n	1a0011e8 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a0011dc:	fbb0 f0f3 	udiv	r0, r0, r3
1a0011e0:	fb00 f002 	mul.w	r0, r0, r2
1a0011e4:	e000      	b.n	1a0011e8 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a0011e6:	2000      	movs	r0, #0
}
1a0011e8:	b003      	add	sp, #12
1a0011ea:	bd30      	pop	{r4, r5, pc}
1a0011ec:	40050000 	.word	0x40050000
1a0011f0:	1a001c9c 	.word	0x1a001c9c

1a0011f4 <Chip_Clock_GetDivRate>:
{
1a0011f4:	b538      	push	{r3, r4, r5, lr}
1a0011f6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0011f8:	4608      	mov	r0, r1
1a0011fa:	f7ff ff0d 	bl	1a001018 <Chip_Clock_GetDividerSource>
1a0011fe:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001200:	4620      	mov	r0, r4
1a001202:	f7ff ff17 	bl	1a001034 <Chip_Clock_GetDividerDivisor>
1a001206:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001208:	4628      	mov	r0, r5
1a00120a:	f7ff ff21 	bl	1a001050 <Chip_Clock_GetClockInputHz>
1a00120e:	3401      	adds	r4, #1
}
1a001210:	fbb0 f0f4 	udiv	r0, r0, r4
1a001214:	bd38      	pop	{r3, r4, r5, pc}
1a001216:	Address 0x000000001a001216 is out of bounds.


1a001218 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001218:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00121a:	f100 0416 	add.w	r4, r0, #22
1a00121e:	00a4      	lsls	r4, r4, #2
1a001220:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001224:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001228:	6865      	ldr	r5, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00122a:	281b      	cmp	r0, #27
1a00122c:	d813      	bhi.n	1a001256 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00122e:	2911      	cmp	r1, #17
1a001230:	d01a      	beq.n	1a001268 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001232:	4c0e      	ldr	r4, [pc, #56]	; (1a00126c <Chip_Clock_SetBaseClock+0x54>)
1a001234:	402c      	ands	r4, r5

			if (autoblocken) {
1a001236:	b10a      	cbz	r2, 1a00123c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001238:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a00123c:	b10b      	cbz	r3, 1a001242 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00123e:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001242:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001246:	3016      	adds	r0, #22
1a001248:	0080      	lsls	r0, r0, #2
1a00124a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00124e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001252:	6044      	str	r4, [r0, #4]
1a001254:	e008      	b.n	1a001268 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001256:	f045 0501 	orr.w	r5, r5, #1
1a00125a:	3016      	adds	r0, #22
1a00125c:	0080      	lsls	r0, r0, #2
1a00125e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001262:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001266:	6045      	str	r5, [r0, #4]
	}
}
1a001268:	bc30      	pop	{r4, r5}
1a00126a:	4770      	bx	lr
1a00126c:	e0fff7fe 	.word	0xe0fff7fe

1a001270 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001270:	281b      	cmp	r0, #27
1a001272:	d901      	bls.n	1a001278 <Chip_Clock_GetBaseClock+0x8>
		return CLKINPUT_PD;
1a001274:	2011      	movs	r0, #17
1a001276:	4770      	bx	lr
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001278:	3016      	adds	r0, #22
1a00127a:	0080      	lsls	r0, r0, #2
1a00127c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001280:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001284:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001286:	f010 0f01 	tst.w	r0, #1
1a00128a:	d001      	beq.n	1a001290 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
1a00128c:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a00128e:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001290:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001294:	4770      	bx	lr

1a001296 <Chip_Clock_GetBaseClocktHz>:
{
1a001296:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001298:	f7ff ffea 	bl	1a001270 <Chip_Clock_GetBaseClock>
1a00129c:	f7ff fed8 	bl	1a001050 <Chip_Clock_GetClockInputHz>
}
1a0012a0:	bd08      	pop	{r3, pc}
1a0012a2:	Address 0x000000001a0012a2 is out of bounds.


1a0012a4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0012a4:	b969      	cbnz	r1, 1a0012c2 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a0012a6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0012a8:	b10a      	cbz	r2, 1a0012ae <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0012aa:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0012ae:	2b02      	cmp	r3, #2
1a0012b0:	d009      	beq.n	1a0012c6 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0012b2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0012b6:	d209      	bcs.n	1a0012cc <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0012b8:	3020      	adds	r0, #32
1a0012ba:	4b07      	ldr	r3, [pc, #28]	; (1a0012d8 <Chip_Clock_EnableOpts+0x34>)
1a0012bc:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0012c0:	4770      	bx	lr
		reg |= (1 << 1);
1a0012c2:	2103      	movs	r1, #3
1a0012c4:	e7f0      	b.n	1a0012a8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0012c6:	f041 0120 	orr.w	r1, r1, #32
1a0012ca:	e7f2      	b.n	1a0012b2 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0012cc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0012d0:	4b02      	ldr	r3, [pc, #8]	; (1a0012dc <Chip_Clock_EnableOpts+0x38>)
1a0012d2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0012d6:	4770      	bx	lr
1a0012d8:	40051000 	.word	0x40051000
1a0012dc:	40052000 	.word	0x40052000

1a0012e0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0012e0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0012e4:	d208      	bcs.n	1a0012f8 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0012e6:	4a09      	ldr	r2, [pc, #36]	; (1a00130c <Chip_Clock_Enable+0x2c>)
1a0012e8:	3020      	adds	r0, #32
1a0012ea:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0012ee:	f043 0301 	orr.w	r3, r3, #1
1a0012f2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0012f6:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0012f8:	4a05      	ldr	r2, [pc, #20]	; (1a001310 <Chip_Clock_Enable+0x30>)
1a0012fa:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0012fe:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001302:	f043 0301 	orr.w	r3, r3, #1
1a001306:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00130a:	4770      	bx	lr
1a00130c:	40051000 	.word	0x40051000
1a001310:	40052000 	.word	0x40052000

1a001314 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001314:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001316:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00131a:	d309      	bcc.n	1a001330 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00131c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001320:	4a0d      	ldr	r2, [pc, #52]	; (1a001358 <Chip_Clock_GetRate+0x44>)
1a001322:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001326:	f014 0f01 	tst.w	r4, #1
1a00132a:	d107      	bne.n	1a00133c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00132c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00132e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001330:	f100 0320 	add.w	r3, r0, #32
1a001334:	4a09      	ldr	r2, [pc, #36]	; (1a00135c <Chip_Clock_GetRate+0x48>)
1a001336:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00133a:	e7f4      	b.n	1a001326 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00133c:	f7ff fe20 	bl	1a000f80 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001340:	f7ff ffa9 	bl	1a001296 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001344:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001348:	d103      	bne.n	1a001352 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00134a:	2301      	movs	r3, #1
		rate = rate / div;
1a00134c:	fbb0 f0f3 	udiv	r0, r0, r3
1a001350:	bd10      	pop	{r4, pc}
			div = 2;/* No other dividers supported */
1a001352:	2302      	movs	r3, #2
1a001354:	e7fa      	b.n	1a00134c <Chip_Clock_GetRate+0x38>
1a001356:	bf00      	nop
1a001358:	40052000 	.word	0x40052000
1a00135c:	40051000 	.word	0x40051000

1a001360 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001360:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001362:	2069      	movs	r0, #105	; 0x69
1a001364:	f7ff ffd6 	bl	1a001314 <Chip_Clock_GetRate>
1a001368:	4b01      	ldr	r3, [pc, #4]	; (1a001370 <SystemCoreClockUpdate+0x10>)
1a00136a:	6018      	str	r0, [r3, #0]
1a00136c:	bd08      	pop	{r3, pc}
1a00136e:	bf00      	nop
1a001370:	10000048 	.word	0x10000048

1a001374 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001374:	b570      	push	{r4, r5, r6, lr}
1a001376:	b08a      	sub	sp, #40	; 0x28
1a001378:	4605      	mov	r5, r0
1a00137a:	460e      	mov	r6, r1
1a00137c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00137e:	f242 7310 	movw	r3, #10000	; 0x2710
1a001382:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001384:	2806      	cmp	r0, #6
1a001386:	d018      	beq.n	1a0013ba <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001388:	2300      	movs	r3, #0
1a00138a:	2201      	movs	r2, #1
1a00138c:	4629      	mov	r1, r5
1a00138e:	2004      	movs	r0, #4
1a001390:	f7ff ff42 	bl	1a001218 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001394:	4a49      	ldr	r2, [pc, #292]	; (1a0014bc <Chip_SetupCoreClock+0x148>)
1a001396:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001398:	f043 0301 	orr.w	r3, r3, #1
1a00139c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00139e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0013a2:	a901      	add	r1, sp, #4
1a0013a4:	4630      	mov	r0, r6
1a0013a6:	f7ff feaf 	bl	1a001108 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0013aa:	4b45      	ldr	r3, [pc, #276]	; (1a0014c0 <Chip_SetupCoreClock+0x14c>)
1a0013ac:	429e      	cmp	r6, r3
1a0013ae:	d916      	bls.n	1a0013de <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0013b0:	9b01      	ldr	r3, [sp, #4]
1a0013b2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0013b6:	d003      	beq.n	1a0013c0 <Chip_SetupCoreClock+0x4c>
1a0013b8:	e7fe      	b.n	1a0013b8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0013ba:	f7ff fe07 	bl	1a000fcc <Chip_Clock_EnableCrystal>
1a0013be:	e7e3      	b.n	1a001388 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0013c0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0013c4:	d005      	beq.n	1a0013d2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0013c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0013ca:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0013cc:	2500      	movs	r5, #0
			direct = 1;
1a0013ce:	2601      	movs	r6, #1
1a0013d0:	e007      	b.n	1a0013e2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0013d2:	9b04      	ldr	r3, [sp, #16]
1a0013d4:	3301      	adds	r3, #1
1a0013d6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0013d8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0013da:	2600      	movs	r6, #0
1a0013dc:	e001      	b.n	1a0013e2 <Chip_SetupCoreClock+0x6e>
1a0013de:	2500      	movs	r5, #0
1a0013e0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0013e2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0013e6:	9b01      	ldr	r3, [sp, #4]
1a0013e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0013ec:	9a05      	ldr	r2, [sp, #20]
1a0013ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0013f2:	9a03      	ldr	r2, [sp, #12]
1a0013f4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0013f8:	9a04      	ldr	r2, [sp, #16]
1a0013fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0013fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001402:	4a2e      	ldr	r2, [pc, #184]	; (1a0014bc <Chip_SetupCoreClock+0x148>)
1a001404:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001406:	4b2d      	ldr	r3, [pc, #180]	; (1a0014bc <Chip_SetupCoreClock+0x148>)
1a001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00140a:	f013 0f01 	tst.w	r3, #1
1a00140e:	d0fa      	beq.n	1a001406 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001410:	2300      	movs	r3, #0
1a001412:	2201      	movs	r2, #1
1a001414:	2109      	movs	r1, #9
1a001416:	2004      	movs	r0, #4
1a001418:	f7ff fefe 	bl	1a001218 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00141c:	b1fe      	cbz	r6, 1a00145e <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00141e:	f242 7310 	movw	r3, #10000	; 0x2710
1a001422:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001424:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001426:	1e5a      	subs	r2, r3, #1
1a001428:	9209      	str	r2, [sp, #36]	; 0x24
1a00142a:	2b00      	cmp	r3, #0
1a00142c:	d1fa      	bne.n	1a001424 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00142e:	9b01      	ldr	r3, [sp, #4]
1a001430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001434:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001436:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00143a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00143e:	9a05      	ldr	r2, [sp, #20]
1a001440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001444:	9a03      	ldr	r2, [sp, #12]
1a001446:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00144a:	9a04      	ldr	r2, [sp, #16]
1a00144c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001450:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001454:	4a19      	ldr	r2, [pc, #100]	; (1a0014bc <Chip_SetupCoreClock+0x148>)
1a001456:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001458:	b36c      	cbz	r4, 1a0014b6 <Chip_SetupCoreClock+0x142>
1a00145a:	2400      	movs	r4, #0
1a00145c:	e029      	b.n	1a0014b2 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00145e:	2d00      	cmp	r5, #0
1a001460:	d0fa      	beq.n	1a001458 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001462:	f242 7310 	movw	r3, #10000	; 0x2710
1a001466:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001468:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00146a:	1e5a      	subs	r2, r3, #1
1a00146c:	9209      	str	r2, [sp, #36]	; 0x24
1a00146e:	2b00      	cmp	r3, #0
1a001470:	d1fa      	bne.n	1a001468 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a001472:	9b04      	ldr	r3, [sp, #16]
1a001474:	1e5a      	subs	r2, r3, #1
1a001476:	9204      	str	r2, [sp, #16]
1a001478:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00147c:	9b01      	ldr	r3, [sp, #4]
1a00147e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001482:	9905      	ldr	r1, [sp, #20]
1a001484:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001488:	9903      	ldr	r1, [sp, #12]
1a00148a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00148e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001492:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001496:	4a09      	ldr	r2, [pc, #36]	; (1a0014bc <Chip_SetupCoreClock+0x148>)
1a001498:	6453      	str	r3, [r2, #68]	; 0x44
1a00149a:	e7dd      	b.n	1a001458 <Chip_SetupCoreClock+0xe4>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00149c:	4809      	ldr	r0, [pc, #36]	; (1a0014c4 <Chip_SetupCoreClock+0x150>)
1a00149e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0014a2:	78cb      	ldrb	r3, [r1, #3]
1a0014a4:	788a      	ldrb	r2, [r1, #2]
1a0014a6:	7849      	ldrb	r1, [r1, #1]
1a0014a8:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0014ac:	f7ff feb4 	bl	1a001218 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0014b0:	3401      	adds	r4, #1
1a0014b2:	2c11      	cmp	r4, #17
1a0014b4:	d9f2      	bls.n	1a00149c <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0014b6:	b00a      	add	sp, #40	; 0x28
1a0014b8:	bd70      	pop	{r4, r5, r6, pc}
1a0014ba:	bf00      	nop
1a0014bc:	40050000 	.word	0x40050000
1a0014c0:	068e7780 	.word	0x068e7780
1a0014c4:	1a001d14 	.word	0x1a001d14

1a0014c8 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0014c8:	4770      	bx	lr
1a0014ca:	Address 0x000000001a0014ca is out of bounds.


1a0014cc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0014cc:	4b03      	ldr	r3, [pc, #12]	; (1a0014dc <Chip_SSP_GetClockIndex+0x10>)
1a0014ce:	4298      	cmp	r0, r3
1a0014d0:	d001      	beq.n	1a0014d6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0014d2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0014d4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0014d6:	20a5      	movs	r0, #165	; 0xa5
1a0014d8:	4770      	bx	lr
1a0014da:	bf00      	nop
1a0014dc:	400c5000 	.word	0x400c5000

1a0014e0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0014e0:	4b04      	ldr	r3, [pc, #16]	; (1a0014f4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0014e2:	4298      	cmp	r0, r3
1a0014e4:	d002      	beq.n	1a0014ec <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0014e6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0014ea:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0014ec:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0014f0:	4770      	bx	lr
1a0014f2:	bf00      	nop
1a0014f4:	400c5000 	.word	0x400c5000

1a0014f8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0014f8:	6803      	ldr	r3, [r0, #0]
1a0014fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0014fe:	0209      	lsls	r1, r1, #8
1a001500:	b289      	uxth	r1, r1
1a001502:	430b      	orrs	r3, r1
1a001504:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a001506:	6102      	str	r2, [r0, #16]
1a001508:	4770      	bx	lr

1a00150a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00150a:	b570      	push	{r4, r5, r6, lr}
1a00150c:	4606      	mov	r6, r0
1a00150e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001510:	f7ff ffe6 	bl	1a0014e0 <Chip_SSP_GetPeriphClockIndex>
1a001514:	f7ff fefe 	bl	1a001314 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001518:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00151a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00151e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001520:	e000      	b.n	1a001524 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001522:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001524:	42ab      	cmp	r3, r5
1a001526:	d90b      	bls.n	1a001540 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001528:	1c4c      	adds	r4, r1, #1
1a00152a:	fb04 f302 	mul.w	r3, r4, r2
1a00152e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001532:	429d      	cmp	r5, r3
1a001534:	d2f6      	bcs.n	1a001524 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001536:	2cff      	cmp	r4, #255	; 0xff
1a001538:	d9f3      	bls.n	1a001522 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00153a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00153c:	2100      	movs	r1, #0
1a00153e:	e7f1      	b.n	1a001524 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001540:	4630      	mov	r0, r6
1a001542:	f7ff ffd9 	bl	1a0014f8 <Chip_SSP_SetClockRate>
1a001546:	bd70      	pop	{r4, r5, r6, pc}

1a001548 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001548:	b510      	push	{r4, lr}
1a00154a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00154c:	f7ff ffbe 	bl	1a0014cc <Chip_SSP_GetClockIndex>
1a001550:	f7ff fec6 	bl	1a0012e0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001554:	4620      	mov	r0, r4
1a001556:	f7ff ffc3 	bl	1a0014e0 <Chip_SSP_GetPeriphClockIndex>
1a00155a:	f7ff fec1 	bl	1a0012e0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00155e:	6863      	ldr	r3, [r4, #4]
1a001560:	f023 0304 	bic.w	r3, r3, #4
1a001564:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001566:	6823      	ldr	r3, [r4, #0]
1a001568:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00156c:	f043 0307 	orr.w	r3, r3, #7
1a001570:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001572:	4902      	ldr	r1, [pc, #8]	; (1a00157c <Chip_SSP_Init+0x34>)
1a001574:	4620      	mov	r0, r4
1a001576:	f7ff ffc8 	bl	1a00150a <Chip_SSP_SetBitRate>
1a00157a:	bd10      	pop	{r4, pc}
1a00157c:	000186a0 	.word	0x000186a0

1a001580 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001580:	2901      	cmp	r1, #1
1a001582:	d000      	beq.n	1a001586 <Chip_I2C_EventHandler+0x6>
1a001584:	4770      	bx	lr
		return;
	}

	stat = &iic->mXfer->status;
1a001586:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00158a:	0082      	lsls	r2, r0, #2
1a00158c:	4b03      	ldr	r3, [pc, #12]	; (1a00159c <Chip_I2C_EventHandler+0x1c>)
1a00158e:	4413      	add	r3, r2
1a001590:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001592:	7d13      	ldrb	r3, [r2, #20]
1a001594:	b2db      	uxtb	r3, r3
1a001596:	2b04      	cmp	r3, #4
1a001598:	d0fb      	beq.n	1a001592 <Chip_I2C_EventHandler+0x12>
1a00159a:	e7f3      	b.n	1a001584 <Chip_I2C_EventHandler+0x4>
1a00159c:	10000000 	.word	0x10000000

1a0015a0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0015a0:	b570      	push	{r4, r5, r6, lr}
1a0015a2:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0015a4:	4e06      	ldr	r6, [pc, #24]	; (1a0015c0 <Chip_I2C_Init+0x20>)
1a0015a6:	00c4      	lsls	r4, r0, #3
1a0015a8:	1a22      	subs	r2, r4, r0
1a0015aa:	0093      	lsls	r3, r2, #2
1a0015ac:	4433      	add	r3, r6
1a0015ae:	8898      	ldrh	r0, [r3, #4]
1a0015b0:	f7ff fe96 	bl	1a0012e0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0015b4:	1b64      	subs	r4, r4, r5
1a0015b6:	00a3      	lsls	r3, r4, #2
1a0015b8:	58f3      	ldr	r3, [r6, r3]
1a0015ba:	226c      	movs	r2, #108	; 0x6c
1a0015bc:	619a      	str	r2, [r3, #24]
1a0015be:	bd70      	pop	{r4, r5, r6, pc}
1a0015c0:	10000000 	.word	0x10000000

1a0015c4 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0015c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0015c8:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0015ca:	4e0b      	ldr	r6, [pc, #44]	; (1a0015f8 <Chip_I2C_SetClockRate+0x34>)
1a0015cc:	00c5      	lsls	r5, r0, #3
1a0015ce:	1a2b      	subs	r3, r5, r0
1a0015d0:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0015d4:	eb06 0308 	add.w	r3, r6, r8
1a0015d8:	8898      	ldrh	r0, [r3, #4]
1a0015da:	f7ff fe9b 	bl	1a001314 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0015de:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0015e2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0015e6:	0842      	lsrs	r2, r0, #1
1a0015e8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0015ea:	f856 3008 	ldr.w	r3, [r6, r8]
1a0015ee:	691a      	ldr	r2, [r3, #16]
1a0015f0:	1a80      	subs	r0, r0, r2
1a0015f2:	6158      	str	r0, [r3, #20]
1a0015f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0015f8:	10000000 	.word	0x10000000

1a0015fc <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0015fc:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0015fe:	4b0d      	ldr	r3, [pc, #52]	; (1a001634 <SystemInit+0x38>)
1a001600:	4a0d      	ldr	r2, [pc, #52]	; (1a001638 <SystemInit+0x3c>)
1a001602:	609a      	str	r2, [r3, #8]
  mvfr0 = FPU->MVFR0;
1a001604:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001608:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00160a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00160e:	2b20      	cmp	r3, #32
1a001610:	d00d      	beq.n	1a00162e <SystemInit+0x32>
    return 0U;           /* No FPU */
1a001612:	2300      	movs	r3, #0

   if (SCB_GetFPUType() > 0)
1a001614:	b133      	cbz	r3, 1a001624 <SystemInit+0x28>
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001616:	4a07      	ldr	r2, [pc, #28]	; (1a001634 <SystemInit+0x38>)
1a001618:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Board specific SystemInit */
   Board_SystemInit();
1a001624:	f7ff fab8 	bl	1a000b98 <Board_SystemInit>
   Board_Init();
1a001628:	f7ff fa4a 	bl	1a000ac0 <Board_Init>
1a00162c:	bd08      	pop	{r3, pc}
    return 1U;           /* Single precision FPU */
1a00162e:	2301      	movs	r3, #1
1a001630:	e7f0      	b.n	1a001614 <SystemInit+0x18>
1a001632:	bf00      	nop
1a001634:	e000ed00 	.word	0xe000ed00
1a001638:	1a000000 	.word	0x1a000000

1a00163c <__aeabi_uldivmod>:
1a00163c:	b953      	cbnz	r3, 1a001654 <__aeabi_uldivmod+0x18>
1a00163e:	b94a      	cbnz	r2, 1a001654 <__aeabi_uldivmod+0x18>
1a001640:	2900      	cmp	r1, #0
1a001642:	bf08      	it	eq
1a001644:	2800      	cmpeq	r0, #0
1a001646:	bf1c      	itt	ne
1a001648:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00164c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001650:	f000 b97a 	b.w	1a001948 <__aeabi_idiv0>
1a001654:	f1ad 0c08 	sub.w	ip, sp, #8
1a001658:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00165c:	f000 f806 	bl	1a00166c <__udivmoddi4>
1a001660:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001668:	b004      	add	sp, #16
1a00166a:	4770      	bx	lr

1a00166c <__udivmoddi4>:
1a00166c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001670:	468c      	mov	ip, r1
1a001672:	460d      	mov	r5, r1
1a001674:	4604      	mov	r4, r0
1a001676:	9e08      	ldr	r6, [sp, #32]
1a001678:	2b00      	cmp	r3, #0
1a00167a:	d151      	bne.n	1a001720 <__udivmoddi4+0xb4>
1a00167c:	428a      	cmp	r2, r1
1a00167e:	4617      	mov	r7, r2
1a001680:	d96d      	bls.n	1a00175e <__udivmoddi4+0xf2>
1a001682:	fab2 fe82 	clz	lr, r2
1a001686:	f1be 0f00 	cmp.w	lr, #0
1a00168a:	d00b      	beq.n	1a0016a4 <__udivmoddi4+0x38>
1a00168c:	f1ce 0c20 	rsb	ip, lr, #32
1a001690:	fa01 f50e 	lsl.w	r5, r1, lr
1a001694:	fa20 fc0c 	lsr.w	ip, r0, ip
1a001698:	fa02 f70e 	lsl.w	r7, r2, lr
1a00169c:	ea4c 0c05 	orr.w	ip, ip, r5
1a0016a0:	fa00 f40e 	lsl.w	r4, r0, lr
1a0016a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a0016a8:	0c25      	lsrs	r5, r4, #16
1a0016aa:	fbbc f8fa 	udiv	r8, ip, sl
1a0016ae:	fa1f f987 	uxth.w	r9, r7
1a0016b2:	fb0a cc18 	mls	ip, sl, r8, ip
1a0016b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a0016ba:	fb08 f309 	mul.w	r3, r8, r9
1a0016be:	42ab      	cmp	r3, r5
1a0016c0:	d90a      	bls.n	1a0016d8 <__udivmoddi4+0x6c>
1a0016c2:	19ed      	adds	r5, r5, r7
1a0016c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a0016c8:	f080 8123 	bcs.w	1a001912 <__udivmoddi4+0x2a6>
1a0016cc:	42ab      	cmp	r3, r5
1a0016ce:	f240 8120 	bls.w	1a001912 <__udivmoddi4+0x2a6>
1a0016d2:	f1a8 0802 	sub.w	r8, r8, #2
1a0016d6:	443d      	add	r5, r7
1a0016d8:	1aed      	subs	r5, r5, r3
1a0016da:	b2a4      	uxth	r4, r4
1a0016dc:	fbb5 f0fa 	udiv	r0, r5, sl
1a0016e0:	fb0a 5510 	mls	r5, sl, r0, r5
1a0016e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a0016e8:	fb00 f909 	mul.w	r9, r0, r9
1a0016ec:	45a1      	cmp	r9, r4
1a0016ee:	d909      	bls.n	1a001704 <__udivmoddi4+0x98>
1a0016f0:	19e4      	adds	r4, r4, r7
1a0016f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0016f6:	f080 810a 	bcs.w	1a00190e <__udivmoddi4+0x2a2>
1a0016fa:	45a1      	cmp	r9, r4
1a0016fc:	f240 8107 	bls.w	1a00190e <__udivmoddi4+0x2a2>
1a001700:	3802      	subs	r0, #2
1a001702:	443c      	add	r4, r7
1a001704:	eba4 0409 	sub.w	r4, r4, r9
1a001708:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a00170c:	2100      	movs	r1, #0
1a00170e:	2e00      	cmp	r6, #0
1a001710:	d061      	beq.n	1a0017d6 <__udivmoddi4+0x16a>
1a001712:	fa24 f40e 	lsr.w	r4, r4, lr
1a001716:	2300      	movs	r3, #0
1a001718:	6034      	str	r4, [r6, #0]
1a00171a:	6073      	str	r3, [r6, #4]
1a00171c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001720:	428b      	cmp	r3, r1
1a001722:	d907      	bls.n	1a001734 <__udivmoddi4+0xc8>
1a001724:	2e00      	cmp	r6, #0
1a001726:	d054      	beq.n	1a0017d2 <__udivmoddi4+0x166>
1a001728:	2100      	movs	r1, #0
1a00172a:	e886 0021 	stmia.w	r6, {r0, r5}
1a00172e:	4608      	mov	r0, r1
1a001730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001734:	fab3 f183 	clz	r1, r3
1a001738:	2900      	cmp	r1, #0
1a00173a:	f040 808e 	bne.w	1a00185a <__udivmoddi4+0x1ee>
1a00173e:	42ab      	cmp	r3, r5
1a001740:	d302      	bcc.n	1a001748 <__udivmoddi4+0xdc>
1a001742:	4282      	cmp	r2, r0
1a001744:	f200 80fa 	bhi.w	1a00193c <__udivmoddi4+0x2d0>
1a001748:	1a84      	subs	r4, r0, r2
1a00174a:	eb65 0503 	sbc.w	r5, r5, r3
1a00174e:	2001      	movs	r0, #1
1a001750:	46ac      	mov	ip, r5
1a001752:	2e00      	cmp	r6, #0
1a001754:	d03f      	beq.n	1a0017d6 <__udivmoddi4+0x16a>
1a001756:	e886 1010 	stmia.w	r6, {r4, ip}
1a00175a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00175e:	b912      	cbnz	r2, 1a001766 <__udivmoddi4+0xfa>
1a001760:	2701      	movs	r7, #1
1a001762:	fbb7 f7f2 	udiv	r7, r7, r2
1a001766:	fab7 fe87 	clz	lr, r7
1a00176a:	f1be 0f00 	cmp.w	lr, #0
1a00176e:	d134      	bne.n	1a0017da <__udivmoddi4+0x16e>
1a001770:	1beb      	subs	r3, r5, r7
1a001772:	0c3a      	lsrs	r2, r7, #16
1a001774:	fa1f fc87 	uxth.w	ip, r7
1a001778:	2101      	movs	r1, #1
1a00177a:	fbb3 f8f2 	udiv	r8, r3, r2
1a00177e:	0c25      	lsrs	r5, r4, #16
1a001780:	fb02 3318 	mls	r3, r2, r8, r3
1a001784:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a001788:	fb0c f308 	mul.w	r3, ip, r8
1a00178c:	42ab      	cmp	r3, r5
1a00178e:	d907      	bls.n	1a0017a0 <__udivmoddi4+0x134>
1a001790:	19ed      	adds	r5, r5, r7
1a001792:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a001796:	d202      	bcs.n	1a00179e <__udivmoddi4+0x132>
1a001798:	42ab      	cmp	r3, r5
1a00179a:	f200 80d1 	bhi.w	1a001940 <__udivmoddi4+0x2d4>
1a00179e:	4680      	mov	r8, r0
1a0017a0:	1aed      	subs	r5, r5, r3
1a0017a2:	b2a3      	uxth	r3, r4
1a0017a4:	fbb5 f0f2 	udiv	r0, r5, r2
1a0017a8:	fb02 5510 	mls	r5, r2, r0, r5
1a0017ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a0017b0:	fb0c fc00 	mul.w	ip, ip, r0
1a0017b4:	45a4      	cmp	ip, r4
1a0017b6:	d907      	bls.n	1a0017c8 <__udivmoddi4+0x15c>
1a0017b8:	19e4      	adds	r4, r4, r7
1a0017ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0017be:	d202      	bcs.n	1a0017c6 <__udivmoddi4+0x15a>
1a0017c0:	45a4      	cmp	ip, r4
1a0017c2:	f200 80b8 	bhi.w	1a001936 <__udivmoddi4+0x2ca>
1a0017c6:	4618      	mov	r0, r3
1a0017c8:	eba4 040c 	sub.w	r4, r4, ip
1a0017cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a0017d0:	e79d      	b.n	1a00170e <__udivmoddi4+0xa2>
1a0017d2:	4631      	mov	r1, r6
1a0017d4:	4630      	mov	r0, r6
1a0017d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0017da:	f1ce 0420 	rsb	r4, lr, #32
1a0017de:	fa05 f30e 	lsl.w	r3, r5, lr
1a0017e2:	fa07 f70e 	lsl.w	r7, r7, lr
1a0017e6:	fa20 f804 	lsr.w	r8, r0, r4
1a0017ea:	0c3a      	lsrs	r2, r7, #16
1a0017ec:	fa25 f404 	lsr.w	r4, r5, r4
1a0017f0:	ea48 0803 	orr.w	r8, r8, r3
1a0017f4:	fbb4 f1f2 	udiv	r1, r4, r2
1a0017f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a0017fc:	fb02 4411 	mls	r4, r2, r1, r4
1a001800:	fa1f fc87 	uxth.w	ip, r7
1a001804:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a001808:	fb01 f30c 	mul.w	r3, r1, ip
1a00180c:	42ab      	cmp	r3, r5
1a00180e:	fa00 f40e 	lsl.w	r4, r0, lr
1a001812:	d909      	bls.n	1a001828 <__udivmoddi4+0x1bc>
1a001814:	19ed      	adds	r5, r5, r7
1a001816:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
1a00181a:	f080 808a 	bcs.w	1a001932 <__udivmoddi4+0x2c6>
1a00181e:	42ab      	cmp	r3, r5
1a001820:	f240 8087 	bls.w	1a001932 <__udivmoddi4+0x2c6>
1a001824:	3902      	subs	r1, #2
1a001826:	443d      	add	r5, r7
1a001828:	1aeb      	subs	r3, r5, r3
1a00182a:	fa1f f588 	uxth.w	r5, r8
1a00182e:	fbb3 f0f2 	udiv	r0, r3, r2
1a001832:	fb02 3310 	mls	r3, r2, r0, r3
1a001836:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a00183a:	fb00 f30c 	mul.w	r3, r0, ip
1a00183e:	42ab      	cmp	r3, r5
1a001840:	d907      	bls.n	1a001852 <__udivmoddi4+0x1e6>
1a001842:	19ed      	adds	r5, r5, r7
1a001844:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
1a001848:	d26f      	bcs.n	1a00192a <__udivmoddi4+0x2be>
1a00184a:	42ab      	cmp	r3, r5
1a00184c:	d96d      	bls.n	1a00192a <__udivmoddi4+0x2be>
1a00184e:	3802      	subs	r0, #2
1a001850:	443d      	add	r5, r7
1a001852:	1aeb      	subs	r3, r5, r3
1a001854:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a001858:	e78f      	b.n	1a00177a <__udivmoddi4+0x10e>
1a00185a:	f1c1 0720 	rsb	r7, r1, #32
1a00185e:	fa22 f807 	lsr.w	r8, r2, r7
1a001862:	408b      	lsls	r3, r1
1a001864:	fa05 f401 	lsl.w	r4, r5, r1
1a001868:	ea48 0303 	orr.w	r3, r8, r3
1a00186c:	fa20 fe07 	lsr.w	lr, r0, r7
1a001870:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a001874:	40fd      	lsrs	r5, r7
1a001876:	ea4e 0e04 	orr.w	lr, lr, r4
1a00187a:	fbb5 f9fc 	udiv	r9, r5, ip
1a00187e:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a001882:	fb0c 5519 	mls	r5, ip, r9, r5
1a001886:	fa1f f883 	uxth.w	r8, r3
1a00188a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a00188e:	fb09 f408 	mul.w	r4, r9, r8
1a001892:	42ac      	cmp	r4, r5
1a001894:	fa02 f201 	lsl.w	r2, r2, r1
1a001898:	fa00 fa01 	lsl.w	sl, r0, r1
1a00189c:	d908      	bls.n	1a0018b0 <__udivmoddi4+0x244>
1a00189e:	18ed      	adds	r5, r5, r3
1a0018a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0018a4:	d243      	bcs.n	1a00192e <__udivmoddi4+0x2c2>
1a0018a6:	42ac      	cmp	r4, r5
1a0018a8:	d941      	bls.n	1a00192e <__udivmoddi4+0x2c2>
1a0018aa:	f1a9 0902 	sub.w	r9, r9, #2
1a0018ae:	441d      	add	r5, r3
1a0018b0:	1b2d      	subs	r5, r5, r4
1a0018b2:	fa1f fe8e 	uxth.w	lr, lr
1a0018b6:	fbb5 f0fc 	udiv	r0, r5, ip
1a0018ba:	fb0c 5510 	mls	r5, ip, r0, r5
1a0018be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a0018c2:	fb00 f808 	mul.w	r8, r0, r8
1a0018c6:	45a0      	cmp	r8, r4
1a0018c8:	d907      	bls.n	1a0018da <__udivmoddi4+0x26e>
1a0018ca:	18e4      	adds	r4, r4, r3
1a0018cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
1a0018d0:	d229      	bcs.n	1a001926 <__udivmoddi4+0x2ba>
1a0018d2:	45a0      	cmp	r8, r4
1a0018d4:	d927      	bls.n	1a001926 <__udivmoddi4+0x2ba>
1a0018d6:	3802      	subs	r0, #2
1a0018d8:	441c      	add	r4, r3
1a0018da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0018de:	eba4 0408 	sub.w	r4, r4, r8
1a0018e2:	fba0 8902 	umull	r8, r9, r0, r2
1a0018e6:	454c      	cmp	r4, r9
1a0018e8:	46c6      	mov	lr, r8
1a0018ea:	464d      	mov	r5, r9
1a0018ec:	d315      	bcc.n	1a00191a <__udivmoddi4+0x2ae>
1a0018ee:	d012      	beq.n	1a001916 <__udivmoddi4+0x2aa>
1a0018f0:	b156      	cbz	r6, 1a001908 <__udivmoddi4+0x29c>
1a0018f2:	ebba 030e 	subs.w	r3, sl, lr
1a0018f6:	eb64 0405 	sbc.w	r4, r4, r5
1a0018fa:	fa04 f707 	lsl.w	r7, r4, r7
1a0018fe:	40cb      	lsrs	r3, r1
1a001900:	431f      	orrs	r7, r3
1a001902:	40cc      	lsrs	r4, r1
1a001904:	6037      	str	r7, [r6, #0]
1a001906:	6074      	str	r4, [r6, #4]
1a001908:	2100      	movs	r1, #0
1a00190a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00190e:	4618      	mov	r0, r3
1a001910:	e6f8      	b.n	1a001704 <__udivmoddi4+0x98>
1a001912:	4690      	mov	r8, r2
1a001914:	e6e0      	b.n	1a0016d8 <__udivmoddi4+0x6c>
1a001916:	45c2      	cmp	sl, r8
1a001918:	d2ea      	bcs.n	1a0018f0 <__udivmoddi4+0x284>
1a00191a:	ebb8 0e02 	subs.w	lr, r8, r2
1a00191e:	eb69 0503 	sbc.w	r5, r9, r3
1a001922:	3801      	subs	r0, #1
1a001924:	e7e4      	b.n	1a0018f0 <__udivmoddi4+0x284>
1a001926:	4628      	mov	r0, r5
1a001928:	e7d7      	b.n	1a0018da <__udivmoddi4+0x26e>
1a00192a:	4640      	mov	r0, r8
1a00192c:	e791      	b.n	1a001852 <__udivmoddi4+0x1e6>
1a00192e:	4681      	mov	r9, r0
1a001930:	e7be      	b.n	1a0018b0 <__udivmoddi4+0x244>
1a001932:	4601      	mov	r1, r0
1a001934:	e778      	b.n	1a001828 <__udivmoddi4+0x1bc>
1a001936:	3802      	subs	r0, #2
1a001938:	443c      	add	r4, r7
1a00193a:	e745      	b.n	1a0017c8 <__udivmoddi4+0x15c>
1a00193c:	4608      	mov	r0, r1
1a00193e:	e708      	b.n	1a001752 <__udivmoddi4+0xe6>
1a001940:	f1a8 0802 	sub.w	r8, r8, #2
1a001944:	443d      	add	r5, r7
1a001946:	e72b      	b.n	1a0017a0 <__udivmoddi4+0x134>

1a001948 <__aeabi_idiv0>:
1a001948:	4770      	bx	lr
1a00194a:	bf00      	nop

1a00194c <__libc_init_array>:
1a00194c:	b570      	push	{r4, r5, r6, lr}
1a00194e:	4e0f      	ldr	r6, [pc, #60]	; (1a00198c <__libc_init_array+0x40>)
1a001950:	4d0f      	ldr	r5, [pc, #60]	; (1a001990 <__libc_init_array+0x44>)
1a001952:	1b76      	subs	r6, r6, r5
1a001954:	10b6      	asrs	r6, r6, #2
1a001956:	bf18      	it	ne
1a001958:	2400      	movne	r4, #0
1a00195a:	d005      	beq.n	1a001968 <__libc_init_array+0x1c>
1a00195c:	3401      	adds	r4, #1
1a00195e:	f855 3b04 	ldr.w	r3, [r5], #4
1a001962:	4798      	blx	r3
1a001964:	42a6      	cmp	r6, r4
1a001966:	d1f9      	bne.n	1a00195c <__libc_init_array+0x10>
1a001968:	4e0a      	ldr	r6, [pc, #40]	; (1a001994 <__libc_init_array+0x48>)
1a00196a:	4d0b      	ldr	r5, [pc, #44]	; (1a001998 <__libc_init_array+0x4c>)
1a00196c:	1b76      	subs	r6, r6, r5
1a00196e:	f7fe ff38 	bl	1a0007e2 <_init>
1a001972:	10b6      	asrs	r6, r6, #2
1a001974:	bf18      	it	ne
1a001976:	2400      	movne	r4, #0
1a001978:	d006      	beq.n	1a001988 <__libc_init_array+0x3c>
1a00197a:	3401      	adds	r4, #1
1a00197c:	f855 3b04 	ldr.w	r3, [r5], #4
1a001980:	4798      	blx	r3
1a001982:	42a6      	cmp	r6, r4
1a001984:	d1f9      	bne.n	1a00197a <__libc_init_array+0x2e>
1a001986:	bd70      	pop	{r4, r5, r6, pc}
1a001988:	bd70      	pop	{r4, r5, r6, pc}
1a00198a:	bf00      	nop
1a00198c:	1a001d5c 	.word	0x1a001d5c
1a001990:	1a001d5c 	.word	0x1a001d5c
1a001994:	1a001d60 	.word	0x1a001d60
1a001998:	1a001d5c 	.word	0x1a001d5c

1a00199c <memset>:
1a00199c:	b470      	push	{r4, r5, r6}
1a00199e:	0786      	lsls	r6, r0, #30
1a0019a0:	d046      	beq.n	1a001a30 <memset+0x94>
1a0019a2:	1e54      	subs	r4, r2, #1
1a0019a4:	2a00      	cmp	r2, #0
1a0019a6:	d041      	beq.n	1a001a2c <memset+0x90>
1a0019a8:	b2ca      	uxtb	r2, r1
1a0019aa:	4603      	mov	r3, r0
1a0019ac:	e002      	b.n	1a0019b4 <memset+0x18>
1a0019ae:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a0019b2:	d33b      	bcc.n	1a001a2c <memset+0x90>
1a0019b4:	f803 2b01 	strb.w	r2, [r3], #1
1a0019b8:	079d      	lsls	r5, r3, #30
1a0019ba:	d1f8      	bne.n	1a0019ae <memset+0x12>
1a0019bc:	2c03      	cmp	r4, #3
1a0019be:	d92e      	bls.n	1a001a1e <memset+0x82>
1a0019c0:	b2cd      	uxtb	r5, r1
1a0019c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a0019c6:	2c0f      	cmp	r4, #15
1a0019c8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a0019cc:	d919      	bls.n	1a001a02 <memset+0x66>
1a0019ce:	f103 0210 	add.w	r2, r3, #16
1a0019d2:	4626      	mov	r6, r4
1a0019d4:	3e10      	subs	r6, #16
1a0019d6:	2e0f      	cmp	r6, #15
1a0019d8:	f842 5c10 	str.w	r5, [r2, #-16]
1a0019dc:	f842 5c0c 	str.w	r5, [r2, #-12]
1a0019e0:	f842 5c08 	str.w	r5, [r2, #-8]
1a0019e4:	f842 5c04 	str.w	r5, [r2, #-4]
1a0019e8:	f102 0210 	add.w	r2, r2, #16
1a0019ec:	d8f2      	bhi.n	1a0019d4 <memset+0x38>
1a0019ee:	f1a4 0210 	sub.w	r2, r4, #16
1a0019f2:	f022 020f 	bic.w	r2, r2, #15
1a0019f6:	f004 040f 	and.w	r4, r4, #15
1a0019fa:	3210      	adds	r2, #16
1a0019fc:	2c03      	cmp	r4, #3
1a0019fe:	4413      	add	r3, r2
1a001a00:	d90d      	bls.n	1a001a1e <memset+0x82>
1a001a02:	461e      	mov	r6, r3
1a001a04:	4622      	mov	r2, r4
1a001a06:	3a04      	subs	r2, #4
1a001a08:	2a03      	cmp	r2, #3
1a001a0a:	f846 5b04 	str.w	r5, [r6], #4
1a001a0e:	d8fa      	bhi.n	1a001a06 <memset+0x6a>
1a001a10:	1f22      	subs	r2, r4, #4
1a001a12:	f022 0203 	bic.w	r2, r2, #3
1a001a16:	3204      	adds	r2, #4
1a001a18:	4413      	add	r3, r2
1a001a1a:	f004 0403 	and.w	r4, r4, #3
1a001a1e:	b12c      	cbz	r4, 1a001a2c <memset+0x90>
1a001a20:	b2c9      	uxtb	r1, r1
1a001a22:	441c      	add	r4, r3
1a001a24:	f803 1b01 	strb.w	r1, [r3], #1
1a001a28:	429c      	cmp	r4, r3
1a001a2a:	d1fb      	bne.n	1a001a24 <memset+0x88>
1a001a2c:	bc70      	pop	{r4, r5, r6}
1a001a2e:	4770      	bx	lr
1a001a30:	4614      	mov	r4, r2
1a001a32:	4603      	mov	r3, r0
1a001a34:	e7c2      	b.n	1a0019bc <memset+0x20>
1a001a36:	bf00      	nop
1a001a38:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a001a3c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a001a40 <strlen>:
1a001a40:	f890 f000 	pld	[r0]
1a001a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a001a48:	f020 0107 	bic.w	r1, r0, #7
1a001a4c:	f06f 0c00 	mvn.w	ip, #0
1a001a50:	f010 0407 	ands.w	r4, r0, #7
1a001a54:	f891 f020 	pld	[r1, #32]
1a001a58:	f040 8049 	bne.w	1a001aee <strlen+0xae>
1a001a5c:	f04f 0400 	mov.w	r4, #0
1a001a60:	f06f 0007 	mvn.w	r0, #7
1a001a64:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001a68:	f891 f040 	pld	[r1, #64]	; 0x40
1a001a6c:	f100 0008 	add.w	r0, r0, #8
1a001a70:	fa82 f24c 	uadd8	r2, r2, ip
1a001a74:	faa4 f28c 	sel	r2, r4, ip
1a001a78:	fa83 f34c 	uadd8	r3, r3, ip
1a001a7c:	faa2 f38c 	sel	r3, r2, ip
1a001a80:	bb4b      	cbnz	r3, 1a001ad6 <strlen+0x96>
1a001a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a001a86:	fa82 f24c 	uadd8	r2, r2, ip
1a001a8a:	f100 0008 	add.w	r0, r0, #8
1a001a8e:	faa4 f28c 	sel	r2, r4, ip
1a001a92:	fa83 f34c 	uadd8	r3, r3, ip
1a001a96:	faa2 f38c 	sel	r3, r2, ip
1a001a9a:	b9e3      	cbnz	r3, 1a001ad6 <strlen+0x96>
1a001a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a001aa0:	fa82 f24c 	uadd8	r2, r2, ip
1a001aa4:	f100 0008 	add.w	r0, r0, #8
1a001aa8:	faa4 f28c 	sel	r2, r4, ip
1a001aac:	fa83 f34c 	uadd8	r3, r3, ip
1a001ab0:	faa2 f38c 	sel	r3, r2, ip
1a001ab4:	b97b      	cbnz	r3, 1a001ad6 <strlen+0x96>
1a001ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a001aba:	f101 0120 	add.w	r1, r1, #32
1a001abe:	fa82 f24c 	uadd8	r2, r2, ip
1a001ac2:	f100 0008 	add.w	r0, r0, #8
1a001ac6:	faa4 f28c 	sel	r2, r4, ip
1a001aca:	fa83 f34c 	uadd8	r3, r3, ip
1a001ace:	faa2 f38c 	sel	r3, r2, ip
1a001ad2:	2b00      	cmp	r3, #0
1a001ad4:	d0c6      	beq.n	1a001a64 <strlen+0x24>
1a001ad6:	2a00      	cmp	r2, #0
1a001ad8:	bf04      	itt	eq
1a001ada:	3004      	addeq	r0, #4
1a001adc:	461a      	moveq	r2, r3
1a001ade:	ba12      	rev	r2, r2
1a001ae0:	fab2 f282 	clz	r2, r2
1a001ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a001ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a001aec:	4770      	bx	lr
1a001aee:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001af2:	f004 0503 	and.w	r5, r4, #3
1a001af6:	f1c4 0000 	rsb	r0, r4, #0
1a001afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a001afe:	f014 0f04 	tst.w	r4, #4
1a001b02:	f891 f040 	pld	[r1, #64]	; 0x40
1a001b06:	fa0c f505 	lsl.w	r5, ip, r5
1a001b0a:	ea62 0205 	orn	r2, r2, r5
1a001b0e:	bf1c      	itt	ne
1a001b10:	ea63 0305 	ornne	r3, r3, r5
1a001b14:	4662      	movne	r2, ip
1a001b16:	f04f 0400 	mov.w	r4, #0
1a001b1a:	e7a9      	b.n	1a001a70 <strlen+0x30>
1a001b1c:	0a0d5441 	.word	0x0a0d5441
1a001b20:	00000000 	.word	0x00000000
1a001b24:	4e2b5441 	.word	0x4e2b5441
1a001b28:	3d454d41 	.word	0x3d454d41
1a001b2c:	45554c42 	.word	0x45554c42
1a001b30:	544f4f54 	.word	0x544f4f54
1a001b34:	45545f48 	.word	0x45545f48
1a001b38:	4e494d52 	.word	0x4e494d52
1a001b3c:	0a0d4c41 	.word	0x0a0d4c41
1a001b40:	00000000 	.word	0x00000000
1a001b44:	502b5441 	.word	0x502b5441
1a001b48:	3d445753 	.word	0x3d445753
1a001b4c:	34333231 	.word	0x34333231
1a001b50:	0a0d3735 	.word	0x0a0d3735
1a001b54:	00000000 	.word	0x00000000
1a001b58:	522b5441 	.word	0x522b5441
1a001b5c:	3d454c4f 	.word	0x3d454c4f
1a001b60:	000a0d30 	.word	0x000a0d30
1a001b64:	552b5441 	.word	0x552b5441
1a001b68:	3d545241 	.word	0x3d545241
1a001b6c:	30343833 	.word	0x30343833
1a001b70:	2c312c30 	.word	0x2c312c30
1a001b74:	0a0d2c30 	.word	0x0a0d2c30
1a001b78:	00000000 	.word	0x00000000
1a001b7c:	492b5441 	.word	0x492b5441
1a001b80:	0d54494e 	.word	0x0d54494e
1a001b84:	0000000a 	.word	0x0000000a
1a001b88:	522b5441 	.word	0x522b5441
1a001b8c:	54455345 	.word	0x54455345
1a001b90:	ff000a0d 	.word	0xff000a0d
1a001b94:	4f525245 	.word	0x4f525245
1a001b98:	564f2052 	.word	0x564f2052
1a001b9c:	55525245 	.word	0x55525245
1a001ba0:	000a0d4e 	.word	0x000a0d4e
1a001ba4:	4f525245 	.word	0x4f525245
1a001ba8:	41502052 	.word	0x41502052
1a001bac:	59544952 	.word	0x59544952
1a001bb0:	00000a0d 	.word	0x00000a0d
1a001bb4:	4f525245 	.word	0x4f525245
1a001bb8:	52462052 	.word	0x52462052
1a001bbc:	4e494d41 	.word	0x4e494d41
1a001bc0:	000a0d47 	.word	0x000a0d47
1a001bc4:	4f525245 	.word	0x4f525245
1a001bc8:	52422052 	.word	0x52422052
1a001bcc:	0d4b4145 	.word	0x0d4b4145
1a001bd0:	0000000a 	.word	0x0000000a
1a001bd4:	4f525245 	.word	0x4f525245
1a001bd8:	4e552052 	.word	0x4e552052
1a001bdc:	574f4e4b 	.word	0x574f4e4b
1a001be0:	000a0d4e 	.word	0x000a0d4e

1a001be4 <ExtRateIn>:
1a001be4:	00000000                                ....

1a001be8 <GpioButtons>:
1a001be8:	08000400 09010900                       ........

1a001bf0 <GpioLeds>:
1a001bf0:	01050005 0e000205 0c010b01              ............

1a001bfc <GpioPorts>:
1a001bfc:	03030003 0f050403 05031005 07030603     ................
1a001c0c:	ffff0802                                ....

1a001c10 <OscRateIn>:
1a001c10:	00b71b00                                ....

1a001c14 <InitClkStates>:
1a001c14:	01010f01                                ....

1a001c18 <pinmuxing>:
1a001c18:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a001c28:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a001c38:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a001c48:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a001c58:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a001c68:	00d50301 00d50401 00160107 00560207     ..............V.
1a001c78:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a001c88:	00570206                                ..W.

1a001c8c <UART_BClock>:
1a001c8c:	01a201c2 01620182                       ......b.

1a001c94 <UART_PClock>:
1a001c94:	00820081 00a200a1 08040201 0f0f0f03     ................
1a001ca4:	000000ff                                ....

1a001ca8 <periph_to_base>:
1a001ca8:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a001cb8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a001cc8:	000100e0 01000100 01200003 00060120     .......... . ...
1a001cd8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a001ce8:	01820013 00120182 01a201a2 01c20011     ................
1a001cf8:	001001c2 01e201e2 0202000f 000e0202     ................
1a001d08:	02220222 0223000d 001c0223              "."...#.#...

1a001d14 <InitClkStates>:
1a001d14:	00010100 00010909 0001090a 01010701     ................
1a001d24:	00010902 00010906 0101090c 0001090d     ................
1a001d34:	0001090e 0001090f 00010910 00010911     ................
1a001d44:	00010912 00010913 00011114 00011119     ................
1a001d54:	0001111a 0001111b                       ........
