
projects/lab2_AT_Windows/out/lab2_AT_Windows.elf:     file format elf32-littlearm
projects/lab2_AT_Windows/out/lab2_AT_Windows.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000d65

Program Header:
0x70000001 off    0x00012894 vaddr 0x1a002894 paddr 0x1a002894 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a0 vaddr 0x100000a0 paddr 0x100000a0 align 2**16
         filesz 0x00000000 memsz 0x00000040 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000289c memsz 0x0000289c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00289c align 2**16
         filesz 0x000000a0 memsz 0x000000a0 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002890  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  10000000  1a00289c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a0  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a0  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a0  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a0  2**2
                  CONTENTS
  6 .bss          00000040  100000a0  100000a0  000100a0  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a0  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a0  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a0  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a0  2**2
                  CONTENTS
 11 .init_array   00000004  1a002890  1a002890  00012890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a002894  1a002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a0  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a0  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a0  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a0  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a0  2**2
                  CONTENTS
 18 .noinit       00000000  100000e0  100000e0  000200a0  2**2
                  CONTENTS
 19 .debug_info   00015a2a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00003961  00000000  00000000  00035aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000081d3  00000000  00000000  0003942b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000009c8  00000000  00000000  00041600  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000a18  00000000  00000000  00041fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00009682  00000000  00000000  000429e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00008c29  00000000  00000000  0004c062  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0001f0eb  00000000  00000000  00054c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000031  00000000  00000000  00073d76  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  00073da7  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001588  00000000  00000000  00073de0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002890 l    d  .init_array	00000000 .init_array
1a002894 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000e0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 myLib.c
00000000 l    df *ABS*	00000000 configuracion.c
00000000 l    df *ABS*	00000000 lab2_AT_Windows.c
100000a0 l     O .bss	00000004 aux
100000a4 l     O .bss	00000004 buffer
100000a8 l     O .bss	00000004 buffer_prueba
100000ac l     O .bss	00000004 comandoAT
100000b0 l     O .bss	00000001 contador
100000b4 l     O .bss	00000004 contador.11104
100000b8 l     O .bss	00000001 esConsulta
100000b9 l     O .bss	00000001 esFn
100000bc l     O .bss	00000004 indexBuffPrueba
100000c0 l     O .bss	00000001 index_buff
100000c1 l     O .bss	00000001 modoAT
100000c2 l     O .bss	00000001 saltosLinea.11181
100000c3 l     O .bss	00000001 textoEnviado
00000000 l    df *ABS*	00000000 system.c
100000c4 l     O .bss	00000004 heap_end.5622
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 board.c
1a000f78 l     F .text	00000044 Board_LED_Init
1a000fbc l     F .text	00000040 Board_TEC_Init
1a000ffc l     F .text	00000040 Board_GPIO_Init
1a00103c l     F .text	00000030 Board_ADC_Init
1a00106c l     F .text	00000038 Board_SPI_Init
1a0010a4 l     F .text	00000024 Board_I2C_Init
1a002614 l     O .text	00000008 GpioButtons
1a00261c l     O .text	0000000c GpioLeds
1a002628 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002640 l     O .text	00000004 InitClkStates
1a002644 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0011d0 l     F .text	0000002c Chip_UART_GetIndex
1a0026b8 l     O .text	00000008 UART_BClock
1a0026c0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001338 l     F .text	00000014 Chip_ADC_GetClockIndex
1a00134c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001400 l     F .text	000000a0 pll_calc_divs
1a0014a0 l     F .text	0000010c pll_get_frac
1a0015ac l     F .text	0000004c Chip_Clock_FindBaseClock
1a001820 l     F .text	00000022 Chip_Clock_GetDivRate
100000c8 l     O .bss	00000008 audio_usb_pll_freq
1a0026d4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002740 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001af8 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001b0c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
10000040 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a002894 l       .init_array	00000000 __init_array_end
1a002890 l       .bss_RAM5	00000000 __preinit_array_end
1a002890 l       .init_array	00000000 __init_array_start
1a002890 l       .bss_RAM5	00000000 __preinit_array_start
1a001644 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a000300 g     F .text	0000003e numToChar
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a001118 g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a0013f2 g     F .text	0000000c Chip_ADC_SetResolution
1a0005b4 g     F .text	00000054 SysTick_Handler
1a000d60  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a00289c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0007fc g     F .text	00000018 UARTEscribirString
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff6b2a g       *ABS*	00000000 __valid_user_code_checksum
1a00289c g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0018c2 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a000f00 g     F .text	00000078 Led_Toggle
1a0007e8 g     F .text	00000014 UARTEscribirByte
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001c68 g     F .text	00000000 .hidden __aeabi_uldivmod
100000e0 g       .noinit	00000000 _noinit
100000dc g     O .bss	00000004 SystemCoreClock
1a0011fc g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a001fc8 g     F .text	00000010 malloc
1a000180  w    F .text	00000002 UsageFault_Handler
1a001940 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a001158 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001c98 g     F .text	000002dc .hidden __udivmoddi4
1a000df0 g     F .text	00000020 _sbrk_r
1a002610 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000e88 g     F .text	00000078 Led_Off
1a000788 g     F .text	00000028 ConfigurarUART
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000514 g     F .text	000000a0 ConfigurarPuertosLaboratorio
1a0003d8 g     F .text	00000058 LeerLEDs
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002894 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001f78 g     F .text	00000050 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0010ec g     F .text	0000002c Board_Init
1a000dee  w    F .text	00000002 _init
1a000e10 g     F .text	00000078 Led_On
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100000e0 g       .bss	00000000 _ebss
1a000608 g     F .text	00000070 TIMER0_IRQHandler
1a000d64 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001bf0 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0015f8 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
100000d8 g     O .bss	00000001 led_encendido
1a00018a g     F .text	0000001e data_init
1a000678 g     F .text	00000110 TIMER1_IRQHandler
1a001bcc g     F .text	00000024 Chip_I2C_Init
1a000868 g     F .text	0000024c UART2_IRQHandler
1a0017b4 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001b24 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a002084 g     F .text	00000090 _free_r
1a00189c g     F .text	00000026 Chip_Clock_GetBaseClock
100000a0 g       .bss	00000000 _bss
1a0007c0 g     F .text	00000028 UARTLeerByte
1a0013c0 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a001b36 g     F .text	0000003e Chip_SSP_SetBitRate
1a001af4 g     F .text	00000002 Chip_GPIO_Init
1a00263c g     O .text	00000004 OscRateIn
1a0003c4 g     F .text	00000014 arrayLength
100000e0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a0007b0 g     F .text	00000010 UARTDisponible
1a000178 g       .text	00000000 __bss_section_table_end
1a001f74  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0001ba  w    F .text	00000002 USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a001660 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001fe8 g     F .text	0000009a memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000c94 g     F .text	000000cc main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a002114 g     F .text	000000bc _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0018d0 g     F .text	0000003c Chip_Clock_EnableOpts
1a00167c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0021e8 g     F .text	000002dc strcmp
1a001734 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001c28 g     F .text	00000040 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000dec  w    F .text	00000002 _fini
1a001380 g     F .text	00000040 Chip_ADC_Init
1a001120 g     F .text	00000038 Board_SetupMuxing
1a001250 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1000003c g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
100000e0 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001b74 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0010c8 g     F .text	00000024 Board_Debug_Init
100000a0 g       .data	00000000 _edata
1a000814 g     F .text	00000054 EnviarComandoAT
1a001bac g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0019a0 g     F .text	00000154 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000340 g     F .text	00000084 numToString
1a000000 g     O .text	00000040 g_pfnVectors
1a00198c g     F .text	00000014 SystemCoreClockUpdate
10000038 g     O .data	00000004 __ctype_ptr__
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a000430 g     F .text	000000e4 ConfigurarInterrupciones
1a002788 g     O .text	00000101 _ctype_
1a001f74  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0024c0 g     F .text	000000dc strlen
1a00190c g     F .text	00000034 Chip_Clock_Enable
1a000ab4 g     F .text	000001e0 UART3_IRQHandler
100000d4 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
100000d0 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001844 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a001fd8 g     F .text	00000010 free
1a0011c4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 65 0d 00 1a 79 01 00 1a 7b 01 00 1a     ....e...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 2a 6b ff 53     }...........*k.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	b5 05 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	09 06 00 1a 79 06 00 1a bb 01 00 1a bb 01 00 1a     ....y...........
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a 69 08 00 1a b5 0a 00 1a     ........i.......
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00289c 	.word	0x1a00289c
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a0 	.word	0x000000a0
1a000120:	1a00289c 	.word	0x1a00289c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00289c 	.word	0x1a00289c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00289c 	.word	0x1a00289c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00289c 	.word	0x1a00289c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a0 	.word	0x100000a0
1a000154:	00000040 	.word	0x00000040
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <numToChar>:
#include "chip.h"
#include "led.h"

uint8_t numToChar(uint8_t numero)
{
    switch(numero)
1a000300:	2809      	cmp	r0, #9
1a000302:	d818      	bhi.n	1a000336 <numToChar+0x36>
1a000304:	e8df f000 	tbb	[pc, r0]
1a000308:	09071905 	.word	0x09071905
1a00030c:	110f0d0b 	.word	0x110f0d0b
1a000310:	1513      	.short	0x1513
    {
        case 0: return 48;
1a000312:	2030      	movs	r0, #48	; 0x30
1a000314:	4770      	bx	lr
        case 1: return 49;
        case 2: return 50;
1a000316:	2032      	movs	r0, #50	; 0x32
1a000318:	4770      	bx	lr
        case 3: return 51;
1a00031a:	2033      	movs	r0, #51	; 0x33
1a00031c:	4770      	bx	lr
        case 4: return 52;
1a00031e:	2034      	movs	r0, #52	; 0x34
1a000320:	4770      	bx	lr
        case 5: return 53;
1a000322:	2035      	movs	r0, #53	; 0x35
1a000324:	4770      	bx	lr
        case 6: return 54;
1a000326:	2036      	movs	r0, #54	; 0x36
1a000328:	4770      	bx	lr
        case 7: return 55;
1a00032a:	2037      	movs	r0, #55	; 0x37
1a00032c:	4770      	bx	lr
        case 8: return 56;
1a00032e:	2038      	movs	r0, #56	; 0x38
1a000330:	4770      	bx	lr
        case 9: return 57;
1a000332:	2039      	movs	r0, #57	; 0x39
1a000334:	4770      	bx	lr
        default: return 0;
1a000336:	2000      	movs	r0, #0
1a000338:	4770      	bx	lr
        case 1: return 49;
1a00033a:	2031      	movs	r0, #49	; 0x31
    }
}
1a00033c:	4770      	bx	lr
1a00033e:	Address 0x000000001a00033e is out of bounds.


1a000340 <numToString>:

uint8_t* numToString(uint8_t numero)
{
1a000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t* numString;
    uint8_t cantDigitos = 0, digito;

    if(numero == 0)
1a000342:	b118      	cbz	r0, 1a00034c <numToString+0xc>
1a000344:	4606      	mov	r6, r0
1a000346:	4603      	mov	r3, r0
1a000348:	2400      	movs	r4, #0
1a00034a:	e013      	b.n	1a000374 <numToString+0x34>
    {
        numString = (uint8_t*)malloc(4);
1a00034c:	2004      	movs	r0, #4
1a00034e:	f001 fe3b 	bl	1a001fc8 <malloc>
1a000352:	4607      	mov	r7, r0
        *numString = 48;
1a000354:	2330      	movs	r3, #48	; 0x30
1a000356:	7003      	strb	r3, [r0, #0]
        *(numString + 1) = 10;
1a000358:	230a      	movs	r3, #10
1a00035a:	7043      	strb	r3, [r0, #1]
        *(numString + 2) = 13;
1a00035c:	230d      	movs	r3, #13
1a00035e:	7083      	strb	r3, [r0, #2]
        *(numString + 3) = 0;
1a000360:	2300      	movs	r3, #0
1a000362:	70c3      	strb	r3, [r0, #3]

        return numString;
1a000364:	e029      	b.n	1a0003ba <numToString+0x7a>
    }

    // Consigo la cantidad total de dígitos
    for(uint8_t aux = numero; aux != 0; aux /= 10, cantDigitos++);
1a000366:	4a16      	ldr	r2, [pc, #88]	; (1a0003c0 <numToString+0x80>)
1a000368:	fba2 2303 	umull	r2, r3, r2, r3
1a00036c:	f3c3 03c7 	ubfx	r3, r3, #3, #8
1a000370:	3401      	adds	r4, #1
1a000372:	b2e4      	uxtb	r4, r4
1a000374:	2b00      	cmp	r3, #0
1a000376:	d1f6      	bne.n	1a000366 <numToString+0x26>

    numString = (uint8_t*)malloc(cantDigitos + 3);
1a000378:	1ce0      	adds	r0, r4, #3
1a00037a:	f001 fe25 	bl	1a001fc8 <malloc>
1a00037e:	4607      	mov	r7, r0
    *numString = 0;
1a000380:	2300      	movs	r3, #0
1a000382:	7003      	strb	r3, [r0, #0]
    
    *(numString + cantDigitos) = 10;                // Escribo el salto de línea antes del caracter nulo
1a000384:	220a      	movs	r2, #10
1a000386:	5502      	strb	r2, [r0, r4]
    *(numString + cantDigitos + 1) = 13;
1a000388:	1c62      	adds	r2, r4, #1
1a00038a:	210d      	movs	r1, #13
1a00038c:	5481      	strb	r1, [r0, r2]
    *(numString + cantDigitos + 2) = 0;             // Escribo el caracter nulo en la posición que correspondería al final de la cadena
1a00038e:	1ca2      	adds	r2, r4, #2
1a000390:	5483      	strb	r3, [r0, r2]
    for(uint8_t i = cantDigitos - 1; numero != 0; numero /= 10, i--)
1a000392:	3c01      	subs	r4, #1
1a000394:	b2e4      	uxtb	r4, r4
1a000396:	e00e      	b.n	1a0003b6 <numToString+0x76>
    {
        digito = numero % 10;
1a000398:	4d09      	ldr	r5, [pc, #36]	; (1a0003c0 <numToString+0x80>)
1a00039a:	fba5 3506 	umull	r3, r5, r5, r6
1a00039e:	08ed      	lsrs	r5, r5, #3
1a0003a0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
1a0003a4:	0058      	lsls	r0, r3, #1
1a0003a6:	1a30      	subs	r0, r6, r0
        *(numString + i) = numToChar(digito);
1a0003a8:	b2c0      	uxtb	r0, r0
1a0003aa:	f7ff ffa9 	bl	1a000300 <numToChar>
1a0003ae:	5538      	strb	r0, [r7, r4]
    for(uint8_t i = cantDigitos - 1; numero != 0; numero /= 10, i--)
1a0003b0:	b2ee      	uxtb	r6, r5
1a0003b2:	3c01      	subs	r4, #1
1a0003b4:	b2e4      	uxtb	r4, r4
1a0003b6:	2e00      	cmp	r6, #0
1a0003b8:	d1ee      	bne.n	1a000398 <numToString+0x58>
    }

    return numString;
}
1a0003ba:	4638      	mov	r0, r7
1a0003bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0003be:	bf00      	nop
1a0003c0:	cccccccd 	.word	0xcccccccd

1a0003c4 <arrayLength>:

uint8_t arrayLength(uint8_t* array)
{
    uint8_t length = 0;
1a0003c4:	2300      	movs	r3, #0
    while(*array != 0)
1a0003c6:	e002      	b.n	1a0003ce <arrayLength+0xa>
    {
        array++;
1a0003c8:	3001      	adds	r0, #1
        length++;
1a0003ca:	3301      	adds	r3, #1
1a0003cc:	b2db      	uxtb	r3, r3
    while(*array != 0)
1a0003ce:	7802      	ldrb	r2, [r0, #0]
1a0003d0:	2a00      	cmp	r2, #0
1a0003d2:	d1f9      	bne.n	1a0003c8 <arrayLength+0x4>
    }
    
    return length;
}
1a0003d4:	4618      	mov	r0, r3
1a0003d6:	4770      	bx	lr

1a0003d8 <LeerLEDs>:
 * @return	true if the GPIO is high, false if low
 * @note	This function replaces Chip_GPIO_ReadPortBit()
 */
STATIC INLINE bool Chip_GPIO_GetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a0003d8:	4b13      	ldr	r3, [pc, #76]	; (1a000428 <LeerLEDs+0x50>)
1a0003da:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
1a0003de:	f893 00a1 	ldrb.w	r0, [r3, #161]	; 0xa1
1a0003e2:	3000      	adds	r0, #0
1a0003e4:	bf18      	it	ne
1a0003e6:	2001      	movne	r0, #1
    
    // Estado del LED rojo del LED RGB
    led_encendido |= Chip_GPIO_GetPinState(LPC_GPIO_PORT, 5, 0) << RGB_R_LED;

    // Estado del LED verde del LED RGB
    led_encendido |= Chip_GPIO_GetPinState(LPC_GPIO_PORT, 5, 1) << RGB_G_LED;
1a0003e8:	0040      	lsls	r0, r0, #1
1a0003ea:	2a00      	cmp	r2, #0
1a0003ec:	bf18      	it	ne
1a0003ee:	f040 0001 	orrne.w	r0, r0, #1
1a0003f2:	f893 20a2 	ldrb.w	r2, [r3, #162]	; 0xa2
1a0003f6:	3200      	adds	r2, #0
1a0003f8:	bf18      	it	ne
1a0003fa:	2201      	movne	r2, #1

    // Estado del LED azul del LED RGB
    led_encendido |= Chip_GPIO_GetPinState(LPC_GPIO_PORT, 5, 2) << RGB_B_LED;
1a0003fc:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
1a000400:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
1a000404:	3200      	adds	r2, #0
1a000406:	bf18      	it	ne
1a000408:	2201      	movne	r2, #1

    // Estado del LED rojo
    led_encendido |= Chip_GPIO_GetPinState(LPC_GPIO_PORT, 1, 11) << RED_LED;
1a00040a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
1a00040e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
1a000412:	3300      	adds	r3, #0
1a000414:	bf18      	it	ne
1a000416:	2301      	movne	r3, #1

    // Estado del LED verde
    led_encendido |= Chip_GPIO_GetPinState(LPC_GPIO_PORT, 1, 12) << GREEN_LED;

    if(led_encendido)
1a000418:	ea50 1043 	orrs.w	r0, r0, r3, lsl #5
1a00041c:	d002      	beq.n	1a000424 <LeerLEDs+0x4c>
        LPC_TIMER0->TCR = TIMER_ENABLE;
1a00041e:	2201      	movs	r2, #1
1a000420:	4b02      	ldr	r3, [pc, #8]	; (1a00042c <LeerLEDs+0x54>)
1a000422:	605a      	str	r2, [r3, #4]

    return led_encendido;
}
1a000424:	4770      	bx	lr
1a000426:	bf00      	nop
1a000428:	400f4000 	.word	0x400f4000
1a00042c:	40084000 	.word	0x40084000

1a000430 <ConfigurarInterrupciones>:
#include "configuracion.h"

void ConfigurarInterrupciones(void) {
1a000430:	b510      	push	{r4, lr}
   __asm__ volatile ("cpsid i");
1a000432:	b672      	cpsid	i

   /********* Configuración de interrupción de SysTick *********/

   /* Activate SysTick */
   SystemCoreClockUpdate();
1a000434:	f001 faaa 	bl	1a00198c <SystemCoreClockUpdate>
   SysTick_Config(SystemCoreClock/1000);
1a000438:	4b2d      	ldr	r3, [pc, #180]	; (1a0004f0 <ConfigurarInterrupciones+0xc0>)
1a00043a:	681b      	ldr	r3, [r3, #0]
1a00043c:	4a2d      	ldr	r2, [pc, #180]	; (1a0004f4 <ConfigurarInterrupciones+0xc4>)
1a00043e:	fba2 2303 	umull	r2, r3, r2, r3
1a000442:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a000444:	3b01      	subs	r3, #1
1a000446:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a00044a:	d209      	bcs.n	1a000460 <ConfigurarInterrupciones+0x30>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a00044c:	4a2a      	ldr	r2, [pc, #168]	; (1a0004f8 <ConfigurarInterrupciones+0xc8>)
1a00044e:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000450:	21e0      	movs	r1, #224	; 0xe0
1a000452:	4b2a      	ldr	r3, [pc, #168]	; (1a0004fc <ConfigurarInterrupciones+0xcc>)
1a000454:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a000458:	2300      	movs	r3, #0
1a00045a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00045c:	2307      	movs	r3, #7
1a00045e:	6013      	str	r3, [r2, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000460:	22e0      	movs	r2, #224	; 0xe0
1a000462:	4b26      	ldr	r3, [pc, #152]	; (1a0004fc <ConfigurarInterrupciones+0xcc>)
1a000464:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23


   /****************** Configuración de timer ******************/

   // Uso reloj interno de 95 MHz
   LPC_TIMER0->CTCR = 0;
1a000468:	4b25      	ldr	r3, [pc, #148]	; (1a000500 <ConfigurarInterrupciones+0xd0>)
1a00046a:	2400      	movs	r4, #0
1a00046c:	671c      	str	r4, [r3, #112]	; 0x70

   // Limpio el flag de interrupción
   LPC_TIMER0->IR = LPC_TIMER0->IR;
1a00046e:	681a      	ldr	r2, [r3, #0]
1a000470:	601a      	str	r2, [r3, #0]

   // Prescaler de 950000 para obtener una frecuencia de 100 Hz en el Timer Counter
   LPC_TIMER0->PR = 950000;
1a000472:	4a24      	ldr	r2, [pc, #144]	; (1a000504 <ConfigurarInterrupciones+0xd4>)
1a000474:	60da      	str	r2, [r3, #12]

   // Se hará un match a las 25 cuentas del Timer Counter
   LPC_TIMER0->MR[0] = 25;
1a000476:	2219      	movs	r2, #25
1a000478:	619a      	str	r2, [r3, #24]

   // En el match se parará el timer, se lo reseteará, y se efectuará una interrupción del Timer 0
   LPC_TIMER0->MCR = TIMER_STOP_ON_MATCH(0) | TIMER_RESET_ON_MATCH(0) | TIMER_INT_ON_MATCH(0);
1a00047a:	2007      	movs	r0, #7
1a00047c:	6158      	str	r0, [r3, #20]

   // Reseteo el timer
   LPC_TIMER0->TCR = TIMER_RESET;
1a00047e:	2102      	movs	r1, #2
1a000480:	6059      	str	r1, [r3, #4]
   
   // Elimino los pedidos pendientes de interrupción que puedan haber del Timer 0
   NVIC->ICPR[0] |= 1 << TIMER0_IRQn;
1a000482:	4b21      	ldr	r3, [pc, #132]	; (1a000508 <ConfigurarInterrupciones+0xd8>)
1a000484:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
1a000488:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
1a00048c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

   // Habilito la interrupción para el Timer 0
   NVIC->ISER[0] |= 1 << TIMER0_IRQn;
1a000490:	681a      	ldr	r2, [r3, #0]
1a000492:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
1a000496:	601a      	str	r2, [r3, #0]

   LPC_TIMER1->CTCR = 0;
1a000498:	4a1c      	ldr	r2, [pc, #112]	; (1a00050c <ConfigurarInterrupciones+0xdc>)
1a00049a:	6714      	str	r4, [r2, #112]	; 0x70
   LPC_TIMER1->IR = LPC_TIMER1->IR;
1a00049c:	6814      	ldr	r4, [r2, #0]
1a00049e:	6014      	str	r4, [r2, #0]

   // Para que la frecuencia con la que funciona el Timer Counter sea de 1 kHz (T = 1 ms)
   LPC_TIMER1->PR = 95000;
1a0004a0:	4c1b      	ldr	r4, [pc, #108]	; (1a000510 <ConfigurarInterrupciones+0xe0>)
1a0004a2:	60d4      	str	r4, [r2, #12]

   // A los 500 ms se hace un match
   LPC_TIMER1->MR[0] = 500;
1a0004a4:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
1a0004a8:	6194      	str	r4, [r2, #24]

   LPC_TIMER1->MCR = TIMER_STOP_ON_MATCH(0) | TIMER_RESET_ON_MATCH(0) | TIMER_INT_ON_MATCH(0);
1a0004aa:	6150      	str	r0, [r2, #20]
   LPC_TIMER1->TCR = TIMER_RESET;
1a0004ac:	6051      	str	r1, [r2, #4]

   NVIC->ICPR[0] |= 1 << TIMER1_IRQn;
1a0004ae:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
1a0004b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a0004b6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC->ISER[0] |= 1 << TIMER1_IRQn;
1a0004ba:	681a      	ldr	r2, [r3, #0]
1a0004bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a0004c0:	601a      	str	r2, [r3, #0]
   

   NVIC->ICPR[0] |= 1 << USART3_IRQn;
1a0004c2:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
1a0004c6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
1a0004ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC->ISER[0] |= 1 << USART3_IRQn;
1a0004ce:	681a      	ldr	r2, [r3, #0]
1a0004d0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
1a0004d4:	601a      	str	r2, [r3, #0]

   NVIC->ICPR[0] |= 1 << USART2_IRQn;
1a0004d6:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
1a0004da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
1a0004de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC->ISER[0] |= 1 << USART2_IRQn;
1a0004e2:	681a      	ldr	r2, [r3, #0]
1a0004e4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
1a0004e8:	601a      	str	r2, [r3, #0]

   /****** Fin de configuración de interrupciones por GPIO *****/

   __asm__ volatile ("cpsie i");
1a0004ea:	b662      	cpsie	i
1a0004ec:	bd10      	pop	{r4, pc}
1a0004ee:	bf00      	nop
1a0004f0:	100000dc 	.word	0x100000dc
1a0004f4:	10624dd3 	.word	0x10624dd3
1a0004f8:	e000e010 	.word	0xe000e010
1a0004fc:	e000ed00 	.word	0xe000ed00
1a000500:	40084000 	.word	0x40084000
1a000504:	000e7ef0 	.word	0x000e7ef0
1a000508:	e000e100 	.word	0xe000e100
1a00050c:	40085000 	.word	0x40085000
1a000510:	00017318 	.word	0x00017318

1a000514 <ConfigurarPuertosLaboratorio>:
}

void ConfigurarPuertosLaboratorio(void) {
1a000514:	b410      	push	{r4}
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000516:	4b25      	ldr	r3, [pc, #148]	; (1a0005ac <ConfigurarPuertosLaboratorio+0x98>)
1a000518:	22d4      	movs	r2, #212	; 0xd4
1a00051a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
1a00051e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a000522:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_ClearValue(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue)
{
	pGPIO->CLR[portNum] = bitValue;
1a000526:	4a22      	ldr	r2, [pc, #136]	; (1a0005b0 <ConfigurarPuertosLaboratorio+0x9c>)
1a000528:	2007      	movs	r0, #7
1a00052a:	f242 2194 	movw	r1, #8852	; 0x2294
1a00052e:	5050      	str	r0, [r2, r1]
		pGPIO->DIR[portNum] |= bitValue;
1a000530:	f242 0014 	movw	r0, #8212	; 0x2014
1a000534:	5811      	ldr	r1, [r2, r0]
1a000536:	f041 0107 	orr.w	r1, r1, #7
1a00053a:	5011      	str	r1, [r2, r0]
1a00053c:	21d0      	movs	r1, #208	; 0xd0
1a00053e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
1a000542:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
1a000546:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
	pGPIO->CLR[portNum] = bitValue;
1a00054a:	f502 510a 	add.w	r1, r2, #8832	; 0x2280
1a00054e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
1a000552:	6008      	str	r0, [r1, #0]
1a000554:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
1a000558:	f242 2184 	movw	r1, #8836	; 0x2284
1a00055c:	5050      	str	r0, [r2, r1]
		pGPIO->DIR[portNum] |= bitValue;
1a00055e:	f502 5000 	add.w	r0, r2, #8192	; 0x2000
1a000562:	6801      	ldr	r1, [r0, #0]
1a000564:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
1a000568:	6001      	str	r1, [r0, #0]
1a00056a:	f242 0104 	movw	r1, #8196	; 0x2004
1a00056e:	5854      	ldr	r4, [r2, r1]
1a000570:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
1a000574:	5054      	str	r4, [r2, r1]
1a000576:	2440      	movs	r4, #64	; 0x40
1a000578:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
1a00057c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
1a000580:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
1a000584:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
		pGPIO->DIR[portNum] &= ~bitValue;
1a000588:	6804      	ldr	r4, [r0, #0]
1a00058a:	f424 7444 	bic.w	r4, r4, #784	; 0x310
1a00058e:	6004      	str	r4, [r0, #0]
1a000590:	5850      	ldr	r0, [r2, r1]
1a000592:	f420 7000 	bic.w	r0, r0, #512	; 0x200
1a000596:	5050      	str	r0, [r2, r1]
1a000598:	22d6      	movs	r2, #214	; 0xd6
1a00059a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
1a00059e:	2246      	movs	r2, #70	; 0x46
1a0005a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
   // Para configurar como U3_TXD al pin T_FIL1
   Chip_SCU_PinMux(4, 1, SCU_MODE_SAL, SCU_MODE_FUNC6);

   // Para configurar como U3_RXD al pin T_FIL2
   Chip_SCU_PinMux(4, 2, SCU_MODE_ENT, SCU_MODE_FUNC6);
}
1a0005a4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0005a8:	4770      	bx	lr
1a0005aa:	bf00      	nop
1a0005ac:	40086000 	.word	0x40086000
1a0005b0:	400f4000 	.word	0x400f4000

1a0005b4 <SysTick_Handler>:

static uint8_t actualizar = 0;
uint8_t led_encendido;

void SysTick_Handler(void)
{
1a0005b4:	b508      	push	{r3, lr}
   static int contador = 0;

   contador++;
1a0005b6:	4a12      	ldr	r2, [pc, #72]	; (1a000600 <SysTick_Handler+0x4c>)
1a0005b8:	6813      	ldr	r3, [r2, #0]
1a0005ba:	3301      	adds	r3, #1
1a0005bc:	6013      	str	r3, [r2, #0]
   if (contador%500 == 0) {
1a0005be:	4911      	ldr	r1, [pc, #68]	; (1a000604 <SysTick_Handler+0x50>)
1a0005c0:	fb81 2103 	smull	r2, r1, r1, r3
1a0005c4:	17da      	asrs	r2, r3, #31
1a0005c6:	ebc2 1261 	rsb	r2, r2, r1, asr #5
1a0005ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a0005ce:	fb01 3212 	mls	r2, r1, r2, r3
1a0005d2:	b182      	cbz	r2, 1a0005f6 <SysTick_Handler+0x42>
      Led_Toggle(YELLOW_LED);
   }
   if(contador %1000 == 0) {
1a0005d4:	4b0a      	ldr	r3, [pc, #40]	; (1a000600 <SysTick_Handler+0x4c>)
1a0005d6:	681a      	ldr	r2, [r3, #0]
1a0005d8:	490a      	ldr	r1, [pc, #40]	; (1a000604 <SysTick_Handler+0x50>)
1a0005da:	fb81 3102 	smull	r3, r1, r1, r2
1a0005de:	17d3      	asrs	r3, r2, #31
1a0005e0:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
1a0005e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a0005e8:	fb01 2313 	mls	r3, r1, r3, r2
1a0005ec:	b913      	cbnz	r3, 1a0005f4 <SysTick_Handler+0x40>
       contador = 0;
1a0005ee:	2200      	movs	r2, #0
1a0005f0:	4b03      	ldr	r3, [pc, #12]	; (1a000600 <SysTick_Handler+0x4c>)
1a0005f2:	601a      	str	r2, [r3, #0]
1a0005f4:	bd08      	pop	{r3, pc}
      Led_Toggle(YELLOW_LED);
1a0005f6:	2004      	movs	r0, #4
1a0005f8:	f000 fc82 	bl	1a000f00 <Led_Toggle>
1a0005fc:	e7ea      	b.n	1a0005d4 <SysTick_Handler+0x20>
1a0005fe:	bf00      	nop
1a000600:	100000b4 	.word	0x100000b4
1a000604:	10624dd3 	.word	0x10624dd3

1a000608 <TIMER0_IRQHandler>:
       actualizar = 1;
   }
}

void TIMER0_IRQHandler(void)
{
1a000608:	b508      	push	{r3, lr}
    LPC_TIMER0->IR = LPC_TIMER0->IR;
1a00060a:	4b19      	ldr	r3, [pc, #100]	; (1a000670 <TIMER0_IRQHandler+0x68>)
1a00060c:	681a      	ldr	r2, [r3, #0]
1a00060e:	601a      	str	r2, [r3, #0]
    LPC_TIMER0->TCR = TIMER_RESET;
1a000610:	2202      	movs	r2, #2
1a000612:	605a      	str	r2, [r3, #4]

    if(led_encendido & (1 << RGB_R_LED))
1a000614:	4b17      	ldr	r3, [pc, #92]	; (1a000674 <TIMER0_IRQHandler+0x6c>)
1a000616:	781b      	ldrb	r3, [r3, #0]
1a000618:	f013 0f01 	tst.w	r3, #1
1a00061c:	d114      	bne.n	1a000648 <TIMER0_IRQHandler+0x40>
        Led_Off(RGB_R_LED);
    if(led_encendido & (1 << RGB_G_LED))
1a00061e:	4b15      	ldr	r3, [pc, #84]	; (1a000674 <TIMER0_IRQHandler+0x6c>)
1a000620:	781b      	ldrb	r3, [r3, #0]
1a000622:	f013 0f02 	tst.w	r3, #2
1a000626:	d113      	bne.n	1a000650 <TIMER0_IRQHandler+0x48>
        Led_Off(RGB_G_LED);
    if(led_encendido & (1 << RGB_B_LED))
1a000628:	4b12      	ldr	r3, [pc, #72]	; (1a000674 <TIMER0_IRQHandler+0x6c>)
1a00062a:	781b      	ldrb	r3, [r3, #0]
1a00062c:	f013 0f04 	tst.w	r3, #4
1a000630:	d112      	bne.n	1a000658 <TIMER0_IRQHandler+0x50>
        Led_Off(RGB_B_LED);
    if(led_encendido & (1 << RED_LED))
1a000632:	4b10      	ldr	r3, [pc, #64]	; (1a000674 <TIMER0_IRQHandler+0x6c>)
1a000634:	781b      	ldrb	r3, [r3, #0]
1a000636:	f013 0f08 	tst.w	r3, #8
1a00063a:	d111      	bne.n	1a000660 <TIMER0_IRQHandler+0x58>
        Led_Off(RED_LED);
    if(led_encendido & (1 << GREEN_LED))
1a00063c:	4b0d      	ldr	r3, [pc, #52]	; (1a000674 <TIMER0_IRQHandler+0x6c>)
1a00063e:	781b      	ldrb	r3, [r3, #0]
1a000640:	f013 0f20 	tst.w	r3, #32
1a000644:	d110      	bne.n	1a000668 <TIMER0_IRQHandler+0x60>
1a000646:	bd08      	pop	{r3, pc}
        Led_Off(RGB_R_LED);
1a000648:	2000      	movs	r0, #0
1a00064a:	f000 fc1d 	bl	1a000e88 <Led_Off>
1a00064e:	e7e6      	b.n	1a00061e <TIMER0_IRQHandler+0x16>
        Led_Off(RGB_G_LED);
1a000650:	2001      	movs	r0, #1
1a000652:	f000 fc19 	bl	1a000e88 <Led_Off>
1a000656:	e7e7      	b.n	1a000628 <TIMER0_IRQHandler+0x20>
        Led_Off(RGB_B_LED);
1a000658:	2002      	movs	r0, #2
1a00065a:	f000 fc15 	bl	1a000e88 <Led_Off>
1a00065e:	e7e8      	b.n	1a000632 <TIMER0_IRQHandler+0x2a>
        Led_Off(RED_LED);
1a000660:	2003      	movs	r0, #3
1a000662:	f000 fc11 	bl	1a000e88 <Led_Off>
1a000666:	e7e9      	b.n	1a00063c <TIMER0_IRQHandler+0x34>
        Led_Off(GREEN_LED);
1a000668:	2005      	movs	r0, #5
1a00066a:	f000 fc0d 	bl	1a000e88 <Led_Off>
}
1a00066e:	e7ea      	b.n	1a000646 <TIMER0_IRQHandler+0x3e>
1a000670:	40084000 	.word	0x40084000
1a000674:	100000d8 	.word	0x100000d8

1a000678 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler(void)
{
1a000678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LPC_TIMER1->IR = LPC_TIMER1->IR;
1a00067c:	4b3d      	ldr	r3, [pc, #244]	; (1a000774 <TIMER1_IRQHandler+0xfc>)
1a00067e:	681a      	ldr	r2, [r3, #0]
1a000680:	601a      	str	r2, [r3, #0]
    LPC_TIMER1->TCR = TIMER_RESET;
1a000682:	2202      	movs	r2, #2
1a000684:	605a      	str	r2, [r3, #4]

    textoEnviado = 1;
1a000686:	2201      	movs	r2, #1
1a000688:	4b3b      	ldr	r3, [pc, #236]	; (1a000778 <TIMER1_IRQHandler+0x100>)
1a00068a:	701a      	strb	r2, [r3, #0]
    esConsulta = 0;
1a00068c:	2200      	movs	r2, #0
1a00068e:	4b3b      	ldr	r3, [pc, #236]	; (1a00077c <TIMER1_IRQHandler+0x104>)
1a000690:	701a      	strb	r2, [r3, #0]

    buffer[index_buff++] = 'C'; buffer[index_buff++] = 'o'; buffer[index_buff++] = 'u';
1a000692:	4b3b      	ldr	r3, [pc, #236]	; (1a000780 <TIMER1_IRQHandler+0x108>)
1a000694:	681b      	ldr	r3, [r3, #0]
1a000696:	483b      	ldr	r0, [pc, #236]	; (1a000784 <TIMER1_IRQHandler+0x10c>)
1a000698:	7801      	ldrb	r1, [r0, #0]
1a00069a:	1c4a      	adds	r2, r1, #1
1a00069c:	b2d2      	uxtb	r2, r2
1a00069e:	2443      	movs	r4, #67	; 0x43
1a0006a0:	545c      	strb	r4, [r3, r1]
1a0006a2:	1c51      	adds	r1, r2, #1
1a0006a4:	b2c9      	uxtb	r1, r1
1a0006a6:	266f      	movs	r6, #111	; 0x6f
1a0006a8:	549e      	strb	r6, [r3, r2]
1a0006aa:	1c4a      	adds	r2, r1, #1
1a0006ac:	b2d2      	uxtb	r2, r2
1a0006ae:	f04f 0975 	mov.w	r9, #117	; 0x75
1a0006b2:	f803 9001 	strb.w	r9, [r3, r1]
    buffer[index_buff++] = 'l'; buffer[index_buff++] = 'd'; buffer[index_buff++] = 'n';
1a0006b6:	1c51      	adds	r1, r2, #1
1a0006b8:	b2c9      	uxtb	r1, r1
1a0006ba:	246c      	movs	r4, #108	; 0x6c
1a0006bc:	549c      	strb	r4, [r3, r2]
1a0006be:	1c4a      	adds	r2, r1, #1
1a0006c0:	b2d2      	uxtb	r2, r2
1a0006c2:	2464      	movs	r4, #100	; 0x64
1a0006c4:	545c      	strb	r4, [r3, r1]
1a0006c6:	1c51      	adds	r1, r2, #1
1a0006c8:	b2c9      	uxtb	r1, r1
1a0006ca:	256e      	movs	r5, #110	; 0x6e
1a0006cc:	549d      	strb	r5, [r3, r2]
    buffer[index_buff++] = '\''; buffer[index_buff++] = 't'; buffer[index_buff++] = ' ';
1a0006ce:	1c4a      	adds	r2, r1, #1
1a0006d0:	b2d2      	uxtb	r2, r2
1a0006d2:	2727      	movs	r7, #39	; 0x27
1a0006d4:	545f      	strb	r7, [r3, r1]
1a0006d6:	1c51      	adds	r1, r2, #1
1a0006d8:	b2c9      	uxtb	r1, r1
1a0006da:	f04f 0874 	mov.w	r8, #116	; 0x74
1a0006de:	f803 8002 	strb.w	r8, [r3, r2]
1a0006e2:	1c4a      	adds	r2, r1, #1
1a0006e4:	b2d2      	uxtb	r2, r2
1a0006e6:	f04f 0e20 	mov.w	lr, #32
1a0006ea:	f803 e001 	strb.w	lr, [r3, r1]
    buffer[index_buff++] = 'e'; buffer[index_buff++] = 'x'; buffer[index_buff++] = 'e';
1a0006ee:	1c51      	adds	r1, r2, #1
1a0006f0:	b2c9      	uxtb	r1, r1
1a0006f2:	f04f 0c65 	mov.w	ip, #101	; 0x65
1a0006f6:	f803 c002 	strb.w	ip, [r3, r2]
1a0006fa:	1c4a      	adds	r2, r1, #1
1a0006fc:	b2d2      	uxtb	r2, r2
1a0006fe:	2778      	movs	r7, #120	; 0x78
1a000700:	545f      	strb	r7, [r3, r1]
1a000702:	1c51      	adds	r1, r2, #1
1a000704:	b2c9      	uxtb	r1, r1
1a000706:	f803 c002 	strb.w	ip, [r3, r2]
    buffer[index_buff++] = 'c'; buffer[index_buff++] = 'u'; buffer[index_buff++] = 't';
1a00070a:	1c4a      	adds	r2, r1, #1
1a00070c:	b2d2      	uxtb	r2, r2
1a00070e:	2763      	movs	r7, #99	; 0x63
1a000710:	545f      	strb	r7, [r3, r1]
1a000712:	1c51      	adds	r1, r2, #1
1a000714:	b2c9      	uxtb	r1, r1
1a000716:	f803 9002 	strb.w	r9, [r3, r2]
1a00071a:	1c4a      	adds	r2, r1, #1
1a00071c:	b2d2      	uxtb	r2, r2
1a00071e:	f803 8001 	strb.w	r8, [r3, r1]
    buffer[index_buff++] = 'e'; buffer[index_buff++] = ' '; buffer[index_buff++] = 'c';
1a000722:	1c51      	adds	r1, r2, #1
1a000724:	b2c9      	uxtb	r1, r1
1a000726:	f803 c002 	strb.w	ip, [r3, r2]
1a00072a:	1c4a      	adds	r2, r1, #1
1a00072c:	b2d2      	uxtb	r2, r2
1a00072e:	f803 e001 	strb.w	lr, [r3, r1]
1a000732:	1c51      	adds	r1, r2, #1
1a000734:	b2c9      	uxtb	r1, r1
1a000736:	549f      	strb	r7, [r3, r2]
    buffer[index_buff++] = 'o'; buffer[index_buff++] = 'm'; buffer[index_buff++] = 'm';
1a000738:	1c4a      	adds	r2, r1, #1
1a00073a:	b2d2      	uxtb	r2, r2
1a00073c:	545e      	strb	r6, [r3, r1]
1a00073e:	1c51      	adds	r1, r2, #1
1a000740:	b2c9      	uxtb	r1, r1
1a000742:	266d      	movs	r6, #109	; 0x6d
1a000744:	549e      	strb	r6, [r3, r2]
1a000746:	1c4a      	adds	r2, r1, #1
1a000748:	b2d2      	uxtb	r2, r2
1a00074a:	545e      	strb	r6, [r3, r1]
    buffer[index_buff++] = 'a'; buffer[index_buff++] = 'n'; buffer[index_buff++] = 'd';
1a00074c:	1c51      	adds	r1, r2, #1
1a00074e:	b2c9      	uxtb	r1, r1
1a000750:	2661      	movs	r6, #97	; 0x61
1a000752:	549e      	strb	r6, [r3, r2]
1a000754:	1c4a      	adds	r2, r1, #1
1a000756:	b2d2      	uxtb	r2, r2
1a000758:	545d      	strb	r5, [r3, r1]
1a00075a:	1c51      	adds	r1, r2, #1
1a00075c:	b2c9      	uxtb	r1, r1
1a00075e:	549c      	strb	r4, [r3, r2]
    buffer[index_buff++] = '\r'; buffer[index_buff++] = '\n';
1a000760:	1c4a      	adds	r2, r1, #1
1a000762:	b2d2      	uxtb	r2, r2
1a000764:	240d      	movs	r4, #13
1a000766:	545c      	strb	r4, [r3, r1]
1a000768:	1c51      	adds	r1, r2, #1
1a00076a:	7001      	strb	r1, [r0, #0]
1a00076c:	210a      	movs	r1, #10
1a00076e:	5499      	strb	r1, [r3, r2]
1a000770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a000774:	40085000 	.word	0x40085000
1a000778:	100000c3 	.word	0x100000c3
1a00077c:	100000b8 	.word	0x100000b8
1a000780:	100000a4 	.word	0x100000a4
1a000784:	100000c0 	.word	0x100000c0

1a000788 <ConfigurarUART>:
}

void ConfigurarUART(LPC_USART_T *pUART, uint8_t enRBRInt)
{
1a000788:	b538      	push	{r3, r4, r5, lr}
1a00078a:	4604      	mov	r4, r0
1a00078c:	460d      	mov	r5, r1
    Chip_UART_Init(pUART);
1a00078e:	f000 fd35 	bl	1a0011fc <Chip_UART_Init>
    pUART->LCR = UART_LCR_DLAB_EN | UART_LCR_SBS_1BIT | UART_LCR_WLEN8;
1a000792:	2383      	movs	r3, #131	; 0x83
1a000794:	60e3      	str	r3, [r4, #12]

    // Configuro mi divisor principal, que será 332 = 0x14C
    pUART->DLM = 0x1;
1a000796:	2301      	movs	r3, #1
1a000798:	6063      	str	r3, [r4, #4]
    pUART->DLL = 0x4C;
1a00079a:	224c      	movs	r2, #76	; 0x4c
1a00079c:	6022      	str	r2, [r4, #0]

    // Habilito la transmisión de datos
    pUART->TER2 = 0x01;
1a00079e:	65e3      	str	r3, [r4, #92]	; 0x5c

    // Deshabilito la configuración de divisores, por lo que dejo que se empiece a recibir y transmitir.
    pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0007a0:	68e3      	ldr	r3, [r4, #12]
1a0007a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0007a6:	60e3      	str	r3, [r4, #12]

    if(enRBRInt)
1a0007a8:	b10d      	cbz	r5, 1a0007ae <ConfigurarUART+0x26>
        pUART->IER = UART_IER_RBRINT;
1a0007aa:	2301      	movs	r3, #1
1a0007ac:	6063      	str	r3, [r4, #4]
1a0007ae:	bd38      	pop	{r3, r4, r5, pc}

1a0007b0 <UARTDisponible>:
}

uint8_t UARTDisponible(LPC_USART_T *pUART)
{
    if(pUART->LSR & UART_LSR_TEMT) return 1;
1a0007b0:	6943      	ldr	r3, [r0, #20]
1a0007b2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0007b6:	d101      	bne.n	1a0007bc <UARTDisponible+0xc>
    else return 0;
1a0007b8:	2000      	movs	r0, #0
}
1a0007ba:	4770      	bx	lr
    if(pUART->LSR & UART_LSR_TEMT) return 1;
1a0007bc:	2001      	movs	r0, #1
1a0007be:	4770      	bx	lr

1a0007c0 <UARTLeerByte>:

uint8_t UARTLeerByte(LPC_USART_T *pUART, uint8_t* data, uint8_t* error)
{
    uint8_t hayDatoRecibido = 0;
    if(pUART->LSR & UART_LSR_RDR)
1a0007c0:	6943      	ldr	r3, [r0, #20]
1a0007c2:	f013 0f01 	tst.w	r3, #1
1a0007c6:	d00d      	beq.n	1a0007e4 <UARTLeerByte+0x24>
    {
        hayDatoRecibido = 1;
        if(pUART->LSR & (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE | UART_LSR_RXFE | UART_LSR_TXFE))
1a0007c8:	6943      	ldr	r3, [r0, #20]
1a0007ca:	f413 7fc7 	tst.w	r3, #398	; 0x18e
1a0007ce:	d103      	bne.n	1a0007d8 <UARTLeerByte+0x18>
            *error = pUART->LSR & 0x19E;
        else
            *data = pUART->RBR & UART_RBR_MASKBIT;
1a0007d0:	6803      	ldr	r3, [r0, #0]
1a0007d2:	700b      	strb	r3, [r1, #0]
        hayDatoRecibido = 1;
1a0007d4:	2001      	movs	r0, #1
1a0007d6:	4770      	bx	lr
            *error = pUART->LSR & 0x19E;
1a0007d8:	6943      	ldr	r3, [r0, #20]
1a0007da:	f003 039e 	and.w	r3, r3, #158	; 0x9e
1a0007de:	7013      	strb	r3, [r2, #0]
        hayDatoRecibido = 1;
1a0007e0:	2001      	movs	r0, #1
1a0007e2:	4770      	bx	lr
    uint8_t hayDatoRecibido = 0;
1a0007e4:	2000      	movs	r0, #0
    }

    return hayDatoRecibido;
}
1a0007e6:	4770      	bx	lr

1a0007e8 <UARTEscribirByte>:

void UARTEscribirByte(LPC_USART_T *pUART, uint8_t data)
{
1a0007e8:	b538      	push	{r3, r4, r5, lr}
1a0007ea:	4604      	mov	r4, r0
1a0007ec:	460d      	mov	r5, r1
    while(!UARTDisponible(pUART));
1a0007ee:	4620      	mov	r0, r4
1a0007f0:	f7ff ffde 	bl	1a0007b0 <UARTDisponible>
1a0007f4:	2800      	cmp	r0, #0
1a0007f6:	d0fa      	beq.n	1a0007ee <UARTEscribirByte+0x6>
    pUART->THR = data;
1a0007f8:	6025      	str	r5, [r4, #0]
1a0007fa:	bd38      	pop	{r3, r4, r5, pc}

1a0007fc <UARTEscribirString>:
}

void UARTEscribirString(LPC_USART_T *pUART, char* string)
{
1a0007fc:	b538      	push	{r3, r4, r5, lr}
1a0007fe:	4605      	mov	r5, r0
1a000800:	460c      	mov	r4, r1
    for(char* p = string; *p != 0; p++)
1a000802:	e003      	b.n	1a00080c <UARTEscribirString+0x10>
        UARTEscribirByte(pUART, (uint8_t)*p);
1a000804:	4628      	mov	r0, r5
1a000806:	f7ff ffef 	bl	1a0007e8 <UARTEscribirByte>
    for(char* p = string; *p != 0; p++)
1a00080a:	3401      	adds	r4, #1
1a00080c:	7821      	ldrb	r1, [r4, #0]
1a00080e:	2900      	cmp	r1, #0
1a000810:	d1f8      	bne.n	1a000804 <UARTEscribirString+0x8>
}
1a000812:	bd38      	pop	{r3, r4, r5, pc}

1a000814 <EnviarComandoAT>:

void EnviarComandoAT(LPC_USART_T *pUART_MODEM, char* AT)
{
1a000814:	b570      	push	{r4, r5, r6, lr}
1a000816:	b082      	sub	sp, #8
1a000818:	4606      	mov	r6, r0
1a00081a:	460d      	mov	r5, r1
    uint8_t resultado = 0;
    uint8_t dato = 0;
1a00081c:	2300      	movs	r3, #0
1a00081e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t resError = 0;
1a000822:	f88d 3006 	strb.w	r3, [sp, #6]
    
    while(UARTLeerByte(pUART_MODEM, &dato, &resError));
1a000826:	f10d 0206 	add.w	r2, sp, #6
1a00082a:	f10d 0107 	add.w	r1, sp, #7
1a00082e:	4630      	mov	r0, r6
1a000830:	f7ff ffc6 	bl	1a0007c0 <UARTLeerByte>
1a000834:	4604      	mov	r4, r0
1a000836:	2800      	cmp	r0, #0
1a000838:	d1f5      	bne.n	1a000826 <EnviarComandoAT+0x12>

    for(uint8_t i = 0; i < strlen(AT); i++)
1a00083a:	4628      	mov	r0, r5
1a00083c:	f001 fe40 	bl	1a0024c0 <strlen>
1a000840:	4284      	cmp	r4, r0
1a000842:	d208      	bcs.n	1a000856 <EnviarComandoAT+0x42>
    {
        if(AT[i] == '?')
1a000844:	5d2b      	ldrb	r3, [r5, r4]
1a000846:	2b3f      	cmp	r3, #63	; 0x3f
1a000848:	d002      	beq.n	1a000850 <EnviarComandoAT+0x3c>
    for(uint8_t i = 0; i < strlen(AT); i++)
1a00084a:	3401      	adds	r4, #1
1a00084c:	b2e4      	uxtb	r4, r4
1a00084e:	e7f4      	b.n	1a00083a <EnviarComandoAT+0x26>
        {
            esConsulta = 1;
1a000850:	2201      	movs	r2, #1
1a000852:	4b04      	ldr	r3, [pc, #16]	; (1a000864 <EnviarComandoAT+0x50>)
1a000854:	701a      	strb	r2, [r3, #0]
            break;
        }
    }

    UARTEscribirString(pUART_MODEM, AT);
1a000856:	4629      	mov	r1, r5
1a000858:	4630      	mov	r0, r6
1a00085a:	f7ff ffcf 	bl	1a0007fc <UARTEscribirString>
}
1a00085e:	b002      	add	sp, #8
1a000860:	bd70      	pop	{r4, r5, r6, pc}
1a000862:	bf00      	nop
1a000864:	100000b8 	.word	0x100000b8

1a000868 <UART2_IRQHandler>:

void UART2_IRQHandler(void)
{
1a000868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t dato = USB_UART->RBR & UART_RBR_MASKBIT;
1a00086a:	4b85      	ldr	r3, [pc, #532]	; (1a000a80 <UART2_IRQHandler+0x218>)
1a00086c:	681c      	ldr	r4, [r3, #0]

    if(dato != 0)
1a00086e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
1a000872:	d028      	beq.n	1a0008c6 <UART2_IRQHandler+0x5e>
        *(buffer_prueba+indexBuffPrueba++) = dato;
1a000874:	4b83      	ldr	r3, [pc, #524]	; (1a000a84 <UART2_IRQHandler+0x21c>)
1a000876:	6819      	ldr	r1, [r3, #0]
1a000878:	4a83      	ldr	r2, [pc, #524]	; (1a000a88 <UART2_IRQHandler+0x220>)
1a00087a:	6813      	ldr	r3, [r2, #0]
1a00087c:	1c58      	adds	r0, r3, #1
1a00087e:	6010      	str	r0, [r2, #0]
1a000880:	54cc      	strb	r4, [r1, r3]
        USB_UART->THR = 'S';
        
        memset(buffer_prueba, 0, 100);
    }

    if(dato == 0x00)
1a000882:	b914      	cbnz	r4, 1a00088a <UART2_IRQHandler+0x22>
        esFn = 1;
1a000884:	2201      	movs	r2, #1
1a000886:	4b81      	ldr	r3, [pc, #516]	; (1a000a8c <UART2_IRQHandler+0x224>)
1a000888:	701a      	strb	r2, [r3, #0]
    if(esFn && dato == 0x3C)
1a00088a:	4b80      	ldr	r3, [pc, #512]	; (1a000a8c <UART2_IRQHandler+0x224>)
1a00088c:	781d      	ldrb	r5, [r3, #0]
1a00088e:	b10d      	cbz	r5, 1a000894 <UART2_IRQHandler+0x2c>
1a000890:	2c3c      	cmp	r4, #60	; 0x3c
1a000892:	d03a      	beq.n	1a00090a <UART2_IRQHandler+0xa2>
            *(buffer + 26) = '\r';
            *(buffer + 27) = '\n';
            *(buffer + 28) = 0;
        }
    }
    else if(modoAT)
1a000894:	4b7e      	ldr	r3, [pc, #504]	; (1a000a90 <UART2_IRQHandler+0x228>)
1a000896:	781b      	ldrb	r3, [r3, #0]
1a000898:	b1a3      	cbz	r3, 1a0008c4 <UART2_IRQHandler+0x5c>
    {
        if(esFn)
1a00089a:	b99d      	cbnz	r5, 1a0008c4 <UART2_IRQHandler+0x5c>
        }
        else
        {
            uint8_t index_AT = 0;

            index_buff = 1;
1a00089c:	2201      	movs	r2, #1
1a00089e:	4b7d      	ldr	r3, [pc, #500]	; (1a000a94 <UART2_IRQHandler+0x22c>)
1a0008a0:	701a      	strb	r2, [r3, #0]

            *buffer = dato;
1a0008a2:	4b7d      	ldr	r3, [pc, #500]	; (1a000a98 <UART2_IRQHandler+0x230>)
1a0008a4:	681b      	ldr	r3, [r3, #0]
1a0008a6:	701c      	strb	r4, [r3, #0]
            *(comandoAT + index_AT++) = dato;
1a0008a8:	4a7c      	ldr	r2, [pc, #496]	; (1a000a9c <UART2_IRQHandler+0x234>)
1a0008aa:	6811      	ldr	r1, [r2, #0]
1a0008ac:	700c      	strb	r4, [r1, #0]

            if(dato == '\b')
1a0008ae:	2c08      	cmp	r4, #8
1a0008b0:	d06a      	beq.n	1a000988 <UART2_IRQHandler+0x120>
            *(comandoAT + index_AT++) = dato;
1a0008b2:	2201      	movs	r2, #1

                *(buffer + index_buff++) = 0x20;
                *(buffer + index_buff++) = 0x08;
            }

            if(dato == '\r')
1a0008b4:	2c0d      	cmp	r4, #13
1a0008b6:	d074      	beq.n	1a0009a2 <UART2_IRQHandler+0x13a>
                while(!textoEnviado && modoAT);

                textoEnviado = 0;
            }
            
            *(buffer + index_buff) = 0;
1a0008b8:	4b76      	ldr	r3, [pc, #472]	; (1a000a94 <UART2_IRQHandler+0x22c>)
1a0008ba:	781b      	ldrb	r3, [r3, #0]
1a0008bc:	4a76      	ldr	r2, [pc, #472]	; (1a000a98 <UART2_IRQHandler+0x230>)
1a0008be:	6812      	ldr	r2, [r2, #0]
1a0008c0:	2100      	movs	r1, #0
1a0008c2:	54d1      	strb	r1, [r2, r3]
1a0008c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        indexBuffPrueba = 0;
1a0008c6:	2200      	movs	r2, #0
1a0008c8:	4b6f      	ldr	r3, [pc, #444]	; (1a000a88 <UART2_IRQHandler+0x220>)
1a0008ca:	601a      	str	r2, [r3, #0]
        while(!UARTDisponible(USB_UART));
1a0008cc:	486c      	ldr	r0, [pc, #432]	; (1a000a80 <UART2_IRQHandler+0x218>)
1a0008ce:	f7ff ff6f 	bl	1a0007b0 <UARTDisponible>
1a0008d2:	2800      	cmp	r0, #0
1a0008d4:	d0fa      	beq.n	1a0008cc <UART2_IRQHandler+0x64>
        USB_UART->THR = 'Y';
1a0008d6:	2259      	movs	r2, #89	; 0x59
1a0008d8:	4b69      	ldr	r3, [pc, #420]	; (1a000a80 <UART2_IRQHandler+0x218>)
1a0008da:	601a      	str	r2, [r3, #0]
        while(!UARTDisponible(USB_UART));
1a0008dc:	4868      	ldr	r0, [pc, #416]	; (1a000a80 <UART2_IRQHandler+0x218>)
1a0008de:	f7ff ff67 	bl	1a0007b0 <UARTDisponible>
1a0008e2:	2800      	cmp	r0, #0
1a0008e4:	d0fa      	beq.n	1a0008dc <UART2_IRQHandler+0x74>
        USB_UART->THR = 'E';
1a0008e6:	2245      	movs	r2, #69	; 0x45
1a0008e8:	4b65      	ldr	r3, [pc, #404]	; (1a000a80 <UART2_IRQHandler+0x218>)
1a0008ea:	601a      	str	r2, [r3, #0]
        while(!UARTDisponible(USB_UART));
1a0008ec:	4864      	ldr	r0, [pc, #400]	; (1a000a80 <UART2_IRQHandler+0x218>)
1a0008ee:	f7ff ff5f 	bl	1a0007b0 <UARTDisponible>
1a0008f2:	2800      	cmp	r0, #0
1a0008f4:	d0fa      	beq.n	1a0008ec <UART2_IRQHandler+0x84>
        USB_UART->THR = 'S';
1a0008f6:	2253      	movs	r2, #83	; 0x53
1a0008f8:	4b61      	ldr	r3, [pc, #388]	; (1a000a80 <UART2_IRQHandler+0x218>)
1a0008fa:	601a      	str	r2, [r3, #0]
        memset(buffer_prueba, 0, 100);
1a0008fc:	2264      	movs	r2, #100	; 0x64
1a0008fe:	2100      	movs	r1, #0
1a000900:	4b60      	ldr	r3, [pc, #384]	; (1a000a84 <UART2_IRQHandler+0x21c>)
1a000902:	6818      	ldr	r0, [r3, #0]
1a000904:	f001 fb70 	bl	1a001fe8 <memset>
1a000908:	e7bb      	b.n	1a000882 <UART2_IRQHandler+0x1a>
        esFn = 0;
1a00090a:	2100      	movs	r1, #0
1a00090c:	7019      	strb	r1, [r3, #0]
        modoAT = !modoAT;
1a00090e:	4b60      	ldr	r3, [pc, #384]	; (1a000a90 <UART2_IRQHandler+0x228>)
1a000910:	781a      	ldrb	r2, [r3, #0]
1a000912:	fab2 f282 	clz	r2, r2
1a000916:	0952      	lsrs	r2, r2, #5
1a000918:	701a      	strb	r2, [r3, #0]
        *buffer = 0x1B;
1a00091a:	4b5f      	ldr	r3, [pc, #380]	; (1a000a98 <UART2_IRQHandler+0x230>)
1a00091c:	681b      	ldr	r3, [r3, #0]
1a00091e:	241b      	movs	r4, #27
1a000920:	701c      	strb	r4, [r3, #0]
        *(buffer + 1) = '[';
1a000922:	205b      	movs	r0, #91	; 0x5b
1a000924:	7058      	strb	r0, [r3, #1]
        *(buffer + 2) = '2';
1a000926:	2532      	movs	r5, #50	; 0x32
1a000928:	709d      	strb	r5, [r3, #2]
        *(buffer + 3) = 'J';
1a00092a:	254a      	movs	r5, #74	; 0x4a
1a00092c:	70dd      	strb	r5, [r3, #3]
        *(buffer + 4) = 0x1B;
1a00092e:	711c      	strb	r4, [r3, #4]
        *(buffer + 5) = '[';
1a000930:	7158      	strb	r0, [r3, #5]
        *(buffer + 6) = '0';
1a000932:	2030      	movs	r0, #48	; 0x30
1a000934:	7198      	strb	r0, [r3, #6]
        *(buffer + 7) = ';';
1a000936:	243b      	movs	r4, #59	; 0x3b
1a000938:	71dc      	strb	r4, [r3, #7]
        *(buffer + 8) = '0';
1a00093a:	7218      	strb	r0, [r3, #8]
        *(buffer + 9) = 'f';
1a00093c:	2066      	movs	r0, #102	; 0x66
1a00093e:	7258      	strb	r0, [r3, #9]
        *(buffer + 10) = 0;
1a000940:	7299      	strb	r1, [r3, #10]
        if(modoAT)
1a000942:	2a00      	cmp	r2, #0
1a000944:	d0be      	beq.n	1a0008c4 <UART2_IRQHandler+0x5c>
            *(buffer + 10) = '*';
1a000946:	202a      	movs	r0, #42	; 0x2a
1a000948:	7298      	strb	r0, [r3, #10]
            *(buffer + 11) = ' ';
1a00094a:	2120      	movs	r1, #32
1a00094c:	72d9      	strb	r1, [r3, #11]
            *(buffer + 12) = 'M';
1a00094e:	224d      	movs	r2, #77	; 0x4d
1a000950:	731a      	strb	r2, [r3, #12]
            *(buffer + 13) = 'o';
1a000952:	226f      	movs	r2, #111	; 0x6f
1a000954:	735a      	strb	r2, [r3, #13]
            *(buffer + 14) = 'd'; 
1a000956:	2464      	movs	r4, #100	; 0x64
1a000958:	739c      	strb	r4, [r3, #14]
            *(buffer + 15) = 'o';
1a00095a:	73da      	strb	r2, [r3, #15]
            *(buffer + 16) = ' ';
1a00095c:	7419      	strb	r1, [r3, #16]
            *(buffer + 17) = 'c';
1a00095e:	2463      	movs	r4, #99	; 0x63
1a000960:	745c      	strb	r4, [r3, #17]
            *(buffer + 18) = 'o';
1a000962:	749a      	strb	r2, [r3, #18]
            *(buffer + 19) = 'n';
1a000964:	246e      	movs	r4, #110	; 0x6e
1a000966:	74dc      	strb	r4, [r3, #19]
            *(buffer + 20) = 's';
1a000968:	2473      	movs	r4, #115	; 0x73
1a00096a:	751c      	strb	r4, [r3, #20]
            *(buffer + 21) = 'o';
1a00096c:	755a      	strb	r2, [r3, #21]
            *(buffer + 22) = 'l';
1a00096e:	226c      	movs	r2, #108	; 0x6c
1a000970:	759a      	strb	r2, [r3, #22]
            *(buffer + 23) = 'a';
1a000972:	2261      	movs	r2, #97	; 0x61
1a000974:	75da      	strb	r2, [r3, #23]
            *(buffer + 24) = ' ';
1a000976:	7619      	strb	r1, [r3, #24]
            *(buffer + 25) = '*';
1a000978:	7658      	strb	r0, [r3, #25]
            *(buffer + 26) = '\r';
1a00097a:	220d      	movs	r2, #13
1a00097c:	769a      	strb	r2, [r3, #26]
            *(buffer + 27) = '\n';
1a00097e:	220a      	movs	r2, #10
1a000980:	76da      	strb	r2, [r3, #27]
            *(buffer + 28) = 0;
1a000982:	2200      	movs	r2, #0
1a000984:	771a      	strb	r2, [r3, #28]
1a000986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    *(comandoAT + --index_AT) = 0;
1a000988:	2200      	movs	r2, #0
1a00098a:	700a      	strb	r2, [r1, #0]
                    *(comandoAT + --index_AT) = 0;
1a00098c:	f881 20ff 	strb.w	r2, [r1, #255]	; 0xff
                *(buffer + index_buff++) = 0x20;
1a000990:	2220      	movs	r2, #32
1a000992:	705a      	strb	r2, [r3, #1]
                *(buffer + index_buff++) = 0x08;
1a000994:	2003      	movs	r0, #3
1a000996:	4a3f      	ldr	r2, [pc, #252]	; (1a000a94 <UART2_IRQHandler+0x22c>)
1a000998:	7010      	strb	r0, [r2, #0]
1a00099a:	2208      	movs	r2, #8
1a00099c:	709a      	strb	r2, [r3, #2]
1a00099e:	22ff      	movs	r2, #255	; 0xff
1a0009a0:	e788      	b.n	1a0008b4 <UART2_IRQHandler+0x4c>
                *(comandoAT + index_AT++) = '\n';
1a0009a2:	1c50      	adds	r0, r2, #1
1a0009a4:	b2c0      	uxtb	r0, r0
1a0009a6:	240a      	movs	r4, #10
1a0009a8:	548c      	strb	r4, [r1, r2]
                *(comandoAT + index_AT) = 0;
1a0009aa:	2200      	movs	r2, #0
1a0009ac:	540a      	strb	r2, [r1, r0]
                *(buffer + index_buff++) = '\n';
1a0009ae:	4839      	ldr	r0, [pc, #228]	; (1a000a94 <UART2_IRQHandler+0x22c>)
1a0009b0:	7802      	ldrb	r2, [r0, #0]
1a0009b2:	1c56      	adds	r6, r2, #1
1a0009b4:	7006      	strb	r6, [r0, #0]
1a0009b6:	549c      	strb	r4, [r3, r2]
                EnviarComandoAT(MODEM_UART, comandoAT);
1a0009b8:	4839      	ldr	r0, [pc, #228]	; (1a000aa0 <UART2_IRQHandler+0x238>)
1a0009ba:	f7ff ff2b 	bl	1a000814 <EnviarComandoAT>
                for(uint8_t i = 0; i < strlen(comandoAT); i++)
1a0009be:	e002      	b.n	1a0009c6 <UART2_IRQHandler+0x15e>
                        *(comandoAT + i) = toupper(*(comandoAT + i));
1a0009c0:	700a      	strb	r2, [r1, #0]
                for(uint8_t i = 0; i < strlen(comandoAT); i++)
1a0009c2:	3501      	adds	r5, #1
1a0009c4:	b2ed      	uxtb	r5, r5
1a0009c6:	4b35      	ldr	r3, [pc, #212]	; (1a000a9c <UART2_IRQHandler+0x234>)
1a0009c8:	681c      	ldr	r4, [r3, #0]
1a0009ca:	4620      	mov	r0, r4
1a0009cc:	f001 fd78 	bl	1a0024c0 <strlen>
1a0009d0:	4285      	cmp	r5, r0
1a0009d2:	d20c      	bcs.n	1a0009ee <UART2_IRQHandler+0x186>
                    if(isalpha(comandoAT[i]))
1a0009d4:	1961      	adds	r1, r4, r5
1a0009d6:	5d62      	ldrb	r2, [r4, r5]
1a0009d8:	4b32      	ldr	r3, [pc, #200]	; (1a000aa4 <UART2_IRQHandler+0x23c>)
1a0009da:	681b      	ldr	r3, [r3, #0]
1a0009dc:	4413      	add	r3, r2
1a0009de:	785b      	ldrb	r3, [r3, #1]
1a0009e0:	f013 0303 	ands.w	r3, r3, #3
1a0009e4:	d0ed      	beq.n	1a0009c2 <UART2_IRQHandler+0x15a>
                        *(comandoAT + i) = toupper(*(comandoAT + i));
1a0009e6:	2b02      	cmp	r3, #2
1a0009e8:	d1ea      	bne.n	1a0009c0 <UART2_IRQHandler+0x158>
1a0009ea:	3a20      	subs	r2, #32
1a0009ec:	e7e8      	b.n	1a0009c0 <UART2_IRQHandler+0x158>
                if(!strcmp(comandoAT, "AT+RESET\r\n"))
1a0009ee:	492e      	ldr	r1, [pc, #184]	; (1a000aa8 <UART2_IRQHandler+0x240>)
1a0009f0:	4620      	mov	r0, r4
1a0009f2:	f001 fbf9 	bl	1a0021e8 <strcmp>
1a0009f6:	bb80      	cbnz	r0, 1a000a5a <UART2_IRQHandler+0x1f2>
                    modoAT = 0;
1a0009f8:	4b25      	ldr	r3, [pc, #148]	; (1a000a90 <UART2_IRQHandler+0x228>)
1a0009fa:	7018      	strb	r0, [r3, #0]
                    *(buffer + index_buff++) = 0x1B;
1a0009fc:	4b26      	ldr	r3, [pc, #152]	; (1a000a98 <UART2_IRQHandler+0x230>)
1a0009fe:	681b      	ldr	r3, [r3, #0]
1a000a00:	4d24      	ldr	r5, [pc, #144]	; (1a000a94 <UART2_IRQHandler+0x22c>)
1a000a02:	782a      	ldrb	r2, [r5, #0]
1a000a04:	1c51      	adds	r1, r2, #1
1a000a06:	b2c9      	uxtb	r1, r1
1a000a08:	271b      	movs	r7, #27
1a000a0a:	549f      	strb	r7, [r3, r2]
                    *(buffer + index_buff++) = '[';
1a000a0c:	1c4a      	adds	r2, r1, #1
1a000a0e:	b2d2      	uxtb	r2, r2
1a000a10:	265b      	movs	r6, #91	; 0x5b
1a000a12:	545e      	strb	r6, [r3, r1]
                    *(buffer + index_buff++) = '2';
1a000a14:	1c51      	adds	r1, r2, #1
1a000a16:	b2c9      	uxtb	r1, r1
1a000a18:	f04f 0e32 	mov.w	lr, #50	; 0x32
1a000a1c:	f803 e002 	strb.w	lr, [r3, r2]
                    *(buffer + index_buff++) = 'J';
1a000a20:	1c4a      	adds	r2, r1, #1
1a000a22:	b2d2      	uxtb	r2, r2
1a000a24:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
1a000a28:	f803 e001 	strb.w	lr, [r3, r1]
                    *(buffer + index_buff++) = 0x1B;
1a000a2c:	1c51      	adds	r1, r2, #1
1a000a2e:	b2c9      	uxtb	r1, r1
1a000a30:	549f      	strb	r7, [r3, r2]
                    *(buffer + index_buff++) = '[';
1a000a32:	1c4a      	adds	r2, r1, #1
1a000a34:	b2d2      	uxtb	r2, r2
1a000a36:	545e      	strb	r6, [r3, r1]
                    *(buffer + index_buff++) = '0';
1a000a38:	1c51      	adds	r1, r2, #1
1a000a3a:	b2c9      	uxtb	r1, r1
1a000a3c:	2630      	movs	r6, #48	; 0x30
1a000a3e:	549e      	strb	r6, [r3, r2]
                    *(buffer + index_buff++) = ';';
1a000a40:	1c4a      	adds	r2, r1, #1
1a000a42:	b2d2      	uxtb	r2, r2
1a000a44:	273b      	movs	r7, #59	; 0x3b
1a000a46:	545f      	strb	r7, [r3, r1]
                    *(buffer + index_buff++) = '0';
1a000a48:	1c51      	adds	r1, r2, #1
1a000a4a:	b2c9      	uxtb	r1, r1
1a000a4c:	549e      	strb	r6, [r3, r2]
                    *(buffer + index_buff++) = 'f';
1a000a4e:	1c4a      	adds	r2, r1, #1
1a000a50:	b2d2      	uxtb	r2, r2
1a000a52:	702a      	strb	r2, [r5, #0]
1a000a54:	2566      	movs	r5, #102	; 0x66
1a000a56:	545d      	strb	r5, [r3, r1]
                    *(buffer + index_buff) = 0;
1a000a58:	5498      	strb	r0, [r3, r2]
                memset(comandoAT, 0, 50);
1a000a5a:	2232      	movs	r2, #50	; 0x32
1a000a5c:	2100      	movs	r1, #0
1a000a5e:	4620      	mov	r0, r4
1a000a60:	f001 fac2 	bl	1a001fe8 <memset>
                LPC_TIMER1->TCR = TIMER_ENABLE;
1a000a64:	2201      	movs	r2, #1
1a000a66:	4b11      	ldr	r3, [pc, #68]	; (1a000aac <UART2_IRQHandler+0x244>)
1a000a68:	605a      	str	r2, [r3, #4]
                while(!textoEnviado && modoAT);
1a000a6a:	4b11      	ldr	r3, [pc, #68]	; (1a000ab0 <UART2_IRQHandler+0x248>)
1a000a6c:	781b      	ldrb	r3, [r3, #0]
1a000a6e:	b91b      	cbnz	r3, 1a000a78 <UART2_IRQHandler+0x210>
1a000a70:	4b07      	ldr	r3, [pc, #28]	; (1a000a90 <UART2_IRQHandler+0x228>)
1a000a72:	781b      	ldrb	r3, [r3, #0]
1a000a74:	2b00      	cmp	r3, #0
1a000a76:	d1f8      	bne.n	1a000a6a <UART2_IRQHandler+0x202>
                textoEnviado = 0;
1a000a78:	2200      	movs	r2, #0
1a000a7a:	4b0d      	ldr	r3, [pc, #52]	; (1a000ab0 <UART2_IRQHandler+0x248>)
1a000a7c:	701a      	strb	r2, [r3, #0]
1a000a7e:	e71b      	b.n	1a0008b8 <UART2_IRQHandler+0x50>
1a000a80:	400c1000 	.word	0x400c1000
1a000a84:	100000a8 	.word	0x100000a8
1a000a88:	100000bc 	.word	0x100000bc
1a000a8c:	100000b9 	.word	0x100000b9
1a000a90:	100000c1 	.word	0x100000c1
1a000a94:	100000c0 	.word	0x100000c0
1a000a98:	100000a4 	.word	0x100000a4
1a000a9c:	100000ac 	.word	0x100000ac
1a000aa0:	400c2000 	.word	0x400c2000
1a000aa4:	10000038 	.word	0x10000038
1a000aa8:	1a00259c 	.word	0x1a00259c
1a000aac:	40085000 	.word	0x40085000
1a000ab0:	100000c3 	.word	0x100000c3

1a000ab4 <UART3_IRQHandler>:
        }
    }
}

void UART3_IRQHandler(void)
{
1a000ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t dato = MODEM_UART->RBR & UART_RBR_MASKBIT;
1a000ab6:	4b6a      	ldr	r3, [pc, #424]	; (1a000c60 <UART3_IRQHandler+0x1ac>)
1a000ab8:	681c      	ldr	r4, [r3, #0]
1a000aba:	b2e4      	uxtb	r4, r4
    static uint8_t saltosLinea = 0;

    LPC_TIMER1->TCR = TIMER_RESET;
1a000abc:	2202      	movs	r2, #2
1a000abe:	f5a3 3374 	sub.w	r3, r3, #249856	; 0x3d000
1a000ac2:	605a      	str	r2, [r3, #4]
    
    if(modoAT)
1a000ac4:	4b67      	ldr	r3, [pc, #412]	; (1a000c64 <UART3_IRQHandler+0x1b0>)
1a000ac6:	781b      	ldrb	r3, [r3, #0]
1a000ac8:	b313      	cbz	r3, 1a000b10 <UART3_IRQHandler+0x5c>
    {
        if(dato == '\n')
1a000aca:	2c0a      	cmp	r4, #10
1a000acc:	d010      	beq.n	1a000af0 <UART3_IRQHandler+0x3c>
            saltosLinea++;

        if(esConsulta)
1a000ace:	4b66      	ldr	r3, [pc, #408]	; (1a000c68 <UART3_IRQHandler+0x1b4>)
1a000ad0:	781b      	ldrb	r3, [r3, #0]
1a000ad2:	b193      	cbz	r3, 1a000afa <UART3_IRQHandler+0x46>
        {
            if(saltosLinea == 2)
1a000ad4:	4b65      	ldr	r3, [pc, #404]	; (1a000c6c <UART3_IRQHandler+0x1b8>)
1a000ad6:	781b      	ldrb	r3, [r3, #0]
1a000ad8:	2b02      	cmp	r3, #2
1a000ada:	f040 8089 	bne.w	1a000bf0 <UART3_IRQHandler+0x13c>
            {
                saltosLinea = 0;
1a000ade:	2300      	movs	r3, #0
1a000ae0:	4a62      	ldr	r2, [pc, #392]	; (1a000c6c <UART3_IRQHandler+0x1b8>)
1a000ae2:	7013      	strb	r3, [r2, #0]
                textoEnviado = 1;
1a000ae4:	2101      	movs	r1, #1
1a000ae6:	4a62      	ldr	r2, [pc, #392]	; (1a000c70 <UART3_IRQHandler+0x1bc>)
1a000ae8:	7011      	strb	r1, [r2, #0]
                esConsulta = 0;
1a000aea:	4a5f      	ldr	r2, [pc, #380]	; (1a000c68 <UART3_IRQHandler+0x1b4>)
1a000aec:	7013      	strb	r3, [r2, #0]
1a000aee:	e07f      	b.n	1a000bf0 <UART3_IRQHandler+0x13c>
            saltosLinea++;
1a000af0:	4a5e      	ldr	r2, [pc, #376]	; (1a000c6c <UART3_IRQHandler+0x1b8>)
1a000af2:	7813      	ldrb	r3, [r2, #0]
1a000af4:	3301      	adds	r3, #1
1a000af6:	7013      	strb	r3, [r2, #0]
1a000af8:	e7e9      	b.n	1a000ace <UART3_IRQHandler+0x1a>
            }
        }
        else
        {
            if(saltosLinea == 1)
1a000afa:	4b5c      	ldr	r3, [pc, #368]	; (1a000c6c <UART3_IRQHandler+0x1b8>)
1a000afc:	781b      	ldrb	r3, [r3, #0]
1a000afe:	2b01      	cmp	r3, #1
1a000b00:	d176      	bne.n	1a000bf0 <UART3_IRQHandler+0x13c>
            {
                saltosLinea = 0;
1a000b02:	2200      	movs	r2, #0
1a000b04:	4b59      	ldr	r3, [pc, #356]	; (1a000c6c <UART3_IRQHandler+0x1b8>)
1a000b06:	701a      	strb	r2, [r3, #0]
                textoEnviado = 1;
1a000b08:	2201      	movs	r2, #1
1a000b0a:	4b59      	ldr	r3, [pc, #356]	; (1a000c70 <UART3_IRQHandler+0x1bc>)
1a000b0c:	701a      	strb	r2, [r3, #0]
1a000b0e:	e06f      	b.n	1a000bf0 <UART3_IRQHandler+0x13c>
            }
        }
    }
    else
    {
        if(MODEM_UART->LSR & (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE | UART_LSR_RXFE | UART_LSR_TXFE))
1a000b10:	4b53      	ldr	r3, [pc, #332]	; (1a000c60 <UART3_IRQHandler+0x1ac>)
1a000b12:	695b      	ldr	r3, [r3, #20]
1a000b14:	f413 7fc7 	tst.w	r3, #398	; 0x18e
1a000b18:	d057      	beq.n	1a000bca <UART3_IRQHandler+0x116>
        {
            uint8_t readError = MODEM_UART->LSR & 0x19E;
1a000b1a:	4b51      	ldr	r3, [pc, #324]	; (1a000c60 <UART3_IRQHandler+0x1ac>)
1a000b1c:	695d      	ldr	r5, [r3, #20]
1a000b1e:	b2ed      	uxtb	r5, r5
1a000b20:	f005 069e 	and.w	r6, r5, #158	; 0x9e
            
            if(LPC_TIMER0->MR[0] != 100)
1a000b24:	f5a3 3378 	sub.w	r3, r3, #253952	; 0x3e000
1a000b28:	699b      	ldr	r3, [r3, #24]
1a000b2a:	2b64      	cmp	r3, #100	; 0x64
1a000b2c:	d002      	beq.n	1a000b34 <UART3_IRQHandler+0x80>
                LPC_TIMER0->MR[0] = 100;
1a000b2e:	2264      	movs	r2, #100	; 0x64
1a000b30:	4b50      	ldr	r3, [pc, #320]	; (1a000c74 <UART3_IRQHandler+0x1c0>)
1a000b32:	619a      	str	r2, [r3, #24]
                
            if(readError & UART_LSR_OE)
1a000b34:	f015 0f02 	tst.w	r5, #2
1a000b38:	d119      	bne.n	1a000b6e <UART3_IRQHandler+0xba>
            {
                Led_On(RED_LED);
                memcpy(buffer, OVERRUN, 15);
            }
            if(readError & UART_LSR_PE)
1a000b3a:	f015 0f04 	tst.w	r5, #4
1a000b3e:	d125      	bne.n	1a000b8c <UART3_IRQHandler+0xd8>
            {
                Led_On(GREEN_LED);
                memcpy(buffer, PARITY, 14);
            }
            if(readError & UART_LSR_FE)
1a000b40:	f015 0f08 	tst.w	r5, #8
1a000b44:	d12f      	bne.n	1a000ba6 <UART3_IRQHandler+0xf2>
            {
                Led_On(RED_LED);
                Led_On(GREEN_LED);
                memcpy(buffer, FRAMING, 15);
            }
            if(readError & UART_LSR_RXFE)
1a000b46:	f016 0f80 	tst.w	r6, #128	; 0x80
1a000b4a:	d051      	beq.n	1a000bf0 <UART3_IRQHandler+0x13c>
            {
                Led_On(RGB_R_LED);
1a000b4c:	2000      	movs	r0, #0
1a000b4e:	f000 f95f 	bl	1a000e10 <Led_On>
                Led_On(RGB_B_LED);
1a000b52:	2002      	movs	r0, #2
1a000b54:	f000 f95c 	bl	1a000e10 <Led_On>
                memcpy(buffer, RXFIFO, 18);
1a000b58:	4b47      	ldr	r3, [pc, #284]	; (1a000c78 <UART3_IRQHandler+0x1c4>)
1a000b5a:	681e      	ldr	r6, [r3, #0]
1a000b5c:	4d47      	ldr	r5, [pc, #284]	; (1a000c7c <UART3_IRQHandler+0x1c8>)
1a000b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b60:	6030      	str	r0, [r6, #0]
1a000b62:	6071      	str	r1, [r6, #4]
1a000b64:	60b2      	str	r2, [r6, #8]
1a000b66:	60f3      	str	r3, [r6, #12]
1a000b68:	882b      	ldrh	r3, [r5, #0]
1a000b6a:	8233      	strh	r3, [r6, #16]
1a000b6c:	e040      	b.n	1a000bf0 <UART3_IRQHandler+0x13c>
                Led_On(RED_LED);
1a000b6e:	2003      	movs	r0, #3
1a000b70:	f000 f94e 	bl	1a000e10 <Led_On>
                memcpy(buffer, OVERRUN, 15);
1a000b74:	4b40      	ldr	r3, [pc, #256]	; (1a000c78 <UART3_IRQHandler+0x1c4>)
1a000b76:	681f      	ldr	r7, [r3, #0]
1a000b78:	4b41      	ldr	r3, [pc, #260]	; (1a000c80 <UART3_IRQHandler+0x1cc>)
1a000b7a:	cb07      	ldmia	r3!, {r0, r1, r2}
1a000b7c:	6038      	str	r0, [r7, #0]
1a000b7e:	6079      	str	r1, [r7, #4]
1a000b80:	60ba      	str	r2, [r7, #8]
1a000b82:	881a      	ldrh	r2, [r3, #0]
1a000b84:	789b      	ldrb	r3, [r3, #2]
1a000b86:	81ba      	strh	r2, [r7, #12]
1a000b88:	73bb      	strb	r3, [r7, #14]
1a000b8a:	e7d6      	b.n	1a000b3a <UART3_IRQHandler+0x86>
                Led_On(GREEN_LED);
1a000b8c:	2005      	movs	r0, #5
1a000b8e:	f000 f93f 	bl	1a000e10 <Led_On>
                memcpy(buffer, PARITY, 14);
1a000b92:	4b39      	ldr	r3, [pc, #228]	; (1a000c78 <UART3_IRQHandler+0x1c4>)
1a000b94:	681f      	ldr	r7, [r3, #0]
1a000b96:	4b3b      	ldr	r3, [pc, #236]	; (1a000c84 <UART3_IRQHandler+0x1d0>)
1a000b98:	cb07      	ldmia	r3!, {r0, r1, r2}
1a000b9a:	6038      	str	r0, [r7, #0]
1a000b9c:	6079      	str	r1, [r7, #4]
1a000b9e:	60ba      	str	r2, [r7, #8]
1a000ba0:	881b      	ldrh	r3, [r3, #0]
1a000ba2:	81bb      	strh	r3, [r7, #12]
1a000ba4:	e7cc      	b.n	1a000b40 <UART3_IRQHandler+0x8c>
                Led_On(RED_LED);
1a000ba6:	2003      	movs	r0, #3
1a000ba8:	f000 f932 	bl	1a000e10 <Led_On>
                Led_On(GREEN_LED);
1a000bac:	2005      	movs	r0, #5
1a000bae:	f000 f92f 	bl	1a000e10 <Led_On>
                memcpy(buffer, FRAMING, 15);
1a000bb2:	4b31      	ldr	r3, [pc, #196]	; (1a000c78 <UART3_IRQHandler+0x1c4>)
1a000bb4:	681d      	ldr	r5, [r3, #0]
1a000bb6:	4b34      	ldr	r3, [pc, #208]	; (1a000c88 <UART3_IRQHandler+0x1d4>)
1a000bb8:	cb07      	ldmia	r3!, {r0, r1, r2}
1a000bba:	6028      	str	r0, [r5, #0]
1a000bbc:	6069      	str	r1, [r5, #4]
1a000bbe:	60aa      	str	r2, [r5, #8]
1a000bc0:	881a      	ldrh	r2, [r3, #0]
1a000bc2:	789b      	ldrb	r3, [r3, #2]
1a000bc4:	81aa      	strh	r2, [r5, #12]
1a000bc6:	73ab      	strb	r3, [r5, #14]
1a000bc8:	e7bd      	b.n	1a000b46 <UART3_IRQHandler+0x92>
                memcpy(buffer, TXERR, 32);
            }
        }
        else
        {
            if(LPC_TIMER0->MR[0] != 25)
1a000bca:	4b2a      	ldr	r3, [pc, #168]	; (1a000c74 <UART3_IRQHandler+0x1c0>)
1a000bcc:	699b      	ldr	r3, [r3, #24]
1a000bce:	2b19      	cmp	r3, #25
1a000bd0:	d002      	beq.n	1a000bd8 <UART3_IRQHandler+0x124>
                LPC_TIMER0->MR[0] = 25;
1a000bd2:	2219      	movs	r2, #25
1a000bd4:	4b27      	ldr	r3, [pc, #156]	; (1a000c74 <UART3_IRQHandler+0x1c0>)
1a000bd6:	619a      	str	r2, [r3, #24]
            if(dato == 'q')
1a000bd8:	2c71      	cmp	r4, #113	; 0x71
1a000bda:	d016      	beq.n	1a000c0a <UART3_IRQHandler+0x156>
                }
                else contador += 1;

                Led_On(RGB_B_LED);
            }
            else if(dato == 'w')
1a000bdc:	2c77      	cmp	r4, #119	; 0x77
1a000bde:	d026      	beq.n	1a000c2e <UART3_IRQHandler+0x17a>
                }
                else contador -= 1;
                
                Led_On(RGB_R_LED);
            }
            else if(dato == 'e')
1a000be0:	2c65      	cmp	r4, #101	; 0x65
1a000be2:	d035      	beq.n	1a000c50 <UART3_IRQHandler+0x19c>
            {
                contador = 0;
                Led_On(RGB_G_LED);
            }

            buffer = numToString(contador);
1a000be4:	4b29      	ldr	r3, [pc, #164]	; (1a000c8c <UART3_IRQHandler+0x1d8>)
1a000be6:	7818      	ldrb	r0, [r3, #0]
1a000be8:	f7ff fbaa 	bl	1a000340 <numToString>
1a000bec:	4b22      	ldr	r3, [pc, #136]	; (1a000c78 <UART3_IRQHandler+0x1c4>)
1a000bee:	6018      	str	r0, [r3, #0]
        }
    }

    if(modoAT)
1a000bf0:	4b1c      	ldr	r3, [pc, #112]	; (1a000c64 <UART3_IRQHandler+0x1b0>)
1a000bf2:	781b      	ldrb	r3, [r3, #0]
1a000bf4:	b133      	cbz	r3, 1a000c04 <UART3_IRQHandler+0x150>
        *(buffer + index_buff++) = dato;
1a000bf6:	4b20      	ldr	r3, [pc, #128]	; (1a000c78 <UART3_IRQHandler+0x1c4>)
1a000bf8:	6819      	ldr	r1, [r3, #0]
1a000bfa:	4a25      	ldr	r2, [pc, #148]	; (1a000c90 <UART3_IRQHandler+0x1dc>)
1a000bfc:	7813      	ldrb	r3, [r2, #0]
1a000bfe:	1c58      	adds	r0, r3, #1
1a000c00:	7010      	strb	r0, [r2, #0]
1a000c02:	54cc      	strb	r4, [r1, r3]

    uint8_t idInterrupcion = MODEM_UART->IIR;
1a000c04:	4b16      	ldr	r3, [pc, #88]	; (1a000c60 <UART3_IRQHandler+0x1ac>)
1a000c06:	689b      	ldr	r3, [r3, #8]
1a000c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(contador == 99)
1a000c0a:	4b20      	ldr	r3, [pc, #128]	; (1a000c8c <UART3_IRQHandler+0x1d8>)
1a000c0c:	781b      	ldrb	r3, [r3, #0]
1a000c0e:	2b63      	cmp	r3, #99	; 0x63
1a000c10:	d006      	beq.n	1a000c20 <UART3_IRQHandler+0x16c>
                else contador += 1;
1a000c12:	3301      	adds	r3, #1
1a000c14:	4a1d      	ldr	r2, [pc, #116]	; (1a000c8c <UART3_IRQHandler+0x1d8>)
1a000c16:	7013      	strb	r3, [r2, #0]
                Led_On(RGB_B_LED);
1a000c18:	2002      	movs	r0, #2
1a000c1a:	f000 f8f9 	bl	1a000e10 <Led_On>
1a000c1e:	e7e1      	b.n	1a000be4 <UART3_IRQHandler+0x130>
                    contador = 0;
1a000c20:	2200      	movs	r2, #0
1a000c22:	4b1a      	ldr	r3, [pc, #104]	; (1a000c8c <UART3_IRQHandler+0x1d8>)
1a000c24:	701a      	strb	r2, [r3, #0]
                    Led_On(RGB_G_LED);
1a000c26:	2001      	movs	r0, #1
1a000c28:	f000 f8f2 	bl	1a000e10 <Led_On>
1a000c2c:	e7f4      	b.n	1a000c18 <UART3_IRQHandler+0x164>
                if(contador == 0)
1a000c2e:	4b17      	ldr	r3, [pc, #92]	; (1a000c8c <UART3_IRQHandler+0x1d8>)
1a000c30:	781b      	ldrb	r3, [r3, #0]
1a000c32:	b133      	cbz	r3, 1a000c42 <UART3_IRQHandler+0x18e>
                else contador -= 1;
1a000c34:	3b01      	subs	r3, #1
1a000c36:	4a15      	ldr	r2, [pc, #84]	; (1a000c8c <UART3_IRQHandler+0x1d8>)
1a000c38:	7013      	strb	r3, [r2, #0]
                Led_On(RGB_R_LED);
1a000c3a:	2000      	movs	r0, #0
1a000c3c:	f000 f8e8 	bl	1a000e10 <Led_On>
1a000c40:	e7d0      	b.n	1a000be4 <UART3_IRQHandler+0x130>
                    contador = 99;
1a000c42:	2263      	movs	r2, #99	; 0x63
1a000c44:	4b11      	ldr	r3, [pc, #68]	; (1a000c8c <UART3_IRQHandler+0x1d8>)
1a000c46:	701a      	strb	r2, [r3, #0]
                    Led_On(RGB_G_LED);
1a000c48:	2001      	movs	r0, #1
1a000c4a:	f000 f8e1 	bl	1a000e10 <Led_On>
1a000c4e:	e7f4      	b.n	1a000c3a <UART3_IRQHandler+0x186>
                contador = 0;
1a000c50:	2200      	movs	r2, #0
1a000c52:	4b0e      	ldr	r3, [pc, #56]	; (1a000c8c <UART3_IRQHandler+0x1d8>)
1a000c54:	701a      	strb	r2, [r3, #0]
                Led_On(RGB_G_LED);
1a000c56:	2001      	movs	r0, #1
1a000c58:	f000 f8da 	bl	1a000e10 <Led_On>
1a000c5c:	e7c2      	b.n	1a000be4 <UART3_IRQHandler+0x130>
1a000c5e:	bf00      	nop
1a000c60:	400c2000 	.word	0x400c2000
1a000c64:	100000c1 	.word	0x100000c1
1a000c68:	100000b8 	.word	0x100000b8
1a000c6c:	100000c2 	.word	0x100000c2
1a000c70:	100000c3 	.word	0x100000c3
1a000c74:	40084000 	.word	0x40084000
1a000c78:	100000a4 	.word	0x100000a4
1a000c7c:	1a0025d8 	.word	0x1a0025d8
1a000c80:	1a0025a8 	.word	0x1a0025a8
1a000c84:	1a0025b8 	.word	0x1a0025b8
1a000c88:	1a0025c8 	.word	0x1a0025c8
1a000c8c:	100000b0 	.word	0x100000b0
1a000c90:	100000c0 	.word	0x100000c0

1a000c94 <main>:
}

int main(void)
{
1a000c94:	b538      	push	{r3, r4, r5, lr}
    buffer = (uint8_t*)malloc(100);
1a000c96:	2064      	movs	r0, #100	; 0x64
1a000c98:	f001 f996 	bl	1a001fc8 <malloc>
1a000c9c:	4605      	mov	r5, r0
1a000c9e:	4b28      	ldr	r3, [pc, #160]	; (1a000d40 <main+0xac>)
1a000ca0:	6018      	str	r0, [r3, #0]
    *buffer = 0;
1a000ca2:	2400      	movs	r4, #0
1a000ca4:	7004      	strb	r4, [r0, #0]

    comandoAT = (uint8_t*)malloc(50);
1a000ca6:	2032      	movs	r0, #50	; 0x32
1a000ca8:	f001 f98e 	bl	1a001fc8 <malloc>
1a000cac:	4b25      	ldr	r3, [pc, #148]	; (1a000d44 <main+0xb0>)
1a000cae:	6018      	str	r0, [r3, #0]
    *comandoAT = 0;
1a000cb0:	7004      	strb	r4, [r0, #0]

    buffer_prueba = (unsigned char*) malloc(100);
1a000cb2:	2064      	movs	r0, #100	; 0x64
1a000cb4:	f001 f988 	bl	1a001fc8 <malloc>
1a000cb8:	4b23      	ldr	r3, [pc, #140]	; (1a000d48 <main+0xb4>)
1a000cba:	6018      	str	r0, [r3, #0]
    memset(buffer_prueba, 0, 100);
1a000cbc:	2264      	movs	r2, #100	; 0x64
1a000cbe:	4621      	mov	r1, r4
1a000cc0:	f001 f992 	bl	1a001fe8 <memset>
    
    aux = buffer;
1a000cc4:	4b21      	ldr	r3, [pc, #132]	; (1a000d4c <main+0xb8>)
1a000cc6:	601d      	str	r5, [r3, #0]

    USB_UART->TER2 = 0;
1a000cc8:	4d21      	ldr	r5, [pc, #132]	; (1a000d50 <main+0xbc>)
1a000cca:	65ec      	str	r4, [r5, #92]	; 0x5c

    uint8_t resultado = 0;
    uint8_t dato = 255;
    uint8_t resError = 0;

    contador = 0;
1a000ccc:	4b21      	ldr	r3, [pc, #132]	; (1a000d54 <main+0xc0>)
1a000cce:	701c      	strb	r4, [r3, #0]

    ConfigurarPuertosLaboratorio();
1a000cd0:	f7ff fc20 	bl	1a000514 <ConfigurarPuertosLaboratorio>
    ConfigurarInterrupciones();
1a000cd4:	f7ff fbac 	bl	1a000430 <ConfigurarInterrupciones>
    ConfigurarUART(USB_UART, 1);
1a000cd8:	2101      	movs	r1, #1
1a000cda:	4628      	mov	r0, r5
1a000cdc:	f7ff fd54 	bl	1a000788 <ConfigurarUART>
    ConfigurarUART(MODEM_UART, 1);
1a000ce0:	2101      	movs	r1, #1
1a000ce2:	481d      	ldr	r0, [pc, #116]	; (1a000d58 <main+0xc4>)
1a000ce4:	f7ff fd50 	bl	1a000788 <ConfigurarUART>
1a000ce8:	e018      	b.n	1a000d1c <main+0x88>
        while(arrayLength(buffer))
        {
            if(!entersLoop)
                USB_UART->TER2 = 1;
            entersLoop = 1;
            if(UARTDisponible(USB_UART))
1a000cea:	4819      	ldr	r0, [pc, #100]	; (1a000d50 <main+0xbc>)
1a000cec:	f7ff fd60 	bl	1a0007b0 <UARTDisponible>
            entersLoop = 1;
1a000cf0:	2401      	movs	r4, #1
            if(UARTDisponible(USB_UART))
1a000cf2:	b950      	cbnz	r0, 1a000d0a <main+0x76>
        while(arrayLength(buffer))
1a000cf4:	4b12      	ldr	r3, [pc, #72]	; (1a000d40 <main+0xac>)
1a000cf6:	6818      	ldr	r0, [r3, #0]
1a000cf8:	f7ff fb64 	bl	1a0003c4 <arrayLength>
1a000cfc:	b168      	cbz	r0, 1a000d1a <main+0x86>
            if(!entersLoop)
1a000cfe:	2c00      	cmp	r4, #0
1a000d00:	d1f3      	bne.n	1a000cea <main+0x56>
                USB_UART->TER2 = 1;
1a000d02:	2201      	movs	r2, #1
1a000d04:	4b12      	ldr	r3, [pc, #72]	; (1a000d50 <main+0xbc>)
1a000d06:	65da      	str	r2, [r3, #92]	; 0x5c
1a000d08:	e7ef      	b.n	1a000cea <main+0x56>
            {
                uint8_t caracter = *buffer++;
1a000d0a:	4a0d      	ldr	r2, [pc, #52]	; (1a000d40 <main+0xac>)
1a000d0c:	6813      	ldr	r3, [r2, #0]
1a000d0e:	1919      	adds	r1, r3, r4
1a000d10:	6011      	str	r1, [r2, #0]
1a000d12:	781a      	ldrb	r2, [r3, #0]
                
                USB_UART->THR = caracter;
1a000d14:	4b0e      	ldr	r3, [pc, #56]	; (1a000d50 <main+0xbc>)
1a000d16:	601a      	str	r2, [r3, #0]
1a000d18:	e7ec      	b.n	1a000cf4 <main+0x60>
            }
        }
        
        if(entersLoop)
1a000d1a:	b92c      	cbnz	r4, 1a000d28 <main+0x94>
        led_encendido = LeerLEDs();
1a000d1c:	f7ff fb5c 	bl	1a0003d8 <LeerLEDs>
1a000d20:	4b0e      	ldr	r3, [pc, #56]	; (1a000d5c <main+0xc8>)
1a000d22:	7018      	strb	r0, [r3, #0]
        uint8_t entersLoop = 0;
1a000d24:	2400      	movs	r4, #0
        while(arrayLength(buffer))
1a000d26:	e7e5      	b.n	1a000cf4 <main+0x60>
        {
            USB_UART->TER2 = 0;
1a000d28:	2100      	movs	r1, #0
1a000d2a:	4b09      	ldr	r3, [pc, #36]	; (1a000d50 <main+0xbc>)
1a000d2c:	65d9      	str	r1, [r3, #92]	; 0x5c
            entersLoop = 0;
            buffer = aux;
1a000d2e:	4b07      	ldr	r3, [pc, #28]	; (1a000d4c <main+0xb8>)
1a000d30:	6818      	ldr	r0, [r3, #0]
1a000d32:	4b03      	ldr	r3, [pc, #12]	; (1a000d40 <main+0xac>)
1a000d34:	6018      	str	r0, [r3, #0]
            memset(buffer, 0, 100);
1a000d36:	2264      	movs	r2, #100	; 0x64
1a000d38:	f001 f956 	bl	1a001fe8 <memset>
1a000d3c:	e7ee      	b.n	1a000d1c <main+0x88>
1a000d3e:	bf00      	nop
1a000d40:	100000a4 	.word	0x100000a4
1a000d44:	100000ac 	.word	0x100000ac
1a000d48:	100000a8 	.word	0x100000a8
1a000d4c:	100000a0 	.word	0x100000a0
1a000d50:	400c1000 	.word	0x400c1000
1a000d54:	100000b0 	.word	0x100000b0
1a000d58:	400c2000 	.word	0x400c2000
1a000d5c:	100000d8 	.word	0x100000d8

1a000d60 <initialise_monitor_handles>:
{
1a000d60:	4770      	bx	lr
1a000d62:	Address 0x000000001a000d62 is out of bounds.


1a000d64 <Reset_Handler>:
void Reset_Handler(void) {
1a000d64:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000d66:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000d68:	4a19      	ldr	r2, [pc, #100]	; (1a000dd0 <Reset_Handler+0x6c>)
1a000d6a:	4b1a      	ldr	r3, [pc, #104]	; (1a000dd4 <Reset_Handler+0x70>)
1a000d6c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000d6e:	4a1a      	ldr	r2, [pc, #104]	; (1a000dd8 <Reset_Handler+0x74>)
1a000d70:	3304      	adds	r3, #4
1a000d72:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000d74:	2300      	movs	r3, #0
1a000d76:	e005      	b.n	1a000d84 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000d78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000d7c:	4a17      	ldr	r2, [pc, #92]	; (1a000ddc <Reset_Handler+0x78>)
1a000d7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000d82:	3301      	adds	r3, #1
1a000d84:	2b07      	cmp	r3, #7
1a000d86:	d9f7      	bls.n	1a000d78 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000d88:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000d8a:	4b15      	ldr	r3, [pc, #84]	; (1a000de0 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000d8c:	e007      	b.n	1a000d9e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000d8e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000d92:	689a      	ldr	r2, [r3, #8]
1a000d94:	6859      	ldr	r1, [r3, #4]
1a000d96:	6818      	ldr	r0, [r3, #0]
1a000d98:	f7ff f9f7 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000d9c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000d9e:	4a11      	ldr	r2, [pc, #68]	; (1a000de4 <Reset_Handler+0x80>)
1a000da0:	4293      	cmp	r3, r2
1a000da2:	d3f4      	bcc.n	1a000d8e <Reset_Handler+0x2a>
1a000da4:	e006      	b.n	1a000db4 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000da6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000da8:	6859      	ldr	r1, [r3, #4]
1a000daa:	f854 0b08 	ldr.w	r0, [r4], #8
1a000dae:	f7ff f9fb 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000db2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000db4:	4a0c      	ldr	r2, [pc, #48]	; (1a000de8 <Reset_Handler+0x84>)
1a000db6:	4293      	cmp	r3, r2
1a000db8:	d3f5      	bcc.n	1a000da6 <Reset_Handler+0x42>
    SystemInit();
1a000dba:	f000 ff35 	bl	1a001c28 <SystemInit>
    __libc_init_array();
1a000dbe:	f001 f8db 	bl	1a001f78 <__libc_init_array>
    initialise_monitor_handles();
1a000dc2:	f7ff ffcd 	bl	1a000d60 <initialise_monitor_handles>
    main();
1a000dc6:	f7ff ff65 	bl	1a000c94 <main>
        __asm__ volatile("wfi");
1a000dca:	bf30      	wfi
1a000dcc:	e7fd      	b.n	1a000dca <Reset_Handler+0x66>
1a000dce:	bf00      	nop
1a000dd0:	10df1000 	.word	0x10df1000
1a000dd4:	40053100 	.word	0x40053100
1a000dd8:	01dff7ff 	.word	0x01dff7ff
1a000ddc:	e000e280 	.word	0xe000e280
1a000de0:	1a000114 	.word	0x1a000114
1a000de4:	1a000150 	.word	0x1a000150
1a000de8:	1a000178 	.word	0x1a000178

1a000dec <_fini>:
void _fini(void) {}
1a000dec:	4770      	bx	lr

1a000dee <_init>:
void _init(void) {}
1a000dee:	4770      	bx	lr

1a000df0 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000df0:	4b05      	ldr	r3, [pc, #20]	; (1a000e08 <_sbrk_r+0x18>)
1a000df2:	681b      	ldr	r3, [r3, #0]
1a000df4:	b123      	cbz	r3, 1a000e00 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000df6:	4b04      	ldr	r3, [pc, #16]	; (1a000e08 <_sbrk_r+0x18>)
1a000df8:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000dfa:	4401      	add	r1, r0
1a000dfc:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000dfe:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000e00:	4a02      	ldr	r2, [pc, #8]	; (1a000e0c <_sbrk_r+0x1c>)
1a000e02:	4b01      	ldr	r3, [pc, #4]	; (1a000e08 <_sbrk_r+0x18>)
1a000e04:	601a      	str	r2, [r3, #0]
1a000e06:	e7f6      	b.n	1a000df6 <_sbrk_r+0x6>
1a000e08:	100000c4 	.word	0x100000c4
1a000e0c:	100000e0 	.word	0x100000e0

1a000e10 <Led_On>:
	return TRUE;
}

/** \brief Function to turn on a specific led */
uint8_t Led_On(uint8_t led)
{
1a000e10:	4603      	mov	r3, r0
	/** \details Function to turn on a specific led at the EDU-CIAA board.
	 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
	 * */
	uint8_t result = FALSE;

	if (led == YELLOW_LED)
1a000e12:	2804      	cmp	r0, #4
1a000e14:	d00f      	beq.n	1a000e36 <Led_On+0x26>
	uint8_t result = FALSE;
1a000e16:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == RED_LED)
1a000e18:	2b03      	cmp	r3, #3
1a000e1a:	d012      	beq.n	1a000e42 <Led_On+0x32>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a000e1c:	2b05      	cmp	r3, #5
1a000e1e:	d018      	beq.n	1a000e52 <Led_On+0x42>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
    if (led == RGB_R_LED)
1a000e20:	b923      	cbnz	r3, 1a000e2c <Led_On+0x1c>
	pGPIO->SET[port] = (1 << pin);
1a000e22:	2001      	movs	r0, #1
1a000e24:	f242 2214 	movw	r2, #8724	; 0x2214
1a000e28:	4915      	ldr	r1, [pc, #84]	; (1a000e80 <Led_On+0x70>)
1a000e2a:	5088      	str	r0, [r1, r2]
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a000e2c:	2b01      	cmp	r3, #1
1a000e2e:	d018      	beq.n	1a000e62 <Led_On+0x52>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a000e30:	2b02      	cmp	r3, #2
1a000e32:	d01d      	beq.n	1a000e70 <Led_On+0x60>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
}
1a000e34:	4770      	bx	lr
1a000e36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a000e3a:	4a12      	ldr	r2, [pc, #72]	; (1a000e84 <Led_On+0x74>)
1a000e3c:	6011      	str	r1, [r2, #0]
		result = TRUE;
1a000e3e:	2001      	movs	r0, #1
1a000e40:	e7ea      	b.n	1a000e18 <Led_On+0x8>
1a000e42:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a000e46:	f242 2204 	movw	r2, #8708	; 0x2204
1a000e4a:	490d      	ldr	r1, [pc, #52]	; (1a000e80 <Led_On+0x70>)
1a000e4c:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000e4e:	2001      	movs	r0, #1
1a000e50:	e7e4      	b.n	1a000e1c <Led_On+0xc>
1a000e52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
1a000e56:	f242 2204 	movw	r2, #8708	; 0x2204
1a000e5a:	4909      	ldr	r1, [pc, #36]	; (1a000e80 <Led_On+0x70>)
1a000e5c:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000e5e:	2001      	movs	r0, #1
1a000e60:	e7de      	b.n	1a000e20 <Led_On+0x10>
1a000e62:	2002      	movs	r0, #2
1a000e64:	f242 2214 	movw	r2, #8724	; 0x2214
1a000e68:	4905      	ldr	r1, [pc, #20]	; (1a000e80 <Led_On+0x70>)
1a000e6a:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000e6c:	4618      	mov	r0, r3
1a000e6e:	e7df      	b.n	1a000e30 <Led_On+0x20>
1a000e70:	2104      	movs	r1, #4
1a000e72:	f242 2314 	movw	r3, #8724	; 0x2214
1a000e76:	4a02      	ldr	r2, [pc, #8]	; (1a000e80 <Led_On+0x70>)
1a000e78:	50d1      	str	r1, [r2, r3]
		result = TRUE;
1a000e7a:	2001      	movs	r0, #1
1a000e7c:	e7da      	b.n	1a000e34 <Led_On+0x24>
1a000e7e:	bf00      	nop
1a000e80:	400f4000 	.word	0x400f4000
1a000e84:	400f6200 	.word	0x400f6200

1a000e88 <Led_Off>:

/** \brief Function to turn off a specific led */
uint8_t Led_Off(uint8_t led)
{
1a000e88:	4603      	mov	r3, r0
	/** \details Function to turn off a specific led at the EDU-CIAA board.
		 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
		 * */
	uint8_t result = FALSE;

	if (led == YELLOW_LED)
1a000e8a:	2804      	cmp	r0, #4
1a000e8c:	d00f      	beq.n	1a000eae <Led_Off+0x26>
	uint8_t result = FALSE;
1a000e8e:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == RED_LED)
1a000e90:	2b03      	cmp	r3, #3
1a000e92:	d012      	beq.n	1a000eba <Led_Off+0x32>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a000e94:	2b05      	cmp	r3, #5
1a000e96:	d018      	beq.n	1a000eca <Led_Off+0x42>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_R_LED)
1a000e98:	b923      	cbnz	r3, 1a000ea4 <Led_Off+0x1c>
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a000e9a:	2001      	movs	r0, #1
1a000e9c:	f242 2294 	movw	r2, #8852	; 0x2294
1a000ea0:	4915      	ldr	r1, [pc, #84]	; (1a000ef8 <Led_Off+0x70>)
1a000ea2:	5088      	str	r0, [r1, r2]
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a000ea4:	2b01      	cmp	r3, #1
1a000ea6:	d018      	beq.n	1a000eda <Led_Off+0x52>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a000ea8:	2b02      	cmp	r3, #2
1a000eaa:	d01d      	beq.n	1a000ee8 <Led_Off+0x60>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
}
1a000eac:	4770      	bx	lr
1a000eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a000eb2:	4a12      	ldr	r2, [pc, #72]	; (1a000efc <Led_Off+0x74>)
1a000eb4:	6011      	str	r1, [r2, #0]
		result = TRUE;
1a000eb6:	2001      	movs	r0, #1
1a000eb8:	e7ea      	b.n	1a000e90 <Led_Off+0x8>
1a000eba:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a000ebe:	f242 2284 	movw	r2, #8836	; 0x2284
1a000ec2:	490d      	ldr	r1, [pc, #52]	; (1a000ef8 <Led_Off+0x70>)
1a000ec4:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000ec6:	2001      	movs	r0, #1
1a000ec8:	e7e4      	b.n	1a000e94 <Led_Off+0xc>
1a000eca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
1a000ece:	f242 2284 	movw	r2, #8836	; 0x2284
1a000ed2:	4909      	ldr	r1, [pc, #36]	; (1a000ef8 <Led_Off+0x70>)
1a000ed4:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000ed6:	2001      	movs	r0, #1
1a000ed8:	e7de      	b.n	1a000e98 <Led_Off+0x10>
1a000eda:	2002      	movs	r0, #2
1a000edc:	f242 2294 	movw	r2, #8852	; 0x2294
1a000ee0:	4905      	ldr	r1, [pc, #20]	; (1a000ef8 <Led_Off+0x70>)
1a000ee2:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000ee4:	4618      	mov	r0, r3
1a000ee6:	e7df      	b.n	1a000ea8 <Led_Off+0x20>
1a000ee8:	2104      	movs	r1, #4
1a000eea:	f242 2394 	movw	r3, #8852	; 0x2294
1a000eee:	4a02      	ldr	r2, [pc, #8]	; (1a000ef8 <Led_Off+0x70>)
1a000ef0:	50d1      	str	r1, [r2, r3]
		result = TRUE;
1a000ef2:	2001      	movs	r0, #1
1a000ef4:	e7da      	b.n	1a000eac <Led_Off+0x24>
1a000ef6:	bf00      	nop
1a000ef8:	400f4000 	.word	0x400f4000
1a000efc:	400f6280 	.word	0x400f6280

1a000f00 <Led_Toggle>:

/** \brief Function to turn off a specific led */
uint8_t Led_Toggle(uint8_t led)
{
1a000f00:	4603      	mov	r3, r0
	/** \details Function to toogle a specific led at the EDU-CIAA board.
	 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
	 * */
uint8_t result = FALSE;

	if (led == YELLOW_LED)
1a000f02:	2804      	cmp	r0, #4
1a000f04:	d00f      	beq.n	1a000f26 <Led_Toggle+0x26>
uint8_t result = FALSE;
1a000f06:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == RED_LED)
1a000f08:	2b03      	cmp	r3, #3
1a000f0a:	d012      	beq.n	1a000f32 <Led_Toggle+0x32>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a000f0c:	2b05      	cmp	r3, #5
1a000f0e:	d018      	beq.n	1a000f42 <Led_Toggle+0x42>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_R_LED)
1a000f10:	b923      	cbnz	r3, 1a000f1c <Led_Toggle+0x1c>
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinToggle(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->NOT[port] = (1 << pin);
1a000f12:	2001      	movs	r0, #1
1a000f14:	f242 3214 	movw	r2, #8980	; 0x2314
1a000f18:	4915      	ldr	r1, [pc, #84]	; (1a000f70 <Led_Toggle+0x70>)
1a000f1a:	5088      	str	r0, [r1, r2]
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a000f1c:	2b01      	cmp	r3, #1
1a000f1e:	d018      	beq.n	1a000f52 <Led_Toggle+0x52>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a000f20:	2b02      	cmp	r3, #2
1a000f22:	d01d      	beq.n	1a000f60 <Led_Toggle+0x60>
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
	
}
1a000f24:	4770      	bx	lr
1a000f26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a000f2a:	4a12      	ldr	r2, [pc, #72]	; (1a000f74 <Led_Toggle+0x74>)
1a000f2c:	6011      	str	r1, [r2, #0]
		result = TRUE;
1a000f2e:	2001      	movs	r0, #1
1a000f30:	e7ea      	b.n	1a000f08 <Led_Toggle+0x8>
1a000f32:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a000f36:	f242 3204 	movw	r2, #8964	; 0x2304
1a000f3a:	490d      	ldr	r1, [pc, #52]	; (1a000f70 <Led_Toggle+0x70>)
1a000f3c:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000f3e:	2001      	movs	r0, #1
1a000f40:	e7e4      	b.n	1a000f0c <Led_Toggle+0xc>
1a000f42:	f44f 5080 	mov.w	r0, #4096	; 0x1000
1a000f46:	f242 3204 	movw	r2, #8964	; 0x2304
1a000f4a:	4909      	ldr	r1, [pc, #36]	; (1a000f70 <Led_Toggle+0x70>)
1a000f4c:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000f4e:	2001      	movs	r0, #1
1a000f50:	e7de      	b.n	1a000f10 <Led_Toggle+0x10>
1a000f52:	2002      	movs	r0, #2
1a000f54:	f242 3214 	movw	r2, #8980	; 0x2314
1a000f58:	4905      	ldr	r1, [pc, #20]	; (1a000f70 <Led_Toggle+0x70>)
1a000f5a:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000f5c:	4618      	mov	r0, r3
1a000f5e:	e7df      	b.n	1a000f20 <Led_Toggle+0x20>
1a000f60:	2104      	movs	r1, #4
1a000f62:	f242 3314 	movw	r3, #8980	; 0x2314
1a000f66:	4a02      	ldr	r2, [pc, #8]	; (1a000f70 <Led_Toggle+0x70>)
1a000f68:	50d1      	str	r1, [r2, r3]
		result = TRUE;
1a000f6a:	2001      	movs	r0, #1
1a000f6c:	e7da      	b.n	1a000f24 <Led_Toggle+0x24>
1a000f6e:	bf00      	nop
1a000f70:	400f4000 	.word	0x400f4000
1a000f74:	400f6300 	.word	0x400f6300

1a000f78 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000f78:	2200      	movs	r2, #0
1a000f7a:	2a05      	cmp	r2, #5
1a000f7c:	d819      	bhi.n	1a000fb2 <Board_LED_Init+0x3a>
{
1a000f7e:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000f80:	490c      	ldr	r1, [pc, #48]	; (1a000fb4 <Board_LED_Init+0x3c>)
1a000f82:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000f86:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000f8a:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a000f8c:	4b0a      	ldr	r3, [pc, #40]	; (1a000fb8 <Board_LED_Init+0x40>)
1a000f8e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000f92:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000f96:	2001      	movs	r0, #1
1a000f98:	40a0      	lsls	r0, r4
1a000f9a:	4301      	orrs	r1, r0
1a000f9c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000fa0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000fa4:	2100      	movs	r1, #0
1a000fa6:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000fa8:	3201      	adds	r2, #1
1a000faa:	2a05      	cmp	r2, #5
1a000fac:	d9e8      	bls.n	1a000f80 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a000fae:	bc70      	pop	{r4, r5, r6}
1a000fb0:	4770      	bx	lr
1a000fb2:	4770      	bx	lr
1a000fb4:	1a00261c 	.word	0x1a00261c
1a000fb8:	400f4000 	.word	0x400f4000

1a000fbc <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000fbc:	2300      	movs	r3, #0
1a000fbe:	2b03      	cmp	r3, #3
1a000fc0:	d816      	bhi.n	1a000ff0 <Board_TEC_Init+0x34>
{
1a000fc2:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000fc4:	490b      	ldr	r1, [pc, #44]	; (1a000ff4 <Board_TEC_Init+0x38>)
1a000fc6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000fca:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000fce:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000fd0:	4c09      	ldr	r4, [pc, #36]	; (1a000ff8 <Board_TEC_Init+0x3c>)
1a000fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000fd6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000fda:	2001      	movs	r0, #1
1a000fdc:	40a8      	lsls	r0, r5
1a000fde:	ea21 0100 	bic.w	r1, r1, r0
1a000fe2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000fe6:	3301      	adds	r3, #1
1a000fe8:	2b03      	cmp	r3, #3
1a000fea:	d9eb      	bls.n	1a000fc4 <Board_TEC_Init+0x8>
    }
}
1a000fec:	bc30      	pop	{r4, r5}
1a000fee:	4770      	bx	lr
1a000ff0:	4770      	bx	lr
1a000ff2:	bf00      	nop
1a000ff4:	1a002614 	.word	0x1a002614
1a000ff8:	400f4000 	.word	0x400f4000

1a000ffc <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000ffc:	2300      	movs	r3, #0
1a000ffe:	2b08      	cmp	r3, #8
1a001000:	d816      	bhi.n	1a001030 <Board_GPIO_Init+0x34>
{
1a001002:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001004:	490b      	ldr	r1, [pc, #44]	; (1a001034 <Board_GPIO_Init+0x38>)
1a001006:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00100a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00100e:	784d      	ldrb	r5, [r1, #1]
1a001010:	4c09      	ldr	r4, [pc, #36]	; (1a001038 <Board_GPIO_Init+0x3c>)
1a001012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001016:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00101a:	2001      	movs	r0, #1
1a00101c:	40a8      	lsls	r0, r5
1a00101e:	ea21 0100 	bic.w	r1, r1, r0
1a001022:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001026:	3301      	adds	r3, #1
1a001028:	2b08      	cmp	r3, #8
1a00102a:	d9eb      	bls.n	1a001004 <Board_GPIO_Init+0x8>
    }
}
1a00102c:	bc30      	pop	{r4, r5}
1a00102e:	4770      	bx	lr
1a001030:	4770      	bx	lr
1a001032:	bf00      	nop
1a001034:	1a002628 	.word	0x1a002628
1a001038:	400f4000 	.word	0x400f4000

1a00103c <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00103c:	b510      	push	{r4, lr}
1a00103e:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a001040:	4c08      	ldr	r4, [pc, #32]	; (1a001064 <Board_ADC_Init+0x28>)
1a001042:	4669      	mov	r1, sp
1a001044:	4620      	mov	r0, r4
1a001046:	f000 f99b 	bl	1a001380 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00104a:	4a07      	ldr	r2, [pc, #28]	; (1a001068 <Board_ADC_Init+0x2c>)
1a00104c:	4669      	mov	r1, sp
1a00104e:	4620      	mov	r0, r4
1a001050:	f000 f9b6 	bl	1a0013c0 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a001054:	2200      	movs	r2, #0
1a001056:	4669      	mov	r1, sp
1a001058:	4620      	mov	r0, r4
1a00105a:	f000 f9ca 	bl	1a0013f2 <Chip_ADC_SetResolution>
}
1a00105e:	b002      	add	sp, #8
1a001060:	bd10      	pop	{r4, pc}
1a001062:	bf00      	nop
1a001064:	400e3000 	.word	0x400e3000
1a001068:	00061a80 	.word	0x00061a80

1a00106c <Board_SPI_Init>:
{
1a00106c:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00106e:	4c0b      	ldr	r4, [pc, #44]	; (1a00109c <Board_SPI_Init+0x30>)
1a001070:	4620      	mov	r0, r4
1a001072:	f000 fd7f 	bl	1a001b74 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001076:	6863      	ldr	r3, [r4, #4]
1a001078:	f023 0304 	bic.w	r3, r3, #4
1a00107c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00107e:	6823      	ldr	r3, [r4, #0]
1a001080:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001084:	f043 0307 	orr.w	r3, r3, #7
1a001088:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00108a:	4905      	ldr	r1, [pc, #20]	; (1a0010a0 <Board_SPI_Init+0x34>)
1a00108c:	4620      	mov	r0, r4
1a00108e:	f000 fd52 	bl	1a001b36 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a001092:	6863      	ldr	r3, [r4, #4]
1a001094:	f043 0302 	orr.w	r3, r3, #2
1a001098:	6063      	str	r3, [r4, #4]
1a00109a:	bd10      	pop	{r4, pc}
1a00109c:	400c5000 	.word	0x400c5000
1a0010a0:	000186a0 	.word	0x000186a0

1a0010a4 <Board_I2C_Init>:
{
1a0010a4:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0010a6:	2000      	movs	r0, #0
1a0010a8:	f000 fd90 	bl	1a001bcc <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0010ac:	f640 0208 	movw	r2, #2056	; 0x808
1a0010b0:	4b03      	ldr	r3, [pc, #12]	; (1a0010c0 <Board_I2C_Init+0x1c>)
1a0010b2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0010b6:	4903      	ldr	r1, [pc, #12]	; (1a0010c4 <Board_I2C_Init+0x20>)
1a0010b8:	2000      	movs	r0, #0
1a0010ba:	f000 fd99 	bl	1a001bf0 <Chip_I2C_SetClockRate>
1a0010be:	bd08      	pop	{r3, pc}
1a0010c0:	40086000 	.word	0x40086000
1a0010c4:	000f4240 	.word	0x000f4240

1a0010c8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0010c8:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0010ca:	4c07      	ldr	r4, [pc, #28]	; (1a0010e8 <Board_Debug_Init+0x20>)
1a0010cc:	4620      	mov	r0, r4
1a0010ce:	f000 f895 	bl	1a0011fc <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0010d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0010d6:	4620      	mov	r0, r4
1a0010d8:	f000 f8ba 	bl	1a001250 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0010dc:	2303      	movs	r3, #3
1a0010de:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0010e0:	2301      	movs	r3, #1
1a0010e2:	65e3      	str	r3, [r4, #92]	; 0x5c
1a0010e4:	bd10      	pop	{r4, pc}
1a0010e6:	bf00      	nop
1a0010e8:	400c1000 	.word	0x400c1000

1a0010ec <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0010ec:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0010ee:	f7ff ffeb 	bl	1a0010c8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0010f2:	4808      	ldr	r0, [pc, #32]	; (1a001114 <Board_Init+0x28>)
1a0010f4:	f000 fcfe 	bl	1a001af4 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a0010f8:	f7ff ff80 	bl	1a000ffc <Board_GPIO_Init>
   Board_ADC_Init();
1a0010fc:	f7ff ff9e 	bl	1a00103c <Board_ADC_Init>
   Board_SPI_Init();
1a001100:	f7ff ffb4 	bl	1a00106c <Board_SPI_Init>
   Board_I2C_Init();
1a001104:	f7ff ffce 	bl	1a0010a4 <Board_I2C_Init>

   Board_LED_Init();
1a001108:	f7ff ff36 	bl	1a000f78 <Board_LED_Init>
   Board_TEC_Init();
1a00110c:	f7ff ff56 	bl	1a000fbc <Board_TEC_Init>
1a001110:	bd08      	pop	{r3, pc}
1a001112:	bf00      	nop
1a001114:	400f4000 	.word	0x400f4000

1a001118 <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a001118:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00111a:	f7ff ffd5 	bl	1a0010c8 <Board_Debug_Init>
1a00111e:	bd08      	pop	{r3, pc}

1a001120 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001120:	2300      	movs	r3, #0
1a001122:	2b1c      	cmp	r3, #28
1a001124:	d812      	bhi.n	1a00114c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a001126:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001128:	4a09      	ldr	r2, [pc, #36]	; (1a001150 <Board_SetupMuxing+0x30>)
1a00112a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00112e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001132:	784a      	ldrb	r2, [r1, #1]
1a001134:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001136:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00113a:	4906      	ldr	r1, [pc, #24]	; (1a001154 <Board_SetupMuxing+0x34>)
1a00113c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001140:	3301      	adds	r3, #1
1a001142:	2b1c      	cmp	r3, #28
1a001144:	d9f0      	bls.n	1a001128 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001146:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00114a:	4770      	bx	lr
1a00114c:	4770      	bx	lr
1a00114e:	bf00      	nop
1a001150:	1a002644 	.word	0x1a002644
1a001154:	40086000 	.word	0x40086000

1a001158 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001158:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00115a:	4a17      	ldr	r2, [pc, #92]	; (1a0011b8 <Board_SetupClocking+0x60>)
1a00115c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001164:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001168:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00116c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001174:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001178:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00117c:	2201      	movs	r2, #1
1a00117e:	490f      	ldr	r1, [pc, #60]	; (1a0011bc <Board_SetupClocking+0x64>)
1a001180:	2006      	movs	r0, #6
1a001182:	f000 fc0d 	bl	1a0019a0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001186:	2400      	movs	r4, #0
1a001188:	b14c      	cbz	r4, 1a00119e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00118a:	4b0b      	ldr	r3, [pc, #44]	; (1a0011b8 <Board_SetupClocking+0x60>)
1a00118c:	685a      	ldr	r2, [r3, #4]
1a00118e:	f022 020c 	bic.w	r2, r2, #12
1a001192:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001194:	685a      	ldr	r2, [r3, #4]
1a001196:	f042 0203 	orr.w	r2, r2, #3
1a00119a:	605a      	str	r2, [r3, #4]
1a00119c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00119e:	4808      	ldr	r0, [pc, #32]	; (1a0011c0 <Board_SetupClocking+0x68>)
1a0011a0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0011a4:	2301      	movs	r3, #1
1a0011a6:	788a      	ldrb	r2, [r1, #2]
1a0011a8:	7849      	ldrb	r1, [r1, #1]
1a0011aa:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0011ae:	f000 fb49 	bl	1a001844 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0011b2:	3401      	adds	r4, #1
1a0011b4:	e7e8      	b.n	1a001188 <Board_SetupClocking+0x30>
1a0011b6:	bf00      	nop
1a0011b8:	40043000 	.word	0x40043000
1a0011bc:	0c28cb00 	.word	0x0c28cb00
1a0011c0:	1a002640 	.word	0x1a002640

1a0011c4 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0011c4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0011c6:	f7ff ffab 	bl	1a001120 <Board_SetupMuxing>
    Board_SetupClocking();
1a0011ca:	f7ff ffc5 	bl	1a001158 <Board_SetupClocking>
1a0011ce:	bd08      	pop	{r3, pc}

1a0011d0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0011d0:	4b09      	ldr	r3, [pc, #36]	; (1a0011f8 <Chip_UART_GetIndex+0x28>)
1a0011d2:	4298      	cmp	r0, r3
1a0011d4:	d009      	beq.n	1a0011ea <Chip_UART_GetIndex+0x1a>
1a0011d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0011da:	4298      	cmp	r0, r3
1a0011dc:	d007      	beq.n	1a0011ee <Chip_UART_GetIndex+0x1e>
1a0011de:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0011e2:	4298      	cmp	r0, r3
1a0011e4:	d005      	beq.n	1a0011f2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0011e6:	2000      	movs	r0, #0
1a0011e8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0011ea:	2002      	movs	r0, #2
1a0011ec:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0011ee:	2003      	movs	r0, #3
1a0011f0:	4770      	bx	lr
			return 1;
1a0011f2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0011f4:	4770      	bx	lr
1a0011f6:	bf00      	nop
1a0011f8:	400c1000 	.word	0x400c1000

1a0011fc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0011fc:	b530      	push	{r4, r5, lr}
1a0011fe:	b083      	sub	sp, #12
1a001200:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001202:	f7ff ffe5 	bl	1a0011d0 <Chip_UART_GetIndex>
1a001206:	2301      	movs	r3, #1
1a001208:	461a      	mov	r2, r3
1a00120a:	4619      	mov	r1, r3
1a00120c:	4d0e      	ldr	r5, [pc, #56]	; (1a001248 <Chip_UART_Init+0x4c>)
1a00120e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001212:	f000 fb5d 	bl	1a0018d0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a001216:	2307      	movs	r3, #7
1a001218:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00121a:	2300      	movs	r3, #0
1a00121c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00121e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001220:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001222:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001224:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001226:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001228:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00122a:	4b08      	ldr	r3, [pc, #32]	; (1a00124c <Chip_UART_Init+0x50>)
1a00122c:	429c      	cmp	r4, r3
1a00122e:	d006      	beq.n	1a00123e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001230:	2303      	movs	r3, #3
1a001232:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001234:	2310      	movs	r3, #16
1a001236:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001238:	9b01      	ldr	r3, [sp, #4]
}
1a00123a:	b003      	add	sp, #12
1a00123c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00123e:	2300      	movs	r3, #0
1a001240:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a001242:	69a3      	ldr	r3, [r4, #24]
1a001244:	9301      	str	r3, [sp, #4]
1a001246:	e7f3      	b.n	1a001230 <Chip_UART_Init+0x34>
1a001248:	1a0026c0 	.word	0x1a0026c0
1a00124c:	40082000 	.word	0x40082000

1a001250 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001254:	b083      	sub	sp, #12
1a001256:	4683      	mov	fp, r0
1a001258:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00125a:	f7ff ffb9 	bl	1a0011d0 <Chip_UART_GetIndex>
1a00125e:	4b35      	ldr	r3, [pc, #212]	; (1a001334 <Chip_UART_SetBaudFDR+0xe4>)
1a001260:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001264:	f000 fb6c 	bl	1a001940 <Chip_Clock_GetRate>
1a001268:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00126a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00126e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001270:	2300      	movs	r3, #0
1a001272:	9301      	str	r3, [sp, #4]
1a001274:	46a2      	mov	sl, r4
1a001276:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a001278:	e02a      	b.n	1a0012d0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00127a:	4243      	negs	r3, r0
				div ++;
1a00127c:	1c4a      	adds	r2, r1, #1
1a00127e:	e017      	b.n	1a0012b0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001280:	b30b      	cbz	r3, 1a0012c6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a001282:	461f      	mov	r7, r3
			sd = d;
1a001284:	9501      	str	r5, [sp, #4]
			sm = m;
1a001286:	46a2      	mov	sl, r4
			sdiv = div;
1a001288:	4691      	mov	r9, r2
		for (d = 0; d < m; d++) {
1a00128a:	3501      	adds	r5, #1
1a00128c:	42ac      	cmp	r4, r5
1a00128e:	d91e      	bls.n	1a0012ce <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001290:	0933      	lsrs	r3, r6, #4
1a001292:	0730      	lsls	r0, r6, #28
1a001294:	fba4 0100 	umull	r0, r1, r4, r0
1a001298:	fb04 1103 	mla	r1, r4, r3, r1
1a00129c:	1962      	adds	r2, r4, r5
1a00129e:	fb08 f202 	mul.w	r2, r8, r2
1a0012a2:	2300      	movs	r3, #0
1a0012a4:	f000 fce0 	bl	1a001c68 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0012a8:	4603      	mov	r3, r0
			div = (uint32_t) (dval >> 32);
1a0012aa:	460a      	mov	r2, r1
			if ((int)diff < 0) {
1a0012ac:	2800      	cmp	r0, #0
1a0012ae:	dbe4      	blt.n	1a00127a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0012b0:	429f      	cmp	r7, r3
1a0012b2:	d3ea      	bcc.n	1a00128a <Chip_UART_SetBaudFDR+0x3a>
1a0012b4:	2a00      	cmp	r2, #0
1a0012b6:	d0e8      	beq.n	1a00128a <Chip_UART_SetBaudFDR+0x3a>
1a0012b8:	0c11      	lsrs	r1, r2, #16
1a0012ba:	d1e6      	bne.n	1a00128a <Chip_UART_SetBaudFDR+0x3a>
1a0012bc:	2a02      	cmp	r2, #2
1a0012be:	d8df      	bhi.n	1a001280 <Chip_UART_SetBaudFDR+0x30>
1a0012c0:	2d00      	cmp	r5, #0
1a0012c2:	d1e2      	bne.n	1a00128a <Chip_UART_SetBaudFDR+0x3a>
1a0012c4:	e7dc      	b.n	1a001280 <Chip_UART_SetBaudFDR+0x30>
			odiff = diff;
1a0012c6:	461f      	mov	r7, r3
			sd = d;
1a0012c8:	9501      	str	r5, [sp, #4]
			sm = m;
1a0012ca:	46a2      	mov	sl, r4
			sdiv = div;
1a0012cc:	4691      	mov	r9, r2
	for (m = 1; odiff && m < 16; m++) {
1a0012ce:	3401      	adds	r4, #1
1a0012d0:	b11f      	cbz	r7, 1a0012da <Chip_UART_SetBaudFDR+0x8a>
1a0012d2:	2c0f      	cmp	r4, #15
1a0012d4:	d801      	bhi.n	1a0012da <Chip_UART_SetBaudFDR+0x8a>
1a0012d6:	2500      	movs	r5, #0
1a0012d8:	e7d8      	b.n	1a00128c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0012da:	f1b9 0f00 	cmp.w	r9, #0
1a0012de:	d024      	beq.n	1a00132a <Chip_UART_SetBaudFDR+0xda>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0012e0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0012e8:	f8cb 300c 	str.w	r3, [fp, #12]
1a0012ec:	fa5f f389 	uxtb.w	r3, r9
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0012f0:	f8cb 3000 	str.w	r3, [fp]
1a0012f4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0012f8:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0012fc:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001304:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001308:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00130c:	b2db      	uxtb	r3, r3
1a00130e:	9901      	ldr	r1, [sp, #4]
1a001310:	f001 020f 	and.w	r2, r1, #15
1a001314:	4313      	orrs	r3, r2
1a001316:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00131a:	0933      	lsrs	r3, r6, #4
1a00131c:	fb03 f30a 	mul.w	r3, r3, sl
1a001320:	448a      	add	sl, r1
1a001322:	fb0a f909 	mul.w	r9, sl, r9
1a001326:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00132a:	4648      	mov	r0, r9
1a00132c:	b003      	add	sp, #12
1a00132e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001332:	bf00      	nop
1a001334:	1a0026b8 	.word	0x1a0026b8

1a001338 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a001338:	4b03      	ldr	r3, [pc, #12]	; (1a001348 <Chip_ADC_GetClockIndex+0x10>)
1a00133a:	4298      	cmp	r0, r3
1a00133c:	d001      	beq.n	1a001342 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00133e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001340:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a001342:	2004      	movs	r0, #4
1a001344:	4770      	bx	lr
1a001346:	bf00      	nop
1a001348:	400e4000 	.word	0x400e4000

1a00134c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a00134c:	b570      	push	{r4, r5, r6, lr}
1a00134e:	460d      	mov	r5, r1
1a001350:	4614      	mov	r4, r2
1a001352:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001354:	f7ff fff0 	bl	1a001338 <Chip_ADC_GetClockIndex>
1a001358:	f000 faf2 	bl	1a001940 <Chip_Clock_GetRate>
	if (burstMode) {
1a00135c:	b965      	cbnz	r5, 1a001378 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00135e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001362:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001366:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00136a:	0064      	lsls	r4, r4, #1
1a00136c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001370:	b2c0      	uxtb	r0, r0
1a001372:	3801      	subs	r0, #1
	return div;
}
1a001374:	b2c0      	uxtb	r0, r0
1a001376:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a001378:	fb04 f406 	mul.w	r4, r4, r6
1a00137c:	e7f3      	b.n	1a001366 <getClkDiv+0x1a>
1a00137e:	Address 0x000000001a00137e is out of bounds.


1a001380 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001380:	b538      	push	{r3, r4, r5, lr}
1a001382:	4605      	mov	r5, r0
1a001384:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001386:	f7ff ffd7 	bl	1a001338 <Chip_ADC_GetClockIndex>
1a00138a:	2301      	movs	r3, #1
1a00138c:	461a      	mov	r2, r3
1a00138e:	4619      	mov	r1, r3
1a001390:	f000 fa9e 	bl	1a0018d0 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001394:	2100      	movs	r1, #0
1a001396:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001398:	4a08      	ldr	r2, [pc, #32]	; (1a0013bc <Chip_ADC_Init+0x3c>)
1a00139a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00139c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00139e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0013a0:	230b      	movs	r3, #11
1a0013a2:	4628      	mov	r0, r5
1a0013a4:	f7ff ffd2 	bl	1a00134c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0013a8:	0200      	lsls	r0, r0, #8
1a0013aa:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0013ae:	7923      	ldrb	r3, [r4, #4]
1a0013b0:	045b      	lsls	r3, r3, #17
1a0013b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0013b6:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0013b8:	6028      	str	r0, [r5, #0]
1a0013ba:	bd38      	pop	{r3, r4, r5, pc}
1a0013bc:	00061a80 	.word	0x00061a80

1a0013c0 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0013c0:	b570      	push	{r4, r5, r6, lr}
1a0013c2:	4605      	mov	r5, r0
1a0013c4:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0013c6:	6804      	ldr	r4, [r0, #0]
1a0013c8:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0013cc:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0013d0:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0013d2:	790b      	ldrb	r3, [r1, #4]
1a0013d4:	f1c3 030b 	rsb	r3, r3, #11
1a0013d8:	b2db      	uxtb	r3, r3
1a0013da:	7949      	ldrb	r1, [r1, #5]
1a0013dc:	f7ff ffb6 	bl	1a00134c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0013e0:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0013e4:	7934      	ldrb	r4, [r6, #4]
1a0013e6:	0464      	lsls	r4, r4, #17
1a0013e8:	f404 2460 	and.w	r4, r4, #917504	; 0xe0000
1a0013ec:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a0013ee:	6028      	str	r0, [r5, #0]
1a0013f0:	bd70      	pop	{r4, r5, r6, pc}

1a0013f2 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0013f2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0013f4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0013f6:	680a      	ldr	r2, [r1, #0]
1a0013f8:	f7ff ffe2 	bl	1a0013c0 <Chip_ADC_SetSampleRate>
1a0013fc:	bd08      	pop	{r3, pc}
1a0013fe:	Address 0x000000001a0013fe is out of bounds.


1a001400 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001400:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001402:	680b      	ldr	r3, [r1, #0]
1a001404:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001408:	d002      	beq.n	1a001410 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00140a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00140e:	600b      	str	r3, [r1, #0]
1a001410:	4607      	mov	r7, r0
1a001412:	2501      	movs	r5, #1
1a001414:	e03b      	b.n	1a00148e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a001416:	694b      	ldr	r3, [r1, #20]
1a001418:	fb03 f302 	mul.w	r3, r3, r2
1a00141c:	fbb3 f3f5 	udiv	r3, r3, r5
1a001420:	e014      	b.n	1a00144c <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001422:	461c      	mov	r4, r3
1a001424:	e020      	b.n	1a001468 <pll_calc_divs+0x68>
		return -val;
1a001426:	f1ce 0e00 	rsb	lr, lr, #0
1a00142a:	e020      	b.n	1a00146e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a00142c:	3201      	adds	r2, #1
1a00142e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a001432:	dc26      	bgt.n	1a001482 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a001434:	680c      	ldr	r4, [r1, #0]
1a001436:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00143a:	d0ec      	beq.n	1a001416 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00143c:	1c73      	adds	r3, r6, #1
1a00143e:	fa02 fe03 	lsl.w	lr, r2, r3
1a001442:	694b      	ldr	r3, [r1, #20]
1a001444:	fb03 f30e 	mul.w	r3, r3, lr
1a001448:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00144c:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a001498 <pll_calc_divs+0x98>
1a001450:	4573      	cmp	r3, lr
1a001452:	d9eb      	bls.n	1a00142c <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001454:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a00149c <pll_calc_divs+0x9c>
1a001458:	4573      	cmp	r3, lr
1a00145a:	d812      	bhi.n	1a001482 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a00145c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001460:	d1df      	bne.n	1a001422 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a001462:	1c74      	adds	r4, r6, #1
1a001464:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a001468:	ebb0 0e04 	subs.w	lr, r0, r4
1a00146c:	d4db      	bmi.n	1a001426 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a00146e:	4577      	cmp	r7, lr
1a001470:	d9dc      	bls.n	1a00142c <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a001472:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001474:	1c77      	adds	r7, r6, #1
1a001476:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001478:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00147a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00147c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00147e:	4677      	mov	r7, lr
1a001480:	e7d4      	b.n	1a00142c <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a001482:	3601      	adds	r6, #1
1a001484:	2e03      	cmp	r6, #3
1a001486:	dc01      	bgt.n	1a00148c <pll_calc_divs+0x8c>
1a001488:	2201      	movs	r2, #1
1a00148a:	e7d0      	b.n	1a00142e <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a00148c:	3501      	adds	r5, #1
1a00148e:	2d04      	cmp	r5, #4
1a001490:	dc01      	bgt.n	1a001496 <pll_calc_divs+0x96>
1a001492:	2600      	movs	r6, #0
1a001494:	e7f6      	b.n	1a001484 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a001496:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001498:	094c5eff 	.word	0x094c5eff
1a00149c:	1312d000 	.word	0x1312d000

1a0014a0 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0014a2:	b099      	sub	sp, #100	; 0x64
1a0014a4:	4605      	mov	r5, r0
1a0014a6:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0014a8:	2260      	movs	r2, #96	; 0x60
1a0014aa:	2100      	movs	r1, #0
1a0014ac:	4668      	mov	r0, sp
1a0014ae:	f000 fd9b 	bl	1a001fe8 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0014b2:	2380      	movs	r3, #128	; 0x80
1a0014b4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0014b6:	6963      	ldr	r3, [r4, #20]
1a0014b8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0014ba:	7923      	ldrb	r3, [r4, #4]
1a0014bc:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0014c0:	4669      	mov	r1, sp
1a0014c2:	4628      	mov	r0, r5
1a0014c4:	f7ff ff9c 	bl	1a001400 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0014c8:	9b06      	ldr	r3, [sp, #24]
1a0014ca:	429d      	cmp	r5, r3
1a0014cc:	d027      	beq.n	1a00151e <pll_get_frac+0x7e>
	if (val < 0)
1a0014ce:	1aeb      	subs	r3, r5, r3
1a0014d0:	d42e      	bmi.n	1a001530 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0014d2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0014d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0014d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0014da:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0014dc:	6963      	ldr	r3, [r4, #20]
1a0014de:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0014e0:	7923      	ldrb	r3, [r4, #4]
1a0014e2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0014e6:	a910      	add	r1, sp, #64	; 0x40
1a0014e8:	4628      	mov	r0, r5
1a0014ea:	f7ff ff89 	bl	1a001400 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0014ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0014f0:	429d      	cmp	r5, r3
1a0014f2:	d01f      	beq.n	1a001534 <pll_get_frac+0x94>
	if (val < 0)
1a0014f4:	1aeb      	subs	r3, r5, r3
1a0014f6:	d425      	bmi.n	1a001544 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0014f8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0014fa:	4b2b      	ldr	r3, [pc, #172]	; (1a0015a8 <pll_get_frac+0x108>)
1a0014fc:	429d      	cmp	r5, r3
1a0014fe:	d923      	bls.n	1a001548 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a001502:	1aed      	subs	r5, r5, r3
1a001504:	d433      	bmi.n	1a00156e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001506:	42ae      	cmp	r6, r5
1a001508:	dc3b      	bgt.n	1a001582 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00150a:	42be      	cmp	r6, r7
1a00150c:	dc31      	bgt.n	1a001572 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00150e:	466d      	mov	r5, sp
1a001510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001514:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00151c:	e006      	b.n	1a00152c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00151e:	466d      	mov	r5, sp
1a001520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001524:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a00152c:	b019      	add	sp, #100	; 0x64
1a00152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001530:	425b      	negs	r3, r3
1a001532:	e7ce      	b.n	1a0014d2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a001534:	ad10      	add	r5, sp, #64	; 0x40
1a001536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00153a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00153e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001542:	e7f3      	b.n	1a00152c <pll_get_frac+0x8c>
		return -val;
1a001544:	425b      	negs	r3, r3
1a001546:	e7d7      	b.n	1a0014f8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001548:	2340      	movs	r3, #64	; 0x40
1a00154a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a00154c:	6963      	ldr	r3, [r4, #20]
1a00154e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001550:	a908      	add	r1, sp, #32
1a001552:	4628      	mov	r0, r5
1a001554:	f7ff ff54 	bl	1a001400 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00155a:	429d      	cmp	r5, r3
1a00155c:	d1d0      	bne.n	1a001500 <pll_get_frac+0x60>
			*ppll = pll[1];
1a00155e:	ad08      	add	r5, sp, #32
1a001560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001564:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001568:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a00156c:	e7de      	b.n	1a00152c <pll_get_frac+0x8c>
		return -val;
1a00156e:	426d      	negs	r5, r5
1a001570:	e7c9      	b.n	1a001506 <pll_get_frac+0x66>
			*ppll = pll[2];
1a001572:	ad10      	add	r5, sp, #64	; 0x40
1a001574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001578:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00157c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001580:	e7d4      	b.n	1a00152c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001582:	42af      	cmp	r7, r5
1a001584:	db07      	blt.n	1a001596 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001586:	ad08      	add	r5, sp, #32
1a001588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00158a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00158c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001594:	e7ca      	b.n	1a00152c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001596:	ad10      	add	r5, sp, #64	; 0x40
1a001598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00159a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00159c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0015a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0015a4:	e7c2      	b.n	1a00152c <pll_get_frac+0x8c>
1a0015a6:	bf00      	nop
1a0015a8:	068e7780 	.word	0x068e7780

1a0015ac <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0015ac:	b430      	push	{r4, r5}
1a0015ae:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0015b0:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0015b2:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0015b4:	e000      	b.n	1a0015b8 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0015b6:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0015b8:	281c      	cmp	r0, #28
1a0015ba:	d118      	bne.n	1a0015ee <Chip_Clock_FindBaseClock+0x42>
1a0015bc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0015c0:	0051      	lsls	r1, r2, #1
1a0015c2:	4a0c      	ldr	r2, [pc, #48]	; (1a0015f4 <Chip_Clock_FindBaseClock+0x48>)
1a0015c4:	440a      	add	r2, r1
1a0015c6:	7914      	ldrb	r4, [r2, #4]
1a0015c8:	42a0      	cmp	r0, r4
1a0015ca:	d010      	beq.n	1a0015ee <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0015cc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0015d0:	004a      	lsls	r2, r1, #1
1a0015d2:	4908      	ldr	r1, [pc, #32]	; (1a0015f4 <Chip_Clock_FindBaseClock+0x48>)
1a0015d4:	5a8a      	ldrh	r2, [r1, r2]
1a0015d6:	42aa      	cmp	r2, r5
1a0015d8:	d8ed      	bhi.n	1a0015b6 <Chip_Clock_FindBaseClock+0xa>
1a0015da:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0015de:	0051      	lsls	r1, r2, #1
1a0015e0:	4a04      	ldr	r2, [pc, #16]	; (1a0015f4 <Chip_Clock_FindBaseClock+0x48>)
1a0015e2:	440a      	add	r2, r1
1a0015e4:	8852      	ldrh	r2, [r2, #2]
1a0015e6:	4295      	cmp	r5, r2
1a0015e8:	d8e5      	bhi.n	1a0015b6 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0015ea:	4620      	mov	r0, r4
1a0015ec:	e7e4      	b.n	1a0015b8 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0015ee:	bc30      	pop	{r4, r5}
1a0015f0:	4770      	bx	lr
1a0015f2:	bf00      	nop
1a0015f4:	1a0026d4 	.word	0x1a0026d4

1a0015f8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0015f8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0015fe:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001600:	4a0d      	ldr	r2, [pc, #52]	; (1a001638 <Chip_Clock_EnableCrystal+0x40>)
1a001602:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001604:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001608:	6992      	ldr	r2, [r2, #24]
1a00160a:	4291      	cmp	r1, r2
1a00160c:	d001      	beq.n	1a001612 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00160e:	4a0a      	ldr	r2, [pc, #40]	; (1a001638 <Chip_Clock_EnableCrystal+0x40>)
1a001610:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001612:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001616:	4a09      	ldr	r2, [pc, #36]	; (1a00163c <Chip_Clock_EnableCrystal+0x44>)
1a001618:	6811      	ldr	r1, [r2, #0]
1a00161a:	4a09      	ldr	r2, [pc, #36]	; (1a001640 <Chip_Clock_EnableCrystal+0x48>)
1a00161c:	4291      	cmp	r1, r2
1a00161e:	d901      	bls.n	1a001624 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001620:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001624:	4a04      	ldr	r2, [pc, #16]	; (1a001638 <Chip_Clock_EnableCrystal+0x40>)
1a001626:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001628:	9b01      	ldr	r3, [sp, #4]
1a00162a:	1e5a      	subs	r2, r3, #1
1a00162c:	9201      	str	r2, [sp, #4]
1a00162e:	2b00      	cmp	r3, #0
1a001630:	d1fa      	bne.n	1a001628 <Chip_Clock_EnableCrystal+0x30>
}
1a001632:	b002      	add	sp, #8
1a001634:	4770      	bx	lr
1a001636:	bf00      	nop
1a001638:	40050000 	.word	0x40050000
1a00163c:	1a00263c 	.word	0x1a00263c
1a001640:	01312cff 	.word	0x01312cff

1a001644 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001644:	3012      	adds	r0, #18
1a001646:	4b05      	ldr	r3, [pc, #20]	; (1a00165c <Chip_Clock_GetDividerSource+0x18>)
1a001648:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a00164c:	f010 0f01 	tst.w	r0, #1
1a001650:	d001      	beq.n	1a001656 <Chip_Clock_GetDividerSource+0x12>
		return CLKINPUT_PD;
1a001652:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001654:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001656:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00165a:	4770      	bx	lr
1a00165c:	40050000 	.word	0x40050000

1a001660 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001660:	f100 0212 	add.w	r2, r0, #18
1a001664:	4b03      	ldr	r3, [pc, #12]	; (1a001674 <Chip_Clock_GetDividerDivisor+0x14>)
1a001666:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00166a:	4b03      	ldr	r3, [pc, #12]	; (1a001678 <Chip_Clock_GetDividerDivisor+0x18>)
1a00166c:	5c18      	ldrb	r0, [r3, r0]
}
1a00166e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001672:	4770      	bx	lr
1a001674:	40050000 	.word	0x40050000
1a001678:	1a0026cc 	.word	0x1a0026cc

1a00167c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00167c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00167e:	2810      	cmp	r0, #16
1a001680:	d80a      	bhi.n	1a001698 <Chip_Clock_GetClockInputHz+0x1c>
1a001682:	e8df f000 	tbb	[pc, r0]
1a001686:	0b44      	.short	0x0b44
1a001688:	0921180d 	.word	0x0921180d
1a00168c:	2d2a2724 	.word	0x2d2a2724
1a001690:	34300909 	.word	0x34300909
1a001694:	3c38      	.short	0x3c38
1a001696:	40          	.byte	0x40
1a001697:	00          	.byte	0x00
	uint32_t rate = 0;
1a001698:	2000      	movs	r0, #0
1a00169a:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a00169c:	481e      	ldr	r0, [pc, #120]	; (1a001718 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00169e:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0016a0:	4b1e      	ldr	r3, [pc, #120]	; (1a00171c <Chip_Clock_GetClockInputHz+0xa0>)
1a0016a2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0016a6:	f003 0307 	and.w	r3, r3, #7
1a0016aa:	2b04      	cmp	r3, #4
1a0016ac:	d001      	beq.n	1a0016b2 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0016ae:	481c      	ldr	r0, [pc, #112]	; (1a001720 <Chip_Clock_GetClockInputHz+0xa4>)
1a0016b0:	bd08      	pop	{r3, pc}
	uint32_t rate = 0;
1a0016b2:	2000      	movs	r0, #0
1a0016b4:	bd08      	pop	{r3, pc}
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0016b6:	4b19      	ldr	r3, [pc, #100]	; (1a00171c <Chip_Clock_GetClockInputHz+0xa0>)
1a0016b8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0016bc:	f003 0307 	and.w	r3, r3, #7
1a0016c0:	2b04      	cmp	r3, #4
1a0016c2:	d027      	beq.n	1a001714 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0016c4:	4816      	ldr	r0, [pc, #88]	; (1a001720 <Chip_Clock_GetClockInputHz+0xa4>)
1a0016c6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0016c8:	4b16      	ldr	r3, [pc, #88]	; (1a001724 <Chip_Clock_GetClockInputHz+0xa8>)
1a0016ca:	6818      	ldr	r0, [r3, #0]
		break;
1a0016cc:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0016ce:	4b16      	ldr	r3, [pc, #88]	; (1a001728 <Chip_Clock_GetClockInputHz+0xac>)
1a0016d0:	6818      	ldr	r0, [r3, #0]
		break;
1a0016d2:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0016d4:	4b15      	ldr	r3, [pc, #84]	; (1a00172c <Chip_Clock_GetClockInputHz+0xb0>)
1a0016d6:	6818      	ldr	r0, [r3, #0]
		break;
1a0016d8:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0016da:	4b14      	ldr	r3, [pc, #80]	; (1a00172c <Chip_Clock_GetClockInputHz+0xb0>)
1a0016dc:	6858      	ldr	r0, [r3, #4]
		break;
1a0016de:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0016e0:	f000 f868 	bl	1a0017b4 <Chip_Clock_GetMainPLLHz>
		break;
1a0016e4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0016e6:	2100      	movs	r1, #0
1a0016e8:	f000 f89a 	bl	1a001820 <Chip_Clock_GetDivRate>
		break;
1a0016ec:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0016ee:	2101      	movs	r1, #1
1a0016f0:	f000 f896 	bl	1a001820 <Chip_Clock_GetDivRate>
		break;
1a0016f4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0016f6:	2102      	movs	r1, #2
1a0016f8:	f000 f892 	bl	1a001820 <Chip_Clock_GetDivRate>
		break;
1a0016fc:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0016fe:	2103      	movs	r1, #3
1a001700:	f000 f88e 	bl	1a001820 <Chip_Clock_GetDivRate>
		break;
1a001704:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001706:	2104      	movs	r1, #4
1a001708:	f000 f88a 	bl	1a001820 <Chip_Clock_GetDivRate>
		break;
1a00170c:	bd08      	pop	{r3, pc}
		rate = CRYSTAL_32K_FREQ_IN;
1a00170e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a001712:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001714:	4806      	ldr	r0, [pc, #24]	; (1a001730 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a001716:	bd08      	pop	{r3, pc}
1a001718:	00b71b00 	.word	0x00b71b00
1a00171c:	40043000 	.word	0x40043000
1a001720:	017d7840 	.word	0x017d7840
1a001724:	1a002610 	.word	0x1a002610
1a001728:	1a00263c 	.word	0x1a00263c
1a00172c:	100000c8 	.word	0x100000c8
1a001730:	02faf080 	.word	0x02faf080

1a001734 <Chip_Clock_CalcMainPLLValue>:
{
1a001734:	b538      	push	{r3, r4, r5, lr}
1a001736:	4605      	mov	r5, r0
1a001738:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00173a:	7908      	ldrb	r0, [r1, #4]
1a00173c:	f7ff ff9e 	bl	1a00167c <Chip_Clock_GetClockInputHz>
1a001740:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001742:	4b19      	ldr	r3, [pc, #100]	; (1a0017a8 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001744:	442b      	add	r3, r5
1a001746:	4a19      	ldr	r2, [pc, #100]	; (1a0017ac <Chip_Clock_CalcMainPLLValue+0x78>)
1a001748:	4293      	cmp	r3, r2
1a00174a:	d821      	bhi.n	1a001790 <Chip_Clock_CalcMainPLLValue+0x5c>
1a00174c:	b318      	cbz	r0, 1a001796 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00174e:	2380      	movs	r3, #128	; 0x80
1a001750:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001752:	2300      	movs	r3, #0
1a001754:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001756:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001758:	fbb5 f3f0 	udiv	r3, r5, r0
1a00175c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00175e:	4a14      	ldr	r2, [pc, #80]	; (1a0017b0 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001760:	4295      	cmp	r5, r2
1a001762:	d903      	bls.n	1a00176c <Chip_Clock_CalcMainPLLValue+0x38>
1a001764:	fb03 f000 	mul.w	r0, r3, r0
1a001768:	4285      	cmp	r5, r0
1a00176a:	d007      	beq.n	1a00177c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a00176c:	4621      	mov	r1, r4
1a00176e:	4628      	mov	r0, r5
1a001770:	f7ff fe96 	bl	1a0014a0 <pll_get_frac>
		if (!ppll->nsel) {
1a001774:	68a3      	ldr	r3, [r4, #8]
1a001776:	b18b      	cbz	r3, 1a00179c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001778:	3b01      	subs	r3, #1
1a00177a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a00177c:	6923      	ldr	r3, [r4, #16]
1a00177e:	b183      	cbz	r3, 1a0017a2 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001780:	68e2      	ldr	r2, [r4, #12]
1a001782:	b10a      	cbz	r2, 1a001788 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001784:	3a01      	subs	r2, #1
1a001786:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001788:	3b01      	subs	r3, #1
1a00178a:	6123      	str	r3, [r4, #16]
	return 0;
1a00178c:	2000      	movs	r0, #0
1a00178e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001794:	bd38      	pop	{r3, r4, r5, pc}
1a001796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00179a:	bd38      	pop	{r3, r4, r5, pc}
			return -1;
1a00179c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0017a0:	bd38      	pop	{r3, r4, r5, pc}
		return - 1;
1a0017a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0017a6:	bd38      	pop	{r3, r4, r5, pc}
1a0017a8:	ff6b3a10 	.word	0xff6b3a10
1a0017ac:	0b940510 	.word	0x0b940510
1a0017b0:	094c5eff 	.word	0x094c5eff

1a0017b4 <Chip_Clock_GetMainPLLHz>:
{
1a0017b4:	b530      	push	{r4, r5, lr}
1a0017b6:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0017b8:	4d17      	ldr	r5, [pc, #92]	; (1a001818 <Chip_Clock_GetMainPLLHz+0x64>)
1a0017ba:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0017bc:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0017c0:	f7ff ff5c 	bl	1a00167c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0017c4:	4b15      	ldr	r3, [pc, #84]	; (1a00181c <Chip_Clock_GetMainPLLHz+0x68>)
1a0017c6:	681b      	ldr	r3, [r3, #0]
1a0017c8:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0017ca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0017cc:	f013 0f01 	tst.w	r3, #1
1a0017d0:	d01f      	beq.n	1a001812 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a0017d2:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0017d6:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0017da:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0017de:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0017e2:	3201      	adds	r2, #1
	n = nsel + 1;
1a0017e4:	3301      	adds	r3, #1
	p = ptab[psel];
1a0017e6:	f10d 0e08 	add.w	lr, sp, #8
1a0017ea:	4471      	add	r1, lr
1a0017ec:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0017f0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0017f4:	d108      	bne.n	1a001808 <Chip_Clock_GetMainPLLHz+0x54>
1a0017f6:	b93d      	cbnz	r5, 1a001808 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0017f8:	0049      	lsls	r1, r1, #1
1a0017fa:	fbb2 f2f1 	udiv	r2, r2, r1
1a0017fe:	fbb0 f0f3 	udiv	r0, r0, r3
1a001802:	fb00 f002 	mul.w	r0, r0, r2
1a001806:	e005      	b.n	1a001814 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a001808:	fbb0 f0f3 	udiv	r0, r0, r3
1a00180c:	fb00 f002 	mul.w	r0, r0, r2
1a001810:	e000      	b.n	1a001814 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a001812:	2000      	movs	r0, #0
}
1a001814:	b003      	add	sp, #12
1a001816:	bd30      	pop	{r4, r5, pc}
1a001818:	40050000 	.word	0x40050000
1a00181c:	1a0026c8 	.word	0x1a0026c8

1a001820 <Chip_Clock_GetDivRate>:
{
1a001820:	b538      	push	{r3, r4, r5, lr}
1a001822:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001824:	4608      	mov	r0, r1
1a001826:	f7ff ff0d 	bl	1a001644 <Chip_Clock_GetDividerSource>
1a00182a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a00182c:	4620      	mov	r0, r4
1a00182e:	f7ff ff17 	bl	1a001660 <Chip_Clock_GetDividerDivisor>
1a001832:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001834:	4628      	mov	r0, r5
1a001836:	f7ff ff21 	bl	1a00167c <Chip_Clock_GetClockInputHz>
1a00183a:	3401      	adds	r4, #1
}
1a00183c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001840:	bd38      	pop	{r3, r4, r5, pc}
1a001842:	Address 0x000000001a001842 is out of bounds.


1a001844 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001844:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001846:	f100 0416 	add.w	r4, r0, #22
1a00184a:	00a4      	lsls	r4, r4, #2
1a00184c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001850:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001854:	6865      	ldr	r5, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001856:	281b      	cmp	r0, #27
1a001858:	d813      	bhi.n	1a001882 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00185a:	2911      	cmp	r1, #17
1a00185c:	d01a      	beq.n	1a001894 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00185e:	4c0e      	ldr	r4, [pc, #56]	; (1a001898 <Chip_Clock_SetBaseClock+0x54>)
1a001860:	402c      	ands	r4, r5

			if (autoblocken) {
1a001862:	b10a      	cbz	r2, 1a001868 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001864:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a001868:	b10b      	cbz	r3, 1a00186e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00186a:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00186e:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001872:	3016      	adds	r0, #22
1a001874:	0080      	lsls	r0, r0, #2
1a001876:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00187a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00187e:	6044      	str	r4, [r0, #4]
1a001880:	e008      	b.n	1a001894 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001882:	f045 0501 	orr.w	r5, r5, #1
1a001886:	3016      	adds	r0, #22
1a001888:	0080      	lsls	r0, r0, #2
1a00188a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00188e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001892:	6045      	str	r5, [r0, #4]
	}
}
1a001894:	bc30      	pop	{r4, r5}
1a001896:	4770      	bx	lr
1a001898:	e0fff7fe 	.word	0xe0fff7fe

1a00189c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00189c:	281b      	cmp	r0, #27
1a00189e:	d901      	bls.n	1a0018a4 <Chip_Clock_GetBaseClock+0x8>
		return CLKINPUT_PD;
1a0018a0:	2011      	movs	r0, #17
1a0018a2:	4770      	bx	lr
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0018a4:	3016      	adds	r0, #22
1a0018a6:	0080      	lsls	r0, r0, #2
1a0018a8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0018ac:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0018b0:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0018b2:	f010 0f01 	tst.w	r0, #1
1a0018b6:	d001      	beq.n	1a0018bc <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
1a0018b8:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0018ba:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0018bc:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0018c0:	4770      	bx	lr

1a0018c2 <Chip_Clock_GetBaseClocktHz>:
{
1a0018c2:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0018c4:	f7ff ffea 	bl	1a00189c <Chip_Clock_GetBaseClock>
1a0018c8:	f7ff fed8 	bl	1a00167c <Chip_Clock_GetClockInputHz>
}
1a0018cc:	bd08      	pop	{r3, pc}
1a0018ce:	Address 0x000000001a0018ce is out of bounds.


1a0018d0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0018d0:	b969      	cbnz	r1, 1a0018ee <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a0018d2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0018d4:	b10a      	cbz	r2, 1a0018da <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0018d6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0018da:	2b02      	cmp	r3, #2
1a0018dc:	d009      	beq.n	1a0018f2 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0018de:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0018e2:	d209      	bcs.n	1a0018f8 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0018e4:	3020      	adds	r0, #32
1a0018e6:	4b07      	ldr	r3, [pc, #28]	; (1a001904 <Chip_Clock_EnableOpts+0x34>)
1a0018e8:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0018ec:	4770      	bx	lr
		reg |= (1 << 1);
1a0018ee:	2103      	movs	r1, #3
1a0018f0:	e7f0      	b.n	1a0018d4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0018f2:	f041 0120 	orr.w	r1, r1, #32
1a0018f6:	e7f2      	b.n	1a0018de <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0018f8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0018fc:	4b02      	ldr	r3, [pc, #8]	; (1a001908 <Chip_Clock_EnableOpts+0x38>)
1a0018fe:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001902:	4770      	bx	lr
1a001904:	40051000 	.word	0x40051000
1a001908:	40052000 	.word	0x40052000

1a00190c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a00190c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001910:	d208      	bcs.n	1a001924 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001912:	4a09      	ldr	r2, [pc, #36]	; (1a001938 <Chip_Clock_Enable+0x2c>)
1a001914:	3020      	adds	r0, #32
1a001916:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00191a:	f043 0301 	orr.w	r3, r3, #1
1a00191e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001922:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001924:	4a05      	ldr	r2, [pc, #20]	; (1a00193c <Chip_Clock_Enable+0x30>)
1a001926:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00192a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00192e:	f043 0301 	orr.w	r3, r3, #1
1a001932:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001936:	4770      	bx	lr
1a001938:	40051000 	.word	0x40051000
1a00193c:	40052000 	.word	0x40052000

1a001940 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001940:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001942:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001946:	d309      	bcc.n	1a00195c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001948:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00194c:	4a0d      	ldr	r2, [pc, #52]	; (1a001984 <Chip_Clock_GetRate+0x44>)
1a00194e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001952:	f014 0f01 	tst.w	r4, #1
1a001956:	d107      	bne.n	1a001968 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001958:	2000      	movs	r0, #0
	}

	return rate;
}
1a00195a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00195c:	f100 0320 	add.w	r3, r0, #32
1a001960:	4a09      	ldr	r2, [pc, #36]	; (1a001988 <Chip_Clock_GetRate+0x48>)
1a001962:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001966:	e7f4      	b.n	1a001952 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001968:	f7ff fe20 	bl	1a0015ac <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00196c:	f7ff ffa9 	bl	1a0018c2 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001970:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001974:	d103      	bne.n	1a00197e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001976:	2301      	movs	r3, #1
		rate = rate / div;
1a001978:	fbb0 f0f3 	udiv	r0, r0, r3
1a00197c:	bd10      	pop	{r4, pc}
			div = 2;/* No other dividers supported */
1a00197e:	2302      	movs	r3, #2
1a001980:	e7fa      	b.n	1a001978 <Chip_Clock_GetRate+0x38>
1a001982:	bf00      	nop
1a001984:	40052000 	.word	0x40052000
1a001988:	40051000 	.word	0x40051000

1a00198c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00198c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00198e:	2069      	movs	r0, #105	; 0x69
1a001990:	f7ff ffd6 	bl	1a001940 <Chip_Clock_GetRate>
1a001994:	4b01      	ldr	r3, [pc, #4]	; (1a00199c <SystemCoreClockUpdate+0x10>)
1a001996:	6018      	str	r0, [r3, #0]
1a001998:	bd08      	pop	{r3, pc}
1a00199a:	bf00      	nop
1a00199c:	100000dc 	.word	0x100000dc

1a0019a0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0019a0:	b570      	push	{r4, r5, r6, lr}
1a0019a2:	b08a      	sub	sp, #40	; 0x28
1a0019a4:	4605      	mov	r5, r0
1a0019a6:	460e      	mov	r6, r1
1a0019a8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0019aa:	f242 7310 	movw	r3, #10000	; 0x2710
1a0019ae:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0019b0:	2806      	cmp	r0, #6
1a0019b2:	d018      	beq.n	1a0019e6 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0019b4:	2300      	movs	r3, #0
1a0019b6:	2201      	movs	r2, #1
1a0019b8:	4629      	mov	r1, r5
1a0019ba:	2004      	movs	r0, #4
1a0019bc:	f7ff ff42 	bl	1a001844 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0019c0:	4a49      	ldr	r2, [pc, #292]	; (1a001ae8 <Chip_SetupCoreClock+0x148>)
1a0019c2:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0019c4:	f043 0301 	orr.w	r3, r3, #1
1a0019c8:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0019ca:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0019ce:	a901      	add	r1, sp, #4
1a0019d0:	4630      	mov	r0, r6
1a0019d2:	f7ff feaf 	bl	1a001734 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0019d6:	4b45      	ldr	r3, [pc, #276]	; (1a001aec <Chip_SetupCoreClock+0x14c>)
1a0019d8:	429e      	cmp	r6, r3
1a0019da:	d916      	bls.n	1a001a0a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0019dc:	9b01      	ldr	r3, [sp, #4]
1a0019de:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0019e2:	d003      	beq.n	1a0019ec <Chip_SetupCoreClock+0x4c>
1a0019e4:	e7fe      	b.n	1a0019e4 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0019e6:	f7ff fe07 	bl	1a0015f8 <Chip_Clock_EnableCrystal>
1a0019ea:	e7e3      	b.n	1a0019b4 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0019ec:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0019f0:	d005      	beq.n	1a0019fe <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0019f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0019f6:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0019f8:	2500      	movs	r5, #0
			direct = 1;
1a0019fa:	2601      	movs	r6, #1
1a0019fc:	e007      	b.n	1a001a0e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0019fe:	9b04      	ldr	r3, [sp, #16]
1a001a00:	3301      	adds	r3, #1
1a001a02:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001a04:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001a06:	2600      	movs	r6, #0
1a001a08:	e001      	b.n	1a001a0e <Chip_SetupCoreClock+0x6e>
1a001a0a:	2500      	movs	r5, #0
1a001a0c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001a0e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001a12:	9b01      	ldr	r3, [sp, #4]
1a001a14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001a18:	9a05      	ldr	r2, [sp, #20]
1a001a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001a1e:	9a03      	ldr	r2, [sp, #12]
1a001a20:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001a24:	9a04      	ldr	r2, [sp, #16]
1a001a26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001a2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001a2e:	4a2e      	ldr	r2, [pc, #184]	; (1a001ae8 <Chip_SetupCoreClock+0x148>)
1a001a30:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001a32:	4b2d      	ldr	r3, [pc, #180]	; (1a001ae8 <Chip_SetupCoreClock+0x148>)
1a001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001a36:	f013 0f01 	tst.w	r3, #1
1a001a3a:	d0fa      	beq.n	1a001a32 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001a3c:	2300      	movs	r3, #0
1a001a3e:	2201      	movs	r2, #1
1a001a40:	2109      	movs	r1, #9
1a001a42:	2004      	movs	r0, #4
1a001a44:	f7ff fefe 	bl	1a001844 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001a48:	b1fe      	cbz	r6, 1a001a8a <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001a4a:	f242 7310 	movw	r3, #10000	; 0x2710
1a001a4e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001a52:	1e5a      	subs	r2, r3, #1
1a001a54:	9209      	str	r2, [sp, #36]	; 0x24
1a001a56:	2b00      	cmp	r3, #0
1a001a58:	d1fa      	bne.n	1a001a50 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001a5a:	9b01      	ldr	r3, [sp, #4]
1a001a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001a60:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001a62:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001a66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001a6a:	9a05      	ldr	r2, [sp, #20]
1a001a6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001a70:	9a03      	ldr	r2, [sp, #12]
1a001a72:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001a76:	9a04      	ldr	r2, [sp, #16]
1a001a78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001a80:	4a19      	ldr	r2, [pc, #100]	; (1a001ae8 <Chip_SetupCoreClock+0x148>)
1a001a82:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001a84:	b36c      	cbz	r4, 1a001ae2 <Chip_SetupCoreClock+0x142>
1a001a86:	2400      	movs	r4, #0
1a001a88:	e029      	b.n	1a001ade <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a001a8a:	2d00      	cmp	r5, #0
1a001a8c:	d0fa      	beq.n	1a001a84 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001a8e:	f242 7310 	movw	r3, #10000	; 0x2710
1a001a92:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001a96:	1e5a      	subs	r2, r3, #1
1a001a98:	9209      	str	r2, [sp, #36]	; 0x24
1a001a9a:	2b00      	cmp	r3, #0
1a001a9c:	d1fa      	bne.n	1a001a94 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a001a9e:	9b04      	ldr	r3, [sp, #16]
1a001aa0:	1e5a      	subs	r2, r3, #1
1a001aa2:	9204      	str	r2, [sp, #16]
1a001aa4:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001aa8:	9b01      	ldr	r3, [sp, #4]
1a001aaa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001aae:	9905      	ldr	r1, [sp, #20]
1a001ab0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001ab4:	9903      	ldr	r1, [sp, #12]
1a001ab6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001aba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001abe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001ac2:	4a09      	ldr	r2, [pc, #36]	; (1a001ae8 <Chip_SetupCoreClock+0x148>)
1a001ac4:	6453      	str	r3, [r2, #68]	; 0x44
1a001ac6:	e7dd      	b.n	1a001a84 <Chip_SetupCoreClock+0xe4>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001ac8:	4809      	ldr	r0, [pc, #36]	; (1a001af0 <Chip_SetupCoreClock+0x150>)
1a001aca:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001ace:	78cb      	ldrb	r3, [r1, #3]
1a001ad0:	788a      	ldrb	r2, [r1, #2]
1a001ad2:	7849      	ldrb	r1, [r1, #1]
1a001ad4:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001ad8:	f7ff feb4 	bl	1a001844 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001adc:	3401      	adds	r4, #1
1a001ade:	2c11      	cmp	r4, #17
1a001ae0:	d9f2      	bls.n	1a001ac8 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001ae2:	b00a      	add	sp, #40	; 0x28
1a001ae4:	bd70      	pop	{r4, r5, r6, pc}
1a001ae6:	bf00      	nop
1a001ae8:	40050000 	.word	0x40050000
1a001aec:	068e7780 	.word	0x068e7780
1a001af0:	1a002740 	.word	0x1a002740

1a001af4 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a001af4:	4770      	bx	lr
1a001af6:	Address 0x000000001a001af6 is out of bounds.


1a001af8 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001af8:	4b03      	ldr	r3, [pc, #12]	; (1a001b08 <Chip_SSP_GetClockIndex+0x10>)
1a001afa:	4298      	cmp	r0, r3
1a001afc:	d001      	beq.n	1a001b02 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001afe:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001b00:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001b02:	20a5      	movs	r0, #165	; 0xa5
1a001b04:	4770      	bx	lr
1a001b06:	bf00      	nop
1a001b08:	400c5000 	.word	0x400c5000

1a001b0c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001b0c:	4b04      	ldr	r3, [pc, #16]	; (1a001b20 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001b0e:	4298      	cmp	r0, r3
1a001b10:	d002      	beq.n	1a001b18 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001b12:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a001b16:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001b18:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001b1c:	4770      	bx	lr
1a001b1e:	bf00      	nop
1a001b20:	400c5000 	.word	0x400c5000

1a001b24 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001b24:	6803      	ldr	r3, [r0, #0]
1a001b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001b2a:	0209      	lsls	r1, r1, #8
1a001b2c:	b289      	uxth	r1, r1
1a001b2e:	430b      	orrs	r3, r1
1a001b30:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a001b32:	6102      	str	r2, [r0, #16]
1a001b34:	4770      	bx	lr

1a001b36 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001b36:	b570      	push	{r4, r5, r6, lr}
1a001b38:	4606      	mov	r6, r0
1a001b3a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001b3c:	f7ff ffe6 	bl	1a001b0c <Chip_SSP_GetPeriphClockIndex>
1a001b40:	f7ff fefe 	bl	1a001940 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001b44:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a001b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001b4a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001b4c:	e000      	b.n	1a001b50 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001b4e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001b50:	42ab      	cmp	r3, r5
1a001b52:	d90b      	bls.n	1a001b6c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001b54:	1c4c      	adds	r4, r1, #1
1a001b56:	fb04 f302 	mul.w	r3, r4, r2
1a001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001b5e:	429d      	cmp	r5, r3
1a001b60:	d2f6      	bcs.n	1a001b50 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001b62:	2cff      	cmp	r4, #255	; 0xff
1a001b64:	d9f3      	bls.n	1a001b4e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001b66:	3202      	adds	r2, #2
				cr0_div = 0;
1a001b68:	2100      	movs	r1, #0
1a001b6a:	e7f1      	b.n	1a001b50 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001b6c:	4630      	mov	r0, r6
1a001b6e:	f7ff ffd9 	bl	1a001b24 <Chip_SSP_SetClockRate>
1a001b72:	bd70      	pop	{r4, r5, r6, pc}

1a001b74 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001b74:	b510      	push	{r4, lr}
1a001b76:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001b78:	f7ff ffbe 	bl	1a001af8 <Chip_SSP_GetClockIndex>
1a001b7c:	f7ff fec6 	bl	1a00190c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001b80:	4620      	mov	r0, r4
1a001b82:	f7ff ffc3 	bl	1a001b0c <Chip_SSP_GetPeriphClockIndex>
1a001b86:	f7ff fec1 	bl	1a00190c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001b8a:	6863      	ldr	r3, [r4, #4]
1a001b8c:	f023 0304 	bic.w	r3, r3, #4
1a001b90:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001b92:	6823      	ldr	r3, [r4, #0]
1a001b94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001b98:	f043 0307 	orr.w	r3, r3, #7
1a001b9c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001b9e:	4902      	ldr	r1, [pc, #8]	; (1a001ba8 <Chip_SSP_Init+0x34>)
1a001ba0:	4620      	mov	r0, r4
1a001ba2:	f7ff ffc8 	bl	1a001b36 <Chip_SSP_SetBitRate>
1a001ba6:	bd10      	pop	{r4, pc}
1a001ba8:	000186a0 	.word	0x000186a0

1a001bac <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001bac:	2901      	cmp	r1, #1
1a001bae:	d000      	beq.n	1a001bb2 <Chip_I2C_EventHandler+0x6>
1a001bb0:	4770      	bx	lr
		return;
	}

	stat = &iic->mXfer->status;
1a001bb2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001bb6:	0082      	lsls	r2, r0, #2
1a001bb8:	4b03      	ldr	r3, [pc, #12]	; (1a001bc8 <Chip_I2C_EventHandler+0x1c>)
1a001bba:	4413      	add	r3, r2
1a001bbc:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001bbe:	7d13      	ldrb	r3, [r2, #20]
1a001bc0:	b2db      	uxtb	r3, r3
1a001bc2:	2b04      	cmp	r3, #4
1a001bc4:	d0fb      	beq.n	1a001bbe <Chip_I2C_EventHandler+0x12>
1a001bc6:	e7f3      	b.n	1a001bb0 <Chip_I2C_EventHandler+0x4>
1a001bc8:	10000000 	.word	0x10000000

1a001bcc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001bcc:	b570      	push	{r4, r5, r6, lr}
1a001bce:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001bd0:	4e06      	ldr	r6, [pc, #24]	; (1a001bec <Chip_I2C_Init+0x20>)
1a001bd2:	00c4      	lsls	r4, r0, #3
1a001bd4:	1a22      	subs	r2, r4, r0
1a001bd6:	0093      	lsls	r3, r2, #2
1a001bd8:	4433      	add	r3, r6
1a001bda:	8898      	ldrh	r0, [r3, #4]
1a001bdc:	f7ff fe96 	bl	1a00190c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001be0:	1b64      	subs	r4, r4, r5
1a001be2:	00a3      	lsls	r3, r4, #2
1a001be4:	58f3      	ldr	r3, [r6, r3]
1a001be6:	226c      	movs	r2, #108	; 0x6c
1a001be8:	619a      	str	r2, [r3, #24]
1a001bea:	bd70      	pop	{r4, r5, r6, pc}
1a001bec:	10000000 	.word	0x10000000

1a001bf0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001bf4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a001bf6:	4e0b      	ldr	r6, [pc, #44]	; (1a001c24 <Chip_I2C_SetClockRate+0x34>)
1a001bf8:	00c5      	lsls	r5, r0, #3
1a001bfa:	1a2b      	subs	r3, r5, r0
1a001bfc:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001c00:	eb06 0308 	add.w	r3, r6, r8
1a001c04:	8898      	ldrh	r0, [r3, #4]
1a001c06:	f7ff fe9b 	bl	1a001940 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a001c0a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001c0e:	f856 3008 	ldr.w	r3, [r6, r8]
1a001c12:	0842      	lsrs	r2, r0, #1
1a001c14:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a001c16:	f856 3008 	ldr.w	r3, [r6, r8]
1a001c1a:	691a      	ldr	r2, [r3, #16]
1a001c1c:	1a80      	subs	r0, r0, r2
1a001c1e:	6158      	str	r0, [r3, #20]
1a001c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001c24:	10000000 	.word	0x10000000

1a001c28 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001c28:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001c2a:	4b0d      	ldr	r3, [pc, #52]	; (1a001c60 <SystemInit+0x38>)
1a001c2c:	4a0d      	ldr	r2, [pc, #52]	; (1a001c64 <SystemInit+0x3c>)
1a001c2e:	609a      	str	r2, [r3, #8]
  mvfr0 = FPU->MVFR0;
1a001c30:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001c34:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001c36:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001c3a:	2b20      	cmp	r3, #32
1a001c3c:	d00d      	beq.n	1a001c5a <SystemInit+0x32>
    return 0U;           /* No FPU */
1a001c3e:	2300      	movs	r3, #0

   if (SCB_GetFPUType() > 0)
1a001c40:	b133      	cbz	r3, 1a001c50 <SystemInit+0x28>
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001c42:	4a07      	ldr	r2, [pc, #28]	; (1a001c60 <SystemInit+0x38>)
1a001c44:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Board specific SystemInit */
   Board_SystemInit();
1a001c50:	f7ff fab8 	bl	1a0011c4 <Board_SystemInit>
   Board_Init();
1a001c54:	f7ff fa4a 	bl	1a0010ec <Board_Init>
1a001c58:	bd08      	pop	{r3, pc}
    return 1U;           /* Single precision FPU */
1a001c5a:	2301      	movs	r3, #1
1a001c5c:	e7f0      	b.n	1a001c40 <SystemInit+0x18>
1a001c5e:	bf00      	nop
1a001c60:	e000ed00 	.word	0xe000ed00
1a001c64:	1a000000 	.word	0x1a000000

1a001c68 <__aeabi_uldivmod>:
1a001c68:	b953      	cbnz	r3, 1a001c80 <__aeabi_uldivmod+0x18>
1a001c6a:	b94a      	cbnz	r2, 1a001c80 <__aeabi_uldivmod+0x18>
1a001c6c:	2900      	cmp	r1, #0
1a001c6e:	bf08      	it	eq
1a001c70:	2800      	cmpeq	r0, #0
1a001c72:	bf1c      	itt	ne
1a001c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001c7c:	f000 b97a 	b.w	1a001f74 <__aeabi_idiv0>
1a001c80:	f1ad 0c08 	sub.w	ip, sp, #8
1a001c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001c88:	f000 f806 	bl	1a001c98 <__udivmoddi4>
1a001c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001c94:	b004      	add	sp, #16
1a001c96:	4770      	bx	lr

1a001c98 <__udivmoddi4>:
1a001c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001c9c:	468c      	mov	ip, r1
1a001c9e:	460d      	mov	r5, r1
1a001ca0:	4604      	mov	r4, r0
1a001ca2:	9e08      	ldr	r6, [sp, #32]
1a001ca4:	2b00      	cmp	r3, #0
1a001ca6:	d151      	bne.n	1a001d4c <__udivmoddi4+0xb4>
1a001ca8:	428a      	cmp	r2, r1
1a001caa:	4617      	mov	r7, r2
1a001cac:	d96d      	bls.n	1a001d8a <__udivmoddi4+0xf2>
1a001cae:	fab2 fe82 	clz	lr, r2
1a001cb2:	f1be 0f00 	cmp.w	lr, #0
1a001cb6:	d00b      	beq.n	1a001cd0 <__udivmoddi4+0x38>
1a001cb8:	f1ce 0c20 	rsb	ip, lr, #32
1a001cbc:	fa01 f50e 	lsl.w	r5, r1, lr
1a001cc0:	fa20 fc0c 	lsr.w	ip, r0, ip
1a001cc4:	fa02 f70e 	lsl.w	r7, r2, lr
1a001cc8:	ea4c 0c05 	orr.w	ip, ip, r5
1a001ccc:	fa00 f40e 	lsl.w	r4, r0, lr
1a001cd0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a001cd4:	0c25      	lsrs	r5, r4, #16
1a001cd6:	fbbc f8fa 	udiv	r8, ip, sl
1a001cda:	fa1f f987 	uxth.w	r9, r7
1a001cde:	fb0a cc18 	mls	ip, sl, r8, ip
1a001ce2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a001ce6:	fb08 f309 	mul.w	r3, r8, r9
1a001cea:	42ab      	cmp	r3, r5
1a001cec:	d90a      	bls.n	1a001d04 <__udivmoddi4+0x6c>
1a001cee:	19ed      	adds	r5, r5, r7
1a001cf0:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a001cf4:	f080 8123 	bcs.w	1a001f3e <__udivmoddi4+0x2a6>
1a001cf8:	42ab      	cmp	r3, r5
1a001cfa:	f240 8120 	bls.w	1a001f3e <__udivmoddi4+0x2a6>
1a001cfe:	f1a8 0802 	sub.w	r8, r8, #2
1a001d02:	443d      	add	r5, r7
1a001d04:	1aed      	subs	r5, r5, r3
1a001d06:	b2a4      	uxth	r4, r4
1a001d08:	fbb5 f0fa 	udiv	r0, r5, sl
1a001d0c:	fb0a 5510 	mls	r5, sl, r0, r5
1a001d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a001d14:	fb00 f909 	mul.w	r9, r0, r9
1a001d18:	45a1      	cmp	r9, r4
1a001d1a:	d909      	bls.n	1a001d30 <__udivmoddi4+0x98>
1a001d1c:	19e4      	adds	r4, r4, r7
1a001d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001d22:	f080 810a 	bcs.w	1a001f3a <__udivmoddi4+0x2a2>
1a001d26:	45a1      	cmp	r9, r4
1a001d28:	f240 8107 	bls.w	1a001f3a <__udivmoddi4+0x2a2>
1a001d2c:	3802      	subs	r0, #2
1a001d2e:	443c      	add	r4, r7
1a001d30:	eba4 0409 	sub.w	r4, r4, r9
1a001d34:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a001d38:	2100      	movs	r1, #0
1a001d3a:	2e00      	cmp	r6, #0
1a001d3c:	d061      	beq.n	1a001e02 <__udivmoddi4+0x16a>
1a001d3e:	fa24 f40e 	lsr.w	r4, r4, lr
1a001d42:	2300      	movs	r3, #0
1a001d44:	6034      	str	r4, [r6, #0]
1a001d46:	6073      	str	r3, [r6, #4]
1a001d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001d4c:	428b      	cmp	r3, r1
1a001d4e:	d907      	bls.n	1a001d60 <__udivmoddi4+0xc8>
1a001d50:	2e00      	cmp	r6, #0
1a001d52:	d054      	beq.n	1a001dfe <__udivmoddi4+0x166>
1a001d54:	2100      	movs	r1, #0
1a001d56:	e886 0021 	stmia.w	r6, {r0, r5}
1a001d5a:	4608      	mov	r0, r1
1a001d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001d60:	fab3 f183 	clz	r1, r3
1a001d64:	2900      	cmp	r1, #0
1a001d66:	f040 808e 	bne.w	1a001e86 <__udivmoddi4+0x1ee>
1a001d6a:	42ab      	cmp	r3, r5
1a001d6c:	d302      	bcc.n	1a001d74 <__udivmoddi4+0xdc>
1a001d6e:	4282      	cmp	r2, r0
1a001d70:	f200 80fa 	bhi.w	1a001f68 <__udivmoddi4+0x2d0>
1a001d74:	1a84      	subs	r4, r0, r2
1a001d76:	eb65 0503 	sbc.w	r5, r5, r3
1a001d7a:	2001      	movs	r0, #1
1a001d7c:	46ac      	mov	ip, r5
1a001d7e:	2e00      	cmp	r6, #0
1a001d80:	d03f      	beq.n	1a001e02 <__udivmoddi4+0x16a>
1a001d82:	e886 1010 	stmia.w	r6, {r4, ip}
1a001d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001d8a:	b912      	cbnz	r2, 1a001d92 <__udivmoddi4+0xfa>
1a001d8c:	2701      	movs	r7, #1
1a001d8e:	fbb7 f7f2 	udiv	r7, r7, r2
1a001d92:	fab7 fe87 	clz	lr, r7
1a001d96:	f1be 0f00 	cmp.w	lr, #0
1a001d9a:	d134      	bne.n	1a001e06 <__udivmoddi4+0x16e>
1a001d9c:	1beb      	subs	r3, r5, r7
1a001d9e:	0c3a      	lsrs	r2, r7, #16
1a001da0:	fa1f fc87 	uxth.w	ip, r7
1a001da4:	2101      	movs	r1, #1
1a001da6:	fbb3 f8f2 	udiv	r8, r3, r2
1a001daa:	0c25      	lsrs	r5, r4, #16
1a001dac:	fb02 3318 	mls	r3, r2, r8, r3
1a001db0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a001db4:	fb0c f308 	mul.w	r3, ip, r8
1a001db8:	42ab      	cmp	r3, r5
1a001dba:	d907      	bls.n	1a001dcc <__udivmoddi4+0x134>
1a001dbc:	19ed      	adds	r5, r5, r7
1a001dbe:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a001dc2:	d202      	bcs.n	1a001dca <__udivmoddi4+0x132>
1a001dc4:	42ab      	cmp	r3, r5
1a001dc6:	f200 80d1 	bhi.w	1a001f6c <__udivmoddi4+0x2d4>
1a001dca:	4680      	mov	r8, r0
1a001dcc:	1aed      	subs	r5, r5, r3
1a001dce:	b2a3      	uxth	r3, r4
1a001dd0:	fbb5 f0f2 	udiv	r0, r5, r2
1a001dd4:	fb02 5510 	mls	r5, r2, r0, r5
1a001dd8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a001ddc:	fb0c fc00 	mul.w	ip, ip, r0
1a001de0:	45a4      	cmp	ip, r4
1a001de2:	d907      	bls.n	1a001df4 <__udivmoddi4+0x15c>
1a001de4:	19e4      	adds	r4, r4, r7
1a001de6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001dea:	d202      	bcs.n	1a001df2 <__udivmoddi4+0x15a>
1a001dec:	45a4      	cmp	ip, r4
1a001dee:	f200 80b8 	bhi.w	1a001f62 <__udivmoddi4+0x2ca>
1a001df2:	4618      	mov	r0, r3
1a001df4:	eba4 040c 	sub.w	r4, r4, ip
1a001df8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a001dfc:	e79d      	b.n	1a001d3a <__udivmoddi4+0xa2>
1a001dfe:	4631      	mov	r1, r6
1a001e00:	4630      	mov	r0, r6
1a001e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001e06:	f1ce 0420 	rsb	r4, lr, #32
1a001e0a:	fa05 f30e 	lsl.w	r3, r5, lr
1a001e0e:	fa07 f70e 	lsl.w	r7, r7, lr
1a001e12:	fa20 f804 	lsr.w	r8, r0, r4
1a001e16:	0c3a      	lsrs	r2, r7, #16
1a001e18:	fa25 f404 	lsr.w	r4, r5, r4
1a001e1c:	ea48 0803 	orr.w	r8, r8, r3
1a001e20:	fbb4 f1f2 	udiv	r1, r4, r2
1a001e24:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a001e28:	fb02 4411 	mls	r4, r2, r1, r4
1a001e2c:	fa1f fc87 	uxth.w	ip, r7
1a001e30:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a001e34:	fb01 f30c 	mul.w	r3, r1, ip
1a001e38:	42ab      	cmp	r3, r5
1a001e3a:	fa00 f40e 	lsl.w	r4, r0, lr
1a001e3e:	d909      	bls.n	1a001e54 <__udivmoddi4+0x1bc>
1a001e40:	19ed      	adds	r5, r5, r7
1a001e42:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
1a001e46:	f080 808a 	bcs.w	1a001f5e <__udivmoddi4+0x2c6>
1a001e4a:	42ab      	cmp	r3, r5
1a001e4c:	f240 8087 	bls.w	1a001f5e <__udivmoddi4+0x2c6>
1a001e50:	3902      	subs	r1, #2
1a001e52:	443d      	add	r5, r7
1a001e54:	1aeb      	subs	r3, r5, r3
1a001e56:	fa1f f588 	uxth.w	r5, r8
1a001e5a:	fbb3 f0f2 	udiv	r0, r3, r2
1a001e5e:	fb02 3310 	mls	r3, r2, r0, r3
1a001e62:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a001e66:	fb00 f30c 	mul.w	r3, r0, ip
1a001e6a:	42ab      	cmp	r3, r5
1a001e6c:	d907      	bls.n	1a001e7e <__udivmoddi4+0x1e6>
1a001e6e:	19ed      	adds	r5, r5, r7
1a001e70:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
1a001e74:	d26f      	bcs.n	1a001f56 <__udivmoddi4+0x2be>
1a001e76:	42ab      	cmp	r3, r5
1a001e78:	d96d      	bls.n	1a001f56 <__udivmoddi4+0x2be>
1a001e7a:	3802      	subs	r0, #2
1a001e7c:	443d      	add	r5, r7
1a001e7e:	1aeb      	subs	r3, r5, r3
1a001e80:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a001e84:	e78f      	b.n	1a001da6 <__udivmoddi4+0x10e>
1a001e86:	f1c1 0720 	rsb	r7, r1, #32
1a001e8a:	fa22 f807 	lsr.w	r8, r2, r7
1a001e8e:	408b      	lsls	r3, r1
1a001e90:	fa05 f401 	lsl.w	r4, r5, r1
1a001e94:	ea48 0303 	orr.w	r3, r8, r3
1a001e98:	fa20 fe07 	lsr.w	lr, r0, r7
1a001e9c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a001ea0:	40fd      	lsrs	r5, r7
1a001ea2:	ea4e 0e04 	orr.w	lr, lr, r4
1a001ea6:	fbb5 f9fc 	udiv	r9, r5, ip
1a001eaa:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a001eae:	fb0c 5519 	mls	r5, ip, r9, r5
1a001eb2:	fa1f f883 	uxth.w	r8, r3
1a001eb6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a001eba:	fb09 f408 	mul.w	r4, r9, r8
1a001ebe:	42ac      	cmp	r4, r5
1a001ec0:	fa02 f201 	lsl.w	r2, r2, r1
1a001ec4:	fa00 fa01 	lsl.w	sl, r0, r1
1a001ec8:	d908      	bls.n	1a001edc <__udivmoddi4+0x244>
1a001eca:	18ed      	adds	r5, r5, r3
1a001ecc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001ed0:	d243      	bcs.n	1a001f5a <__udivmoddi4+0x2c2>
1a001ed2:	42ac      	cmp	r4, r5
1a001ed4:	d941      	bls.n	1a001f5a <__udivmoddi4+0x2c2>
1a001ed6:	f1a9 0902 	sub.w	r9, r9, #2
1a001eda:	441d      	add	r5, r3
1a001edc:	1b2d      	subs	r5, r5, r4
1a001ede:	fa1f fe8e 	uxth.w	lr, lr
1a001ee2:	fbb5 f0fc 	udiv	r0, r5, ip
1a001ee6:	fb0c 5510 	mls	r5, ip, r0, r5
1a001eea:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a001eee:	fb00 f808 	mul.w	r8, r0, r8
1a001ef2:	45a0      	cmp	r8, r4
1a001ef4:	d907      	bls.n	1a001f06 <__udivmoddi4+0x26e>
1a001ef6:	18e4      	adds	r4, r4, r3
1a001ef8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
1a001efc:	d229      	bcs.n	1a001f52 <__udivmoddi4+0x2ba>
1a001efe:	45a0      	cmp	r8, r4
1a001f00:	d927      	bls.n	1a001f52 <__udivmoddi4+0x2ba>
1a001f02:	3802      	subs	r0, #2
1a001f04:	441c      	add	r4, r3
1a001f06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001f0a:	eba4 0408 	sub.w	r4, r4, r8
1a001f0e:	fba0 8902 	umull	r8, r9, r0, r2
1a001f12:	454c      	cmp	r4, r9
1a001f14:	46c6      	mov	lr, r8
1a001f16:	464d      	mov	r5, r9
1a001f18:	d315      	bcc.n	1a001f46 <__udivmoddi4+0x2ae>
1a001f1a:	d012      	beq.n	1a001f42 <__udivmoddi4+0x2aa>
1a001f1c:	b156      	cbz	r6, 1a001f34 <__udivmoddi4+0x29c>
1a001f1e:	ebba 030e 	subs.w	r3, sl, lr
1a001f22:	eb64 0405 	sbc.w	r4, r4, r5
1a001f26:	fa04 f707 	lsl.w	r7, r4, r7
1a001f2a:	40cb      	lsrs	r3, r1
1a001f2c:	431f      	orrs	r7, r3
1a001f2e:	40cc      	lsrs	r4, r1
1a001f30:	6037      	str	r7, [r6, #0]
1a001f32:	6074      	str	r4, [r6, #4]
1a001f34:	2100      	movs	r1, #0
1a001f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001f3a:	4618      	mov	r0, r3
1a001f3c:	e6f8      	b.n	1a001d30 <__udivmoddi4+0x98>
1a001f3e:	4690      	mov	r8, r2
1a001f40:	e6e0      	b.n	1a001d04 <__udivmoddi4+0x6c>
1a001f42:	45c2      	cmp	sl, r8
1a001f44:	d2ea      	bcs.n	1a001f1c <__udivmoddi4+0x284>
1a001f46:	ebb8 0e02 	subs.w	lr, r8, r2
1a001f4a:	eb69 0503 	sbc.w	r5, r9, r3
1a001f4e:	3801      	subs	r0, #1
1a001f50:	e7e4      	b.n	1a001f1c <__udivmoddi4+0x284>
1a001f52:	4628      	mov	r0, r5
1a001f54:	e7d7      	b.n	1a001f06 <__udivmoddi4+0x26e>
1a001f56:	4640      	mov	r0, r8
1a001f58:	e791      	b.n	1a001e7e <__udivmoddi4+0x1e6>
1a001f5a:	4681      	mov	r9, r0
1a001f5c:	e7be      	b.n	1a001edc <__udivmoddi4+0x244>
1a001f5e:	4601      	mov	r1, r0
1a001f60:	e778      	b.n	1a001e54 <__udivmoddi4+0x1bc>
1a001f62:	3802      	subs	r0, #2
1a001f64:	443c      	add	r4, r7
1a001f66:	e745      	b.n	1a001df4 <__udivmoddi4+0x15c>
1a001f68:	4608      	mov	r0, r1
1a001f6a:	e708      	b.n	1a001d7e <__udivmoddi4+0xe6>
1a001f6c:	f1a8 0802 	sub.w	r8, r8, #2
1a001f70:	443d      	add	r5, r7
1a001f72:	e72b      	b.n	1a001dcc <__udivmoddi4+0x134>

1a001f74 <__aeabi_idiv0>:
1a001f74:	4770      	bx	lr
1a001f76:	bf00      	nop

1a001f78 <__libc_init_array>:
1a001f78:	b570      	push	{r4, r5, r6, lr}
1a001f7a:	4e0f      	ldr	r6, [pc, #60]	; (1a001fb8 <__libc_init_array+0x40>)
1a001f7c:	4d0f      	ldr	r5, [pc, #60]	; (1a001fbc <__libc_init_array+0x44>)
1a001f7e:	1b76      	subs	r6, r6, r5
1a001f80:	10b6      	asrs	r6, r6, #2
1a001f82:	bf18      	it	ne
1a001f84:	2400      	movne	r4, #0
1a001f86:	d005      	beq.n	1a001f94 <__libc_init_array+0x1c>
1a001f88:	3401      	adds	r4, #1
1a001f8a:	f855 3b04 	ldr.w	r3, [r5], #4
1a001f8e:	4798      	blx	r3
1a001f90:	42a6      	cmp	r6, r4
1a001f92:	d1f9      	bne.n	1a001f88 <__libc_init_array+0x10>
1a001f94:	4e0a      	ldr	r6, [pc, #40]	; (1a001fc0 <__libc_init_array+0x48>)
1a001f96:	4d0b      	ldr	r5, [pc, #44]	; (1a001fc4 <__libc_init_array+0x4c>)
1a001f98:	1b76      	subs	r6, r6, r5
1a001f9a:	f7fe ff28 	bl	1a000dee <_init>
1a001f9e:	10b6      	asrs	r6, r6, #2
1a001fa0:	bf18      	it	ne
1a001fa2:	2400      	movne	r4, #0
1a001fa4:	d006      	beq.n	1a001fb4 <__libc_init_array+0x3c>
1a001fa6:	3401      	adds	r4, #1
1a001fa8:	f855 3b04 	ldr.w	r3, [r5], #4
1a001fac:	4798      	blx	r3
1a001fae:	42a6      	cmp	r6, r4
1a001fb0:	d1f9      	bne.n	1a001fa6 <__libc_init_array+0x2e>
1a001fb2:	bd70      	pop	{r4, r5, r6, pc}
1a001fb4:	bd70      	pop	{r4, r5, r6, pc}
1a001fb6:	bf00      	nop
1a001fb8:	1a002890 	.word	0x1a002890
1a001fbc:	1a002890 	.word	0x1a002890
1a001fc0:	1a002894 	.word	0x1a002894
1a001fc4:	1a002890 	.word	0x1a002890

1a001fc8 <malloc>:
1a001fc8:	4b02      	ldr	r3, [pc, #8]	; (1a001fd4 <malloc+0xc>)
1a001fca:	4601      	mov	r1, r0
1a001fcc:	6818      	ldr	r0, [r3, #0]
1a001fce:	f000 b8a1 	b.w	1a002114 <_malloc_r>
1a001fd2:	bf00      	nop
1a001fd4:	1000003c 	.word	0x1000003c

1a001fd8 <free>:
1a001fd8:	4b02      	ldr	r3, [pc, #8]	; (1a001fe4 <free+0xc>)
1a001fda:	4601      	mov	r1, r0
1a001fdc:	6818      	ldr	r0, [r3, #0]
1a001fde:	f000 b851 	b.w	1a002084 <_free_r>
1a001fe2:	bf00      	nop
1a001fe4:	1000003c 	.word	0x1000003c

1a001fe8 <memset>:
1a001fe8:	b470      	push	{r4, r5, r6}
1a001fea:	0786      	lsls	r6, r0, #30
1a001fec:	d046      	beq.n	1a00207c <memset+0x94>
1a001fee:	1e54      	subs	r4, r2, #1
1a001ff0:	2a00      	cmp	r2, #0
1a001ff2:	d041      	beq.n	1a002078 <memset+0x90>
1a001ff4:	b2ca      	uxtb	r2, r1
1a001ff6:	4603      	mov	r3, r0
1a001ff8:	e002      	b.n	1a002000 <memset+0x18>
1a001ffa:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a001ffe:	d33b      	bcc.n	1a002078 <memset+0x90>
1a002000:	f803 2b01 	strb.w	r2, [r3], #1
1a002004:	079d      	lsls	r5, r3, #30
1a002006:	d1f8      	bne.n	1a001ffa <memset+0x12>
1a002008:	2c03      	cmp	r4, #3
1a00200a:	d92e      	bls.n	1a00206a <memset+0x82>
1a00200c:	b2cd      	uxtb	r5, r1
1a00200e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a002012:	2c0f      	cmp	r4, #15
1a002014:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a002018:	d919      	bls.n	1a00204e <memset+0x66>
1a00201a:	f103 0210 	add.w	r2, r3, #16
1a00201e:	4626      	mov	r6, r4
1a002020:	3e10      	subs	r6, #16
1a002022:	2e0f      	cmp	r6, #15
1a002024:	f842 5c10 	str.w	r5, [r2, #-16]
1a002028:	f842 5c0c 	str.w	r5, [r2, #-12]
1a00202c:	f842 5c08 	str.w	r5, [r2, #-8]
1a002030:	f842 5c04 	str.w	r5, [r2, #-4]
1a002034:	f102 0210 	add.w	r2, r2, #16
1a002038:	d8f2      	bhi.n	1a002020 <memset+0x38>
1a00203a:	f1a4 0210 	sub.w	r2, r4, #16
1a00203e:	f022 020f 	bic.w	r2, r2, #15
1a002042:	f004 040f 	and.w	r4, r4, #15
1a002046:	3210      	adds	r2, #16
1a002048:	2c03      	cmp	r4, #3
1a00204a:	4413      	add	r3, r2
1a00204c:	d90d      	bls.n	1a00206a <memset+0x82>
1a00204e:	461e      	mov	r6, r3
1a002050:	4622      	mov	r2, r4
1a002052:	3a04      	subs	r2, #4
1a002054:	2a03      	cmp	r2, #3
1a002056:	f846 5b04 	str.w	r5, [r6], #4
1a00205a:	d8fa      	bhi.n	1a002052 <memset+0x6a>
1a00205c:	1f22      	subs	r2, r4, #4
1a00205e:	f022 0203 	bic.w	r2, r2, #3
1a002062:	3204      	adds	r2, #4
1a002064:	4413      	add	r3, r2
1a002066:	f004 0403 	and.w	r4, r4, #3
1a00206a:	b12c      	cbz	r4, 1a002078 <memset+0x90>
1a00206c:	b2c9      	uxtb	r1, r1
1a00206e:	441c      	add	r4, r3
1a002070:	f803 1b01 	strb.w	r1, [r3], #1
1a002074:	429c      	cmp	r4, r3
1a002076:	d1fb      	bne.n	1a002070 <memset+0x88>
1a002078:	bc70      	pop	{r4, r5, r6}
1a00207a:	4770      	bx	lr
1a00207c:	4614      	mov	r4, r2
1a00207e:	4603      	mov	r3, r0
1a002080:	e7c2      	b.n	1a002008 <memset+0x20>
1a002082:	bf00      	nop

1a002084 <_free_r>:
1a002084:	b191      	cbz	r1, 1a0020ac <_free_r+0x28>
1a002086:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a00208a:	3904      	subs	r1, #4
1a00208c:	2b00      	cmp	r3, #0
1a00208e:	bfb8      	it	lt
1a002090:	18c9      	addlt	r1, r1, r3
1a002092:	4b1f      	ldr	r3, [pc, #124]	; (1a002110 <_free_r+0x8c>)
1a002094:	681a      	ldr	r2, [r3, #0]
1a002096:	b1fa      	cbz	r2, 1a0020d8 <_free_r+0x54>
1a002098:	428a      	cmp	r2, r1
1a00209a:	b430      	push	{r4, r5}
1a00209c:	d90a      	bls.n	1a0020b4 <_free_r+0x30>
1a00209e:	6808      	ldr	r0, [r1, #0]
1a0020a0:	180c      	adds	r4, r1, r0
1a0020a2:	42a2      	cmp	r2, r4
1a0020a4:	d026      	beq.n	1a0020f4 <_free_r+0x70>
1a0020a6:	604a      	str	r2, [r1, #4]
1a0020a8:	6019      	str	r1, [r3, #0]
1a0020aa:	bc30      	pop	{r4, r5}
1a0020ac:	4770      	bx	lr
1a0020ae:	428b      	cmp	r3, r1
1a0020b0:	d803      	bhi.n	1a0020ba <_free_r+0x36>
1a0020b2:	461a      	mov	r2, r3
1a0020b4:	6853      	ldr	r3, [r2, #4]
1a0020b6:	2b00      	cmp	r3, #0
1a0020b8:	d1f9      	bne.n	1a0020ae <_free_r+0x2a>
1a0020ba:	6814      	ldr	r4, [r2, #0]
1a0020bc:	1915      	adds	r5, r2, r4
1a0020be:	428d      	cmp	r5, r1
1a0020c0:	d00d      	beq.n	1a0020de <_free_r+0x5a>
1a0020c2:	d806      	bhi.n	1a0020d2 <_free_r+0x4e>
1a0020c4:	6808      	ldr	r0, [r1, #0]
1a0020c6:	180c      	adds	r4, r1, r0
1a0020c8:	429c      	cmp	r4, r3
1a0020ca:	d019      	beq.n	1a002100 <_free_r+0x7c>
1a0020cc:	604b      	str	r3, [r1, #4]
1a0020ce:	6051      	str	r1, [r2, #4]
1a0020d0:	e7eb      	b.n	1a0020aa <_free_r+0x26>
1a0020d2:	230c      	movs	r3, #12
1a0020d4:	6003      	str	r3, [r0, #0]
1a0020d6:	e7e8      	b.n	1a0020aa <_free_r+0x26>
1a0020d8:	604a      	str	r2, [r1, #4]
1a0020da:	6019      	str	r1, [r3, #0]
1a0020dc:	4770      	bx	lr
1a0020de:	6809      	ldr	r1, [r1, #0]
1a0020e0:	440c      	add	r4, r1
1a0020e2:	1911      	adds	r1, r2, r4
1a0020e4:	4299      	cmp	r1, r3
1a0020e6:	6014      	str	r4, [r2, #0]
1a0020e8:	d1df      	bne.n	1a0020aa <_free_r+0x26>
1a0020ea:	cb0a      	ldmia	r3, {r1, r3}
1a0020ec:	440c      	add	r4, r1
1a0020ee:	6053      	str	r3, [r2, #4]
1a0020f0:	6014      	str	r4, [r2, #0]
1a0020f2:	e7da      	b.n	1a0020aa <_free_r+0x26>
1a0020f4:	6814      	ldr	r4, [r2, #0]
1a0020f6:	6852      	ldr	r2, [r2, #4]
1a0020f8:	604a      	str	r2, [r1, #4]
1a0020fa:	4420      	add	r0, r4
1a0020fc:	6008      	str	r0, [r1, #0]
1a0020fe:	e7d3      	b.n	1a0020a8 <_free_r+0x24>
1a002100:	681c      	ldr	r4, [r3, #0]
1a002102:	685b      	ldr	r3, [r3, #4]
1a002104:	604b      	str	r3, [r1, #4]
1a002106:	4420      	add	r0, r4
1a002108:	6008      	str	r0, [r1, #0]
1a00210a:	6051      	str	r1, [r2, #4]
1a00210c:	e7cd      	b.n	1a0020aa <_free_r+0x26>
1a00210e:	bf00      	nop
1a002110:	100000d0 	.word	0x100000d0

1a002114 <_malloc_r>:
1a002114:	b570      	push	{r4, r5, r6, lr}
1a002116:	1ccc      	adds	r4, r1, #3
1a002118:	f024 0403 	bic.w	r4, r4, #3
1a00211c:	3408      	adds	r4, #8
1a00211e:	2c0c      	cmp	r4, #12
1a002120:	bf38      	it	cc
1a002122:	240c      	movcc	r4, #12
1a002124:	2c00      	cmp	r4, #0
1a002126:	4606      	mov	r6, r0
1a002128:	db3b      	blt.n	1a0021a2 <_malloc_r+0x8e>
1a00212a:	42a1      	cmp	r1, r4
1a00212c:	d839      	bhi.n	1a0021a2 <_malloc_r+0x8e>
1a00212e:	4d27      	ldr	r5, [pc, #156]	; (1a0021cc <_malloc_r+0xb8>)
1a002130:	6829      	ldr	r1, [r5, #0]
1a002132:	b151      	cbz	r1, 1a00214a <_malloc_r+0x36>
1a002134:	680a      	ldr	r2, [r1, #0]
1a002136:	1b12      	subs	r2, r2, r4
1a002138:	d404      	bmi.n	1a002144 <_malloc_r+0x30>
1a00213a:	e036      	b.n	1a0021aa <_malloc_r+0x96>
1a00213c:	681a      	ldr	r2, [r3, #0]
1a00213e:	1b12      	subs	r2, r2, r4
1a002140:	d51a      	bpl.n	1a002178 <_malloc_r+0x64>
1a002142:	4619      	mov	r1, r3
1a002144:	684b      	ldr	r3, [r1, #4]
1a002146:	2b00      	cmp	r3, #0
1a002148:	d1f8      	bne.n	1a00213c <_malloc_r+0x28>
1a00214a:	6869      	ldr	r1, [r5, #4]
1a00214c:	2900      	cmp	r1, #0
1a00214e:	d037      	beq.n	1a0021c0 <_malloc_r+0xac>
1a002150:	4621      	mov	r1, r4
1a002152:	4630      	mov	r0, r6
1a002154:	f7fe fe4c 	bl	1a000df0 <_sbrk_r>
1a002158:	1c43      	adds	r3, r0, #1
1a00215a:	d022      	beq.n	1a0021a2 <_malloc_r+0x8e>
1a00215c:	1cc3      	adds	r3, r0, #3
1a00215e:	f023 0503 	bic.w	r5, r3, #3
1a002162:	42a8      	cmp	r0, r5
1a002164:	d005      	beq.n	1a002172 <_malloc_r+0x5e>
1a002166:	1a29      	subs	r1, r5, r0
1a002168:	4630      	mov	r0, r6
1a00216a:	f7fe fe41 	bl	1a000df0 <_sbrk_r>
1a00216e:	3001      	adds	r0, #1
1a002170:	d017      	beq.n	1a0021a2 <_malloc_r+0x8e>
1a002172:	602c      	str	r4, [r5, #0]
1a002174:	462b      	mov	r3, r5
1a002176:	e004      	b.n	1a002182 <_malloc_r+0x6e>
1a002178:	2a0b      	cmp	r2, #11
1a00217a:	d90d      	bls.n	1a002198 <_malloc_r+0x84>
1a00217c:	601a      	str	r2, [r3, #0]
1a00217e:	4413      	add	r3, r2
1a002180:	601c      	str	r4, [r3, #0]
1a002182:	f103 000b 	add.w	r0, r3, #11
1a002186:	f020 0007 	bic.w	r0, r0, #7
1a00218a:	1d1a      	adds	r2, r3, #4
1a00218c:	1a82      	subs	r2, r0, r2
1a00218e:	d002      	beq.n	1a002196 <_malloc_r+0x82>
1a002190:	4251      	negs	r1, r2
1a002192:	5099      	str	r1, [r3, r2]
1a002194:	bd70      	pop	{r4, r5, r6, pc}
1a002196:	bd70      	pop	{r4, r5, r6, pc}
1a002198:	428b      	cmp	r3, r1
1a00219a:	d00e      	beq.n	1a0021ba <_malloc_r+0xa6>
1a00219c:	685a      	ldr	r2, [r3, #4]
1a00219e:	604a      	str	r2, [r1, #4]
1a0021a0:	e7ef      	b.n	1a002182 <_malloc_r+0x6e>
1a0021a2:	230c      	movs	r3, #12
1a0021a4:	6033      	str	r3, [r6, #0]
1a0021a6:	2000      	movs	r0, #0
1a0021a8:	bd70      	pop	{r4, r5, r6, pc}
1a0021aa:	2a0b      	cmp	r2, #11
1a0021ac:	d803      	bhi.n	1a0021b6 <_malloc_r+0xa2>
1a0021ae:	684a      	ldr	r2, [r1, #4]
1a0021b0:	460b      	mov	r3, r1
1a0021b2:	602a      	str	r2, [r5, #0]
1a0021b4:	e7e5      	b.n	1a002182 <_malloc_r+0x6e>
1a0021b6:	460b      	mov	r3, r1
1a0021b8:	e7e0      	b.n	1a00217c <_malloc_r+0x68>
1a0021ba:	460a      	mov	r2, r1
1a0021bc:	460b      	mov	r3, r1
1a0021be:	e7f8      	b.n	1a0021b2 <_malloc_r+0x9e>
1a0021c0:	4630      	mov	r0, r6
1a0021c2:	f7fe fe15 	bl	1a000df0 <_sbrk_r>
1a0021c6:	6068      	str	r0, [r5, #4]
1a0021c8:	e7c2      	b.n	1a002150 <_malloc_r+0x3c>
1a0021ca:	bf00      	nop
1a0021cc:	100000d0 	.word	0x100000d0
1a0021d0:	ffffffff 	.word	0xffffffff
1a0021d4:	ffffffff 	.word	0xffffffff
1a0021d8:	ffffffff 	.word	0xffffffff
1a0021dc:	ffffffff 	.word	0xffffffff
1a0021e0:	eba2 0003 	sub.w	r0, r2, r3
1a0021e4:	4770      	bx	lr
1a0021e6:	bf00      	nop

1a0021e8 <strcmp>:
1a0021e8:	7802      	ldrb	r2, [r0, #0]
1a0021ea:	780b      	ldrb	r3, [r1, #0]
1a0021ec:	2a01      	cmp	r2, #1
1a0021ee:	bf28      	it	cs
1a0021f0:	429a      	cmpcs	r2, r3
1a0021f2:	d1f5      	bne.n	1a0021e0 <_malloc_r+0xcc>
1a0021f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
1a0021f8:	ea40 0401 	orr.w	r4, r0, r1
1a0021fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a002200:	f06f 0c00 	mvn.w	ip, #0
1a002204:	ea4f 7244 	mov.w	r2, r4, lsl #29
1a002208:	b312      	cbz	r2, 1a002250 <strcmp+0x68>
1a00220a:	ea80 0401 	eor.w	r4, r0, r1
1a00220e:	f014 0f07 	tst.w	r4, #7
1a002212:	d16a      	bne.n	1a0022ea <strcmp+0x102>
1a002214:	f000 0407 	and.w	r4, r0, #7
1a002218:	f020 0007 	bic.w	r0, r0, #7
1a00221c:	f004 0503 	and.w	r5, r4, #3
1a002220:	f021 0107 	bic.w	r1, r1, #7
1a002224:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a002228:	e8f0 2304 	ldrd	r2, r3, [r0], #16
1a00222c:	f014 0f04 	tst.w	r4, #4
1a002230:	e8f1 6704 	ldrd	r6, r7, [r1], #16
1a002234:	fa0c f405 	lsl.w	r4, ip, r5
1a002238:	ea62 0204 	orn	r2, r2, r4
1a00223c:	ea66 0604 	orn	r6, r6, r4
1a002240:	d00a      	beq.n	1a002258 <strcmp+0x70>
1a002242:	ea63 0304 	orn	r3, r3, r4
1a002246:	4662      	mov	r2, ip
1a002248:	ea67 0704 	orn	r7, r7, r4
1a00224c:	4666      	mov	r6, ip
1a00224e:	e003      	b.n	1a002258 <strcmp+0x70>
1a002250:	e8f0 2304 	ldrd	r2, r3, [r0], #16
1a002254:	e8f1 6704 	ldrd	r6, r7, [r1], #16
1a002258:	fa82 f54c 	uadd8	r5, r2, ip
1a00225c:	ea82 0406 	eor.w	r4, r2, r6
1a002260:	faa4 f48c 	sel	r4, r4, ip
1a002264:	bb6c      	cbnz	r4, 1a0022c2 <strcmp+0xda>
1a002266:	fa83 f54c 	uadd8	r5, r3, ip
1a00226a:	ea83 0507 	eor.w	r5, r3, r7
1a00226e:	faa5 f58c 	sel	r5, r5, ip
1a002272:	b995      	cbnz	r5, 1a00229a <strcmp+0xb2>
1a002274:	e950 2302 	ldrd	r2, r3, [r0, #-8]
1a002278:	e951 6702 	ldrd	r6, r7, [r1, #-8]
1a00227c:	fa82 f54c 	uadd8	r5, r2, ip
1a002280:	ea82 0406 	eor.w	r4, r2, r6
1a002284:	faa4 f48c 	sel	r4, r4, ip
1a002288:	fa83 f54c 	uadd8	r5, r3, ip
1a00228c:	ea83 0507 	eor.w	r5, r3, r7
1a002290:	faa5 f58c 	sel	r5, r5, ip
1a002294:	4325      	orrs	r5, r4
1a002296:	d0db      	beq.n	1a002250 <strcmp+0x68>
1a002298:	b99c      	cbnz	r4, 1a0022c2 <strcmp+0xda>
1a00229a:	ba2d      	rev	r5, r5
1a00229c:	fab5 f485 	clz	r4, r5
1a0022a0:	f024 0407 	bic.w	r4, r4, #7
1a0022a4:	fa27 f104 	lsr.w	r1, r7, r4
1a0022a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
1a0022ac:	fa23 f304 	lsr.w	r3, r3, r4
1a0022b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
1a0022b4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0022b8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a0022bc:	eba0 0001 	sub.w	r0, r0, r1
1a0022c0:	4770      	bx	lr
1a0022c2:	ba24      	rev	r4, r4
1a0022c4:	fab4 f484 	clz	r4, r4
1a0022c8:	f024 0407 	bic.w	r4, r4, #7
1a0022cc:	fa26 f104 	lsr.w	r1, r6, r4
1a0022d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
1a0022d4:	fa22 f204 	lsr.w	r2, r2, r4
1a0022d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
1a0022dc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0022e0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a0022e4:	eba0 0001 	sub.w	r0, r0, r1
1a0022e8:	4770      	bx	lr
1a0022ea:	f014 0f03 	tst.w	r4, #3
1a0022ee:	d13c      	bne.n	1a00236a <strcmp+0x182>
1a0022f0:	f010 0403 	ands.w	r4, r0, #3
1a0022f4:	d128      	bne.n	1a002348 <strcmp+0x160>
1a0022f6:	f850 2b08 	ldr.w	r2, [r0], #8
1a0022fa:	f851 3b08 	ldr.w	r3, [r1], #8
1a0022fe:	fa82 f54c 	uadd8	r5, r2, ip
1a002302:	ea82 0503 	eor.w	r5, r2, r3
1a002306:	faa5 f58c 	sel	r5, r5, ip
1a00230a:	b95d      	cbnz	r5, 1a002324 <strcmp+0x13c>
1a00230c:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a002310:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a002314:	fa82 f54c 	uadd8	r5, r2, ip
1a002318:	ea82 0503 	eor.w	r5, r2, r3
1a00231c:	faa5 f58c 	sel	r5, r5, ip
1a002320:	2d00      	cmp	r5, #0
1a002322:	d0e8      	beq.n	1a0022f6 <strcmp+0x10e>
1a002324:	ba2d      	rev	r5, r5
1a002326:	fab5 f485 	clz	r4, r5
1a00232a:	f024 0407 	bic.w	r4, r4, #7
1a00232e:	fa23 f104 	lsr.w	r1, r3, r4
1a002332:	fa22 f204 	lsr.w	r2, r2, r4
1a002336:	f002 00ff 	and.w	r0, r2, #255	; 0xff
1a00233a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00233e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a002342:	eba0 0001 	sub.w	r0, r0, r1
1a002346:	4770      	bx	lr
1a002348:	ea4f 04c4 	mov.w	r4, r4, lsl #3
1a00234c:	f020 0003 	bic.w	r0, r0, #3
1a002350:	f850 2b08 	ldr.w	r2, [r0], #8
1a002354:	f021 0103 	bic.w	r1, r1, #3
1a002358:	f851 3b08 	ldr.w	r3, [r1], #8
1a00235c:	fa0c f404 	lsl.w	r4, ip, r4
1a002360:	ea62 0204 	orn	r2, r2, r4
1a002364:	ea63 0304 	orn	r3, r3, r4
1a002368:	e7c9      	b.n	1a0022fe <strcmp+0x116>
1a00236a:	f010 0403 	ands.w	r4, r0, #3
1a00236e:	d01a      	beq.n	1a0023a6 <strcmp+0x1be>
1a002370:	eba1 0104 	sub.w	r1, r1, r4
1a002374:	f020 0003 	bic.w	r0, r0, #3
1a002378:	07e4      	lsls	r4, r4, #31
1a00237a:	f850 2b04 	ldr.w	r2, [r0], #4
1a00237e:	d006      	beq.n	1a00238e <strcmp+0x1a6>
1a002380:	d20f      	bcs.n	1a0023a2 <strcmp+0x1ba>
1a002382:	788b      	ldrb	r3, [r1, #2]
1a002384:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
1a002388:	1ae4      	subs	r4, r4, r3
1a00238a:	d106      	bne.n	1a00239a <strcmp+0x1b2>
1a00238c:	b12b      	cbz	r3, 1a00239a <strcmp+0x1b2>
1a00238e:	78cb      	ldrb	r3, [r1, #3]
1a002390:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
1a002394:	1ae4      	subs	r4, r4, r3
1a002396:	d100      	bne.n	1a00239a <strcmp+0x1b2>
1a002398:	b91b      	cbnz	r3, 1a0023a2 <strcmp+0x1ba>
1a00239a:	4620      	mov	r0, r4
1a00239c:	f85d 4b10 	ldr.w	r4, [sp], #16
1a0023a0:	4770      	bx	lr
1a0023a2:	f101 0104 	add.w	r1, r1, #4
1a0023a6:	f850 2b04 	ldr.w	r2, [r0], #4
1a0023aa:	07cc      	lsls	r4, r1, #31
1a0023ac:	f021 0103 	bic.w	r1, r1, #3
1a0023b0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0023b4:	d848      	bhi.n	1a002448 <strcmp+0x260>
1a0023b6:	d224      	bcs.n	1a002402 <strcmp+0x21a>
1a0023b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
1a0023bc:	fa82 f54c 	uadd8	r5, r2, ip
1a0023c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
1a0023c4:	faa5 f58c 	sel	r5, r5, ip
1a0023c8:	d10a      	bne.n	1a0023e0 <strcmp+0x1f8>
1a0023ca:	b965      	cbnz	r5, 1a0023e6 <strcmp+0x1fe>
1a0023cc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0023d0:	ea84 0402 	eor.w	r4, r4, r2
1a0023d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
1a0023d8:	d10e      	bne.n	1a0023f8 <strcmp+0x210>
1a0023da:	f850 2b04 	ldr.w	r2, [r0], #4
1a0023de:	e7eb      	b.n	1a0023b8 <strcmp+0x1d0>
1a0023e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
1a0023e4:	e055      	b.n	1a002492 <strcmp+0x2aa>
1a0023e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
1a0023ea:	d14d      	bne.n	1a002488 <strcmp+0x2a0>
1a0023ec:	7808      	ldrb	r0, [r1, #0]
1a0023ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a0023f2:	f1c0 0000 	rsb	r0, r0, #0
1a0023f6:	4770      	bx	lr
1a0023f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
1a0023fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
1a002400:	e047      	b.n	1a002492 <strcmp+0x2aa>
1a002402:	ea02 441c 	and.w	r4, r2, ip, lsr #16
1a002406:	fa82 f54c 	uadd8	r5, r2, ip
1a00240a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
1a00240e:	faa5 f58c 	sel	r5, r5, ip
1a002412:	d10a      	bne.n	1a00242a <strcmp+0x242>
1a002414:	b965      	cbnz	r5, 1a002430 <strcmp+0x248>
1a002416:	f851 3b04 	ldr.w	r3, [r1], #4
1a00241a:	ea84 0402 	eor.w	r4, r4, r2
1a00241e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
1a002422:	d10c      	bne.n	1a00243e <strcmp+0x256>
1a002424:	f850 2b04 	ldr.w	r2, [r0], #4
1a002428:	e7eb      	b.n	1a002402 <strcmp+0x21a>
1a00242a:	ea4f 4313 	mov.w	r3, r3, lsr #16
1a00242e:	e030      	b.n	1a002492 <strcmp+0x2aa>
1a002430:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
1a002434:	d128      	bne.n	1a002488 <strcmp+0x2a0>
1a002436:	880b      	ldrh	r3, [r1, #0]
1a002438:	ea4f 4212 	mov.w	r2, r2, lsr #16
1a00243c:	e029      	b.n	1a002492 <strcmp+0x2aa>
1a00243e:	ea4f 4212 	mov.w	r2, r2, lsr #16
1a002442:	ea03 431c 	and.w	r3, r3, ip, lsr #16
1a002446:	e024      	b.n	1a002492 <strcmp+0x2aa>
1a002448:	f002 04ff 	and.w	r4, r2, #255	; 0xff
1a00244c:	fa82 f54c 	uadd8	r5, r2, ip
1a002450:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
1a002454:	faa5 f58c 	sel	r5, r5, ip
1a002458:	d10a      	bne.n	1a002470 <strcmp+0x288>
1a00245a:	b965      	cbnz	r5, 1a002476 <strcmp+0x28e>
1a00245c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002460:	ea84 0402 	eor.w	r4, r4, r2
1a002464:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
1a002468:	d109      	bne.n	1a00247e <strcmp+0x296>
1a00246a:	f850 2b04 	ldr.w	r2, [r0], #4
1a00246e:	e7eb      	b.n	1a002448 <strcmp+0x260>
1a002470:	ea4f 6313 	mov.w	r3, r3, lsr #24
1a002474:	e00d      	b.n	1a002492 <strcmp+0x2aa>
1a002476:	f015 0fff 	tst.w	r5, #255	; 0xff
1a00247a:	d105      	bne.n	1a002488 <strcmp+0x2a0>
1a00247c:	680b      	ldr	r3, [r1, #0]
1a00247e:	ea4f 2212 	mov.w	r2, r2, lsr #8
1a002482:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
1a002486:	e004      	b.n	1a002492 <strcmp+0x2aa>
1a002488:	f04f 0000 	mov.w	r0, #0
1a00248c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a002490:	4770      	bx	lr
1a002492:	ba12      	rev	r2, r2
1a002494:	ba1b      	rev	r3, r3
1a002496:	fa82 f44c 	uadd8	r4, r2, ip
1a00249a:	ea82 0403 	eor.w	r4, r2, r3
1a00249e:	faa4 f58c 	sel	r5, r4, ip
1a0024a2:	fab5 f485 	clz	r4, r5
1a0024a6:	fa02 f204 	lsl.w	r2, r2, r4
1a0024aa:	fa03 f304 	lsl.w	r3, r3, r4
1a0024ae:	ea4f 6012 	mov.w	r0, r2, lsr #24
1a0024b2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a0024b6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
1a0024ba:	4770      	bx	lr
1a0024bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0024c0 <strlen>:
1a0024c0:	f890 f000 	pld	[r0]
1a0024c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a0024c8:	f020 0107 	bic.w	r1, r0, #7
1a0024cc:	f06f 0c00 	mvn.w	ip, #0
1a0024d0:	f010 0407 	ands.w	r4, r0, #7
1a0024d4:	f891 f020 	pld	[r1, #32]
1a0024d8:	f040 8049 	bne.w	1a00256e <strlen+0xae>
1a0024dc:	f04f 0400 	mov.w	r4, #0
1a0024e0:	f06f 0007 	mvn.w	r0, #7
1a0024e4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0024e8:	f891 f040 	pld	[r1, #64]	; 0x40
1a0024ec:	f100 0008 	add.w	r0, r0, #8
1a0024f0:	fa82 f24c 	uadd8	r2, r2, ip
1a0024f4:	faa4 f28c 	sel	r2, r4, ip
1a0024f8:	fa83 f34c 	uadd8	r3, r3, ip
1a0024fc:	faa2 f38c 	sel	r3, r2, ip
1a002500:	bb4b      	cbnz	r3, 1a002556 <strlen+0x96>
1a002502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a002506:	fa82 f24c 	uadd8	r2, r2, ip
1a00250a:	f100 0008 	add.w	r0, r0, #8
1a00250e:	faa4 f28c 	sel	r2, r4, ip
1a002512:	fa83 f34c 	uadd8	r3, r3, ip
1a002516:	faa2 f38c 	sel	r3, r2, ip
1a00251a:	b9e3      	cbnz	r3, 1a002556 <strlen+0x96>
1a00251c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a002520:	fa82 f24c 	uadd8	r2, r2, ip
1a002524:	f100 0008 	add.w	r0, r0, #8
1a002528:	faa4 f28c 	sel	r2, r4, ip
1a00252c:	fa83 f34c 	uadd8	r3, r3, ip
1a002530:	faa2 f38c 	sel	r3, r2, ip
1a002534:	b97b      	cbnz	r3, 1a002556 <strlen+0x96>
1a002536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a00253a:	f101 0120 	add.w	r1, r1, #32
1a00253e:	fa82 f24c 	uadd8	r2, r2, ip
1a002542:	f100 0008 	add.w	r0, r0, #8
1a002546:	faa4 f28c 	sel	r2, r4, ip
1a00254a:	fa83 f34c 	uadd8	r3, r3, ip
1a00254e:	faa2 f38c 	sel	r3, r2, ip
1a002552:	2b00      	cmp	r3, #0
1a002554:	d0c6      	beq.n	1a0024e4 <strlen+0x24>
1a002556:	2a00      	cmp	r2, #0
1a002558:	bf04      	itt	eq
1a00255a:	3004      	addeq	r0, #4
1a00255c:	461a      	moveq	r2, r3
1a00255e:	ba12      	rev	r2, r2
1a002560:	fab2 f282 	clz	r2, r2
1a002564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a002568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a00256c:	4770      	bx	lr
1a00256e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002572:	f004 0503 	and.w	r5, r4, #3
1a002576:	f1c4 0000 	rsb	r0, r4, #0
1a00257a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a00257e:	f014 0f04 	tst.w	r4, #4
1a002582:	f891 f040 	pld	[r1, #64]	; 0x40
1a002586:	fa0c f505 	lsl.w	r5, ip, r5
1a00258a:	ea62 0205 	orn	r2, r2, r5
1a00258e:	bf1c      	itt	ne
1a002590:	ea63 0305 	ornne	r3, r3, r5
1a002594:	4662      	movne	r2, ip
1a002596:	f04f 0400 	mov.w	r4, #0
1a00259a:	e7a9      	b.n	1a0024f0 <strlen+0x30>
1a00259c:	522b5441 	.word	0x522b5441
1a0025a0:	54455345 	.word	0x54455345
1a0025a4:	ff000a0d 	.word	0xff000a0d
1a0025a8:	5245564f 	.word	0x5245564f
1a0025ac:	204e5552 	.word	0x204e5552
1a0025b0:	4f525245 	.word	0x4f525245
1a0025b4:	000a0d52 	.word	0x000a0d52
1a0025b8:	49524150 	.word	0x49524150
1a0025bc:	45205954 	.word	0x45205954
1a0025c0:	524f5252 	.word	0x524f5252
1a0025c4:	00000a0d 	.word	0x00000a0d
1a0025c8:	4d415246 	.word	0x4d415246
1a0025cc:	20474e49 	.word	0x20474e49
1a0025d0:	4f525245 	.word	0x4f525245
1a0025d4:	000a0d52 	.word	0x000a0d52
1a0025d8:	4f525245 	.word	0x4f525245
1a0025dc:	4e492052 	.word	0x4e492052
1a0025e0:	20585220 	.word	0x20585220
1a0025e4:	4f464946 	.word	0x4f464946
1a0025e8:	00000a0d 	.word	0x00000a0d
1a0025ec:	4f525245 	.word	0x4f525245
1a0025f0:	4e492052 	.word	0x4e492052
1a0025f4:	41525420 	.word	0x41525420
1a0025f8:	494d534e 	.word	0x494d534e
1a0025fc:	44455454 	.word	0x44455454
1a002600:	41484320 	.word	0x41484320
1a002604:	54434152 	.word	0x54434152
1a002608:	0a0d5245 	.word	0x0a0d5245
1a00260c:	ffffff00 	.word	0xffffff00

1a002610 <ExtRateIn>:
1a002610:	00000000                                ....

1a002614 <GpioButtons>:
1a002614:	08000400 09010900                       ........

1a00261c <GpioLeds>:
1a00261c:	01050005 0e000205 0c010b01              ............

1a002628 <GpioPorts>:
1a002628:	03030003 0f050403 05031005 07030603     ................
1a002638:	ffff0802                                ....

1a00263c <OscRateIn>:
1a00263c:	00b71b00                                ....

1a002640 <InitClkStates>:
1a002640:	01010f01                                ....

1a002644 <pinmuxing>:
1a002644:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002654:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002664:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002674:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002684:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002694:	00d50301 00d50401 00160107 00560207     ..............V.
1a0026a4:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0026b4:	00570206                                ..W.

1a0026b8 <UART_BClock>:
1a0026b8:	01a201c2 01620182                       ......b.

1a0026c0 <UART_PClock>:
1a0026c0:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0026d0:	ffff00ff                                ....

1a0026d4 <periph_to_base>:
1a0026d4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0026e4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0026f4:	000100e0 01000100 01200003 00060120     .......... . ...
1a002704:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002714:	01820013 00120182 01a201a2 01c20011     ................
1a002724:	001001c2 01e201e2 0202000f 000e0202     ................
1a002734:	02220222 0223000d 001c0223              "."...#.#...

1a002740 <InitClkStates>:
1a002740:	00010100 00010909 0001090a 01010701     ................
1a002750:	00010902 00010906 0101090c 0001090d     ................
1a002760:	0001090e 0001090f 00010910 00010911     ................
1a002770:	00010912 00010913 00011114 00011119     ................
1a002780:	0001111a 0001111b                       ........

1a002788 <_ctype_>:
1a002788:	20202000 20202020 28282020 20282828     .         ((((( 
1a002798:	20202020 20202020 20202020 20202020                     
1a0027a8:	10108820 10101010 10101010 10101010      ...............
1a0027b8:	04040410 04040404 10040404 10101010     ................
1a0027c8:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a0027d8:	01010101 01010101 01010101 10101010     ................
1a0027e8:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a0027f8:	02020202 02020202 02020202 10101010     ................
1a002808:	00000020 00000000 00000000 00000000      ...............
	...
1a002888:	ffffff00 00000043                       ....C...
