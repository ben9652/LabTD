
projects/waveGen/out/waveGen.elf:     file format elf32-littlearm
projects/waveGen/out/waveGen.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0004fd

Program Header:
0x70000001 off    0x00013814 vaddr 0x1a003814 paddr 0x1a003814 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010038 vaddr 0x10000038 paddr 0x10000038 align 2**16
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000381c memsz 0x0000381c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00381c align 2**16
         filesz 0x00000038 memsz 0x00000038 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003810  1a000000  1a000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  10000000  1a00381c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020038  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
  6 .bss          0000000c  10000038  10000038  00010038  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 11 .init_array   00000004  1a003810  1a003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a003814  1a003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020038  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020038  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020038  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 18 .noinit       00000000  10000044  10000044  00020038  2**2
                  CONTENTS
 19 .debug_info   00016e60  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004122  00000000  00000000  00036e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00008d0b  00000000  00000000  0003afba  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000a10  00000000  00000000  00043cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000910  00000000  00000000  000446d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00004290  00000000  00000000  00044fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000092b7  00000000  00000000  00049278  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0001f08a  00000000  00000000  0005252f  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000031  00000000  00000000  000715b9  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000715ea  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000016dc  00000000  00000000  00071624  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000038 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003810 l    d  .init_array	00000000 .init_array
1a003814 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000044 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 configuracion.c
00000000 l    df *ABS*	00000000 waveGen.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 board.c
1a000678 l     F .text	00000044 Board_LED_Init
1a0006bc l     F .text	00000040 Board_TEC_Init
1a0006fc l     F .text	00000040 Board_GPIO_Init
1a00073c l     F .text	00000030 Board_ADC_Init
1a00076c l     F .text	00000038 Board_SPI_Init
1a0007a4 l     F .text	00000024 Board_I2C_Init
1a0034c4 l     O .text	00000008 GpioButtons
1a0034cc l     O .text	0000000c GpioLeds
1a0034d8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0034f0 l     O .text	00000004 InitClkStates
1a0034f4 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 dac_18xx_43xx.c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000914 l     F .text	0000002c Chip_UART_GetIndex
1a003568 l     O .text	00000008 UART_BClock
1a003570 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000a7c l     F .text	00000014 Chip_ADC_GetClockIndex
1a000a90 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000b44 l     F .text	000000a0 pll_calc_divs
1a000be4 l     F .text	0000010c pll_get_frac
1a000cf0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000f64 l     F .text	00000022 Chip_Clock_GetDivRate
1000003c l     O .bss	00000008 audio_usb_pll_freq
1a003584 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0035f0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001228 l     F .text	00000014 Chip_SSP_GetClockIndex
1a00123c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
1a003638 l     O .text	00000080 npio2_hw
1a0036b8 l     O .text	00000108 two_over_pi
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
1a0037c0 l     O .text	00000010 init_jk
1a0037d0 l     O .text	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a003814 l       .init_array	00000000 __init_array_end
1a003810 l       .bss_RAM5	00000000 __preinit_array_end
1a003810 l       .init_array	00000000 __init_array_start
1a003810 l       .bss_RAM5	00000000 __preinit_array_start
1a000d88 g     F .text	0000001c Chip_Clock_GetDividerSource
1a002ff8 g     F .text	00000012 .hidden __aeabi_dcmple
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a002f34 g     F .text	0000007a .hidden __cmpdf2
1a002534 g     F .text	0000000e fabs
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a002f34 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a000300 g     F .text	00000054 ConfigurarDAC
1a002aa4 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000818 g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000b36 g     F .text	0000000c Chip_ADC_SetResolution
1a000188  w    F .text	00000002 SysTick_Handler
10000038 g     O .bss	00000002 x
1a0004f8  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a00381c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a002f24 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff7392 g       *ABS*	00000000 __valid_user_code_checksum
1a002548 g     F .text	00000120 floor
1a00381c g       .ARM.exidx	00000000 _etext
1a002fc0 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001006 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a001458 g     F .text	0000044c __ieee754_rem_pio2
1a002fb0 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a002a34 g     F .text	00000022 .hidden __floatsidf
1a002f2c g     F .text	00000082 .hidden __ltdf2
1a0030c4 g     F .text	00000000 .hidden __aeabi_uldivmod
10000044 g       .noinit	00000000 _noinit
1a000940 g     F .text	00000054 Chip_UART_Init
1a0008d0 g     F .text	00000010 Chip_DAC_UpdateValue
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a0018a8 g     F .text	00000284 __kernel_cos
1a001084 g     F .text	0000004c Chip_Clock_GetRate
1a003084 g     F .text	00000040 .hidden __fixunsdfsi
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000858 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002a14 g     F .text	0000001e .hidden __aeabi_ui2d
1a0030f4 g     F .text	000002dc .hidden __udivmoddi4
1a002790 g     F .text	00000000 .hidden __aeabi_drsub
1a0034c0 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000600 g     F .text	00000078 Led_Off
1a002fe4 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000354 g     F .text	00000094 ConfigurarPuertosLaboratorio
1a0023a0 g     F .text	00000194 __kernel_sin
1a002a58 g     F .text	0000003a .hidden __extendsfdf2
1a002d54 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a00279c g     F .text	00000276 .hidden __adddf3
1a003814 g       .ARM.exidx	00000000 __exidx_start
1a002b00 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a0033d4 g     F .text	00000050 __libc_init_array
1a002a14 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0007ec g     F .text	0000002c Board_Init
1a000586  w    F .text	00000002 _init
1a000588 g     F .text	00000078 Led_On
1a000114 g       .text	00000000 __data_section_table
1a001b30 g     F .text	00000870 __kernel_rem_pio2
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000044 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a0004fc g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001320 g     F .text	00000038 Chip_I2C_SetClockRate
1a003034 g     F .text	0000004e .hidden __fixdfsi
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000d3c g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00279c g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a002f2c g     F .text	00000082 .hidden __ledf2
1a002a94 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0012fc g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000ef8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001254 g     F .text	00000012 Chip_SSP_SetClockRate
1a003020 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a000fe0 g     F .text	00000026 Chip_Clock_GetBaseClock
1a00300c g     F .text	00000012 .hidden __aeabi_dcmpge
10000038 g       .bss	00000000 _bss
1a0008f8 g     F .text	0000001a Chip_DAC_Init
1a000b04 g     F .text	00000032 Chip_ADC_SetSampleRate
1a002798 g     F .text	0000027a .hidden __aeabi_dsub
1a001398 g     F .text	000000c0 sin
1a002a94 g     F .text	0000006a .hidden __floatundidf
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a001266 g     F .text	0000003e Chip_SSP_SetBitRate
1a001224 g     F .text	00000002 Chip_GPIO_Init
1a0034ec g     O .text	00000004 OscRateIn
10000044 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a002a34 g     F .text	00000022 .hidden __aeabi_i2d
1a0033d0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002d54 g     F .text	000001d0 .hidden __divdf3
1a002b00 g     F .text	00000254 .hidden __muldf3
1a0001ba  w    F .text	00000002 USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000da4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003424 g     F .text	0000009a memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0004e4 g     F .text	00000014 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a002aa4 g     F .text	0000005a .hidden __aeabi_l2d
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001014 g     F .text	0000003c Chip_Clock_EnableOpts
1a000dc0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000e78 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001358 g     F .text	00000040 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a002774 g     F .text	0000001a copysign
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002f34 g     F .text	0000007a .hidden __nedf2
1a000584  w    F .text	00000002 _fini
1a000ac4 g     F .text	00000040 Chip_ADC_Init
1a000820 g     F .text	00000038 Board_SetupMuxing
1a000994 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a002668 g     F .text	0000010c scalbn
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000044 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0012a4 g     F .text	00000038 Chip_SSP_Init
1a003084 g     F .text	00000040 .hidden __aeabi_d2uiz
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0008e0 g     F .text	00000018 Chip_DAC_SetBias
1a0003e8 g     F .text	000000fc DAC_IRQHandler
1a0007c8 g     F .text	00000024 Board_Debug_Init
1a002fd0 g     F .text	00000012 .hidden __aeabi_dcmpeq
10000038 g       .data	00000000 _edata
1a0012dc g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0010d0 g     F .text	00000154 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a003034 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0033d0  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001050 g     F .text	00000034 Chip_Clock_Enable
1a002fc0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a002f24 g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a002a58 g     F .text	0000003a .hidden __aeabi_f2d
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a002798 g     F .text	0000027a .hidden __subdf3
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000f88 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0008c4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 fd 04 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 92 73 ff 53     }............s.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	89 01 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	e9 03 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00381c 	.word	0x1a00381c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000038 	.word	0x00000038
1a000120:	1a00381c 	.word	0x1a00381c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00381c 	.word	0x1a00381c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00381c 	.word	0x1a00381c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00381c 	.word	0x1a00381c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000038 	.word	0x10000038
1a000154:	0000000c 	.word	0x0000000c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>

1a000188 <SysTick_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <SysTick_Handler>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ConfigurarDAC>:
#include "configuracion.h"

void ConfigurarDAC(LPC_DAC_T* pDAC)
{
1a000300:	b510      	push	{r4, lr}
1a000302:	4604      	mov	r4, r0
   __asm__ volatile("cpsid i");
1a000304:	b672      	cpsid	i
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_DAC_Analog_Config(void)
{
	/*Enable analog function DAC on pin P4_4*/
	LPC_SCU->ENAIO[2] |= 1;
1a000306:	4a10      	ldr	r2, [pc, #64]	; (1a000348 <ConfigurarDAC+0x48>)
1a000308:	f8d2 3c90 	ldr.w	r3, [r2, #3216]	; 0xc90
1a00030c:	f043 0301 	orr.w	r3, r3, #1
1a000310:	f8c2 3c90 	str.w	r3, [r2, #3216]	; 0xc90

	Chip_SCU_DAC_Analog_Config();

   Chip_DAC_Init(pDAC);
1a000314:	f000 faf0 	bl	1a0008f8 <Chip_DAC_Init>
   Chip_DAC_UpdateValue(pDAC, 512);
1a000318:	f44f 7100 	mov.w	r1, #512	; 0x200
1a00031c:	4620      	mov	r0, r4
1a00031e:	f000 fad7 	bl	1a0008d0 <Chip_DAC_UpdateValue>
   Chip_DAC_SetBias(pDAC, DAC_MAX_UPDATE_RATE_400kHz);
1a000322:	2101      	movs	r1, #1
1a000324:	4620      	mov	r0, r4
1a000326:	f000 fadb 	bl	1a0008e0 <Chip_DAC_SetBias>
 * @param	time_out	: time out to reload for interrupt/DMA counter
 * @return	Nothing
 */
STATIC INLINE void Chip_DAC_SetDMATimeOut(LPC_DAC_T *pDAC, uint32_t time_out)
{
	pDAC->CNTVAL = DAC_CCNT_VALUE(time_out);
1a00032a:	4908      	ldr	r1, [pc, #32]	; (1a00034c <ConfigurarDAC+0x4c>)
1a00032c:	2201      	movs	r2, #1
1a00032e:	608a      	str	r2, [r1, #8]
	temp = pDAC->CTRL & ~DAC_DACCTRL_MASK;
1a000330:	684b      	ldr	r3, [r1, #4]
1a000332:	f023 030f 	bic.w	r3, r3, #15
	pDAC->CTRL = temp | dacFlags;
1a000336:	f043 030c 	orr.w	r3, r3, #12
1a00033a:	604b      	str	r3, [r1, #4]
	Chip_DAC_SetDMATimeOut(LPC_DAC, 0x1);
	Chip_DAC_ConfigDAConverterControl(LPC_DAC, DAC_CNT_ENA | DAC_DMA_ENA);

   NVIC->ICPR[0] = 1 << DAC_IRQn;
1a00033c:	4b04      	ldr	r3, [pc, #16]	; (1a000350 <ConfigurarDAC+0x50>)
1a00033e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC->ISER[0] = 1 << DAC_IRQn;
1a000342:	601a      	str	r2, [r3, #0]

   __asm__ volatile("cpsie i");
1a000344:	b662      	cpsie	i
1a000346:	bd10      	pop	{r4, pc}
1a000348:	40086000 	.word	0x40086000
1a00034c:	400e1000 	.word	0x400e1000
1a000350:	e000e100 	.word	0xe000e100

1a000354 <ConfigurarPuertosLaboratorio>:
}

void ConfigurarPuertosLaboratorio(void) {
1a000354:	b410      	push	{r4}
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000356:	4a22      	ldr	r2, [pc, #136]	; (1a0003e0 <ConfigurarPuertosLaboratorio+0x8c>)
1a000358:	23d4      	movs	r3, #212	; 0xd4
1a00035a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
1a00035e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
1a000362:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_ClearValue(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue)
{
	pGPIO->CLR[portNum] = bitValue;
1a000366:	4b1f      	ldr	r3, [pc, #124]	; (1a0003e4 <ConfigurarPuertosLaboratorio+0x90>)
1a000368:	2007      	movs	r0, #7
1a00036a:	f242 2194 	movw	r1, #8852	; 0x2294
1a00036e:	5058      	str	r0, [r3, r1]
		pGPIO->DIR[portNum] |= bitValue;
1a000370:	f242 0014 	movw	r0, #8212	; 0x2014
1a000374:	5819      	ldr	r1, [r3, r0]
1a000376:	f041 0107 	orr.w	r1, r1, #7
1a00037a:	5019      	str	r1, [r3, r0]
1a00037c:	21d0      	movs	r1, #208	; 0xd0
1a00037e:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
1a000382:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
1a000386:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	pGPIO->CLR[portNum] = bitValue;
1a00038a:	f503 510a 	add.w	r1, r3, #8832	; 0x2280
1a00038e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
1a000392:	6008      	str	r0, [r1, #0]
1a000394:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
1a000398:	f242 2184 	movw	r1, #8836	; 0x2284
1a00039c:	5058      	str	r0, [r3, r1]
		pGPIO->DIR[portNum] |= bitValue;
1a00039e:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
1a0003a2:	6801      	ldr	r1, [r0, #0]
1a0003a4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
1a0003a8:	6001      	str	r1, [r0, #0]
1a0003aa:	f242 0104 	movw	r1, #8196	; 0x2004
1a0003ae:	585c      	ldr	r4, [r3, r1]
1a0003b0:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
1a0003b4:	505c      	str	r4, [r3, r1]
1a0003b6:	2440      	movs	r4, #64	; 0x40
1a0003b8:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
1a0003bc:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
1a0003c0:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
1a0003c4:	f8c2 4098 	str.w	r4, [r2, #152]	; 0x98
		pGPIO->DIR[portNum] &= ~bitValue;
1a0003c8:	6802      	ldr	r2, [r0, #0]
1a0003ca:	f422 7244 	bic.w	r2, r2, #784	; 0x310
1a0003ce:	6002      	str	r2, [r0, #0]
1a0003d0:	585a      	ldr	r2, [r3, r1]
1a0003d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
1a0003d6:	505a      	str	r2, [r3, r1]
   Chip_SCU_PinMux(1, 1, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_SCU_PinMux(1, 2, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_SCU_PinMux(1, 6, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_GPIO_SetDir(LPC_GPIO_PORT, 0, (1 << 4) | (1 << 8) | (1 << 9), false);
   Chip_GPIO_SetDir(LPC_GPIO_PORT, 1, (1 << 9), false);
}
1a0003d8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0003dc:	4770      	bx	lr
1a0003de:	bf00      	nop
1a0003e0:	40086000 	.word	0x40086000
1a0003e4:	400f4000 	.word	0x400f4000

1a0003e8 <DAC_IRQHandler>:
uint16_t valores_timer[10] = {127,255,511,1023,2047,4095,8191,16383,32767,65535};

uint16_t x = 0;

void DAC_IRQHandler(void)
{
1a0003e8:	b510      	push	{r4, lr}
    if(x < N_MUESTRAS)
1a0003ea:	4b37      	ldr	r3, [pc, #220]	; (1a0004c8 <DAC_IRQHandler+0xe0>)
1a0003ec:	881b      	ldrh	r3, [r3, #0]
1a0003ee:	2bff      	cmp	r3, #255	; 0xff
1a0003f0:	d831      	bhi.n	1a000456 <DAC_IRQHandler+0x6e>
        x++;
1a0003f2:	3301      	adds	r3, #1
1a0003f4:	4a34      	ldr	r2, [pc, #208]	; (1a0004c8 <DAC_IRQHandler+0xe0>)
1a0003f6:	8013      	strh	r3, [r2, #0]
    else
        x = 0;

    if(x == 1/4.0*N_MUESTRAS)
1a0003f8:	4b33      	ldr	r3, [pc, #204]	; (1a0004c8 <DAC_IRQHandler+0xe0>)
1a0003fa:	8818      	ldrh	r0, [r3, #0]
1a0003fc:	f002 fb1a 	bl	1a002a34 <__aeabi_i2d>
1a000400:	2200      	movs	r2, #0
1a000402:	4b32      	ldr	r3, [pc, #200]	; (1a0004cc <DAC_IRQHandler+0xe4>)
1a000404:	f002 fde4 	bl	1a002fd0 <__aeabi_dcmpeq>
1a000408:	b348      	cbz	r0, 1a00045e <DAC_IRQHandler+0x76>
        Led_On(YELLOW_LED);
1a00040a:	2004      	movs	r0, #4
1a00040c:	f000 f8bc 	bl	1a000588 <Led_On>
    else
        Led_Off(YELLOW_LED);

    if(x == 2/4.0*N_MUESTRAS)
1a000410:	4b2d      	ldr	r3, [pc, #180]	; (1a0004c8 <DAC_IRQHandler+0xe0>)
1a000412:	8818      	ldrh	r0, [r3, #0]
1a000414:	f002 fb0e 	bl	1a002a34 <__aeabi_i2d>
1a000418:	2200      	movs	r2, #0
1a00041a:	4b2d      	ldr	r3, [pc, #180]	; (1a0004d0 <DAC_IRQHandler+0xe8>)
1a00041c:	f002 fdd8 	bl	1a002fd0 <__aeabi_dcmpeq>
1a000420:	b308      	cbz	r0, 1a000466 <DAC_IRQHandler+0x7e>
        Led_On(RED_LED);
1a000422:	2003      	movs	r0, #3
1a000424:	f000 f8b0 	bl	1a000588 <Led_On>
    else
        Led_Off(RED_LED);

    if(x == 3/4.0*N_MUESTRAS)
1a000428:	4b27      	ldr	r3, [pc, #156]	; (1a0004c8 <DAC_IRQHandler+0xe0>)
1a00042a:	8818      	ldrh	r0, [r3, #0]
1a00042c:	f002 fb02 	bl	1a002a34 <__aeabi_i2d>
1a000430:	2200      	movs	r2, #0
1a000432:	4b28      	ldr	r3, [pc, #160]	; (1a0004d4 <DAC_IRQHandler+0xec>)
1a000434:	f002 fdcc 	bl	1a002fd0 <__aeabi_dcmpeq>
1a000438:	b1c8      	cbz	r0, 1a00046e <DAC_IRQHandler+0x86>
        Led_On(GREEN_LED);
1a00043a:	2005      	movs	r0, #5
1a00043c:	f000 f8a4 	bl	1a000588 <Led_On>
    else
        Led_Off(GREEN_LED);

    if(x != 1/4.0*N_MUESTRAS)
1a000440:	4b21      	ldr	r3, [pc, #132]	; (1a0004c8 <DAC_IRQHandler+0xe0>)
1a000442:	881c      	ldrh	r4, [r3, #0]
1a000444:	4620      	mov	r0, r4
1a000446:	f002 faf5 	bl	1a002a34 <__aeabi_i2d>
1a00044a:	2200      	movs	r2, #0
1a00044c:	4b1f      	ldr	r3, [pc, #124]	; (1a0004cc <DAC_IRQHandler+0xe4>)
1a00044e:	f002 fdbf 	bl	1a002fd0 <__aeabi_dcmpeq>
1a000452:	b180      	cbz	r0, 1a000476 <DAC_IRQHandler+0x8e>
1a000454:	bd10      	pop	{r4, pc}
        x = 0;
1a000456:	2200      	movs	r2, #0
1a000458:	4b1b      	ldr	r3, [pc, #108]	; (1a0004c8 <DAC_IRQHandler+0xe0>)
1a00045a:	801a      	strh	r2, [r3, #0]
1a00045c:	e7cc      	b.n	1a0003f8 <DAC_IRQHandler+0x10>
        Led_Off(YELLOW_LED);
1a00045e:	2004      	movs	r0, #4
1a000460:	f000 f8ce 	bl	1a000600 <Led_Off>
1a000464:	e7d4      	b.n	1a000410 <DAC_IRQHandler+0x28>
        Led_Off(RED_LED);
1a000466:	2003      	movs	r0, #3
1a000468:	f000 f8ca 	bl	1a000600 <Led_Off>
1a00046c:	e7dc      	b.n	1a000428 <DAC_IRQHandler+0x40>
        Led_Off(GREEN_LED);
1a00046e:	2005      	movs	r0, #5
1a000470:	f000 f8c6 	bl	1a000600 <Led_Off>
1a000474:	e7e4      	b.n	1a000440 <DAC_IRQHandler+0x58>
        Chip_DAC_UpdateValue(LPC_DAC, (sin(x*2*PI/N_MUESTRAS)+1)*512);
1a000476:	0060      	lsls	r0, r4, #1
1a000478:	f002 fadc 	bl	1a002a34 <__aeabi_i2d>
1a00047c:	a310      	add	r3, pc, #64	; (adr r3, 1a0004c0 <DAC_IRQHandler+0xd8>)
1a00047e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000482:	f002 fb3d 	bl	1a002b00 <__aeabi_dmul>
1a000486:	2200      	movs	r2, #0
1a000488:	4b13      	ldr	r3, [pc, #76]	; (1a0004d8 <DAC_IRQHandler+0xf0>)
1a00048a:	f002 fb39 	bl	1a002b00 <__aeabi_dmul>
1a00048e:	ec41 0b10 	vmov	d0, r0, r1
1a000492:	f000 ff81 	bl	1a001398 <sin>
1a000496:	2200      	movs	r2, #0
1a000498:	4b10      	ldr	r3, [pc, #64]	; (1a0004dc <DAC_IRQHandler+0xf4>)
1a00049a:	ec51 0b10 	vmov	r0, r1, d0
1a00049e:	f002 f97d 	bl	1a00279c <__adddf3>
1a0004a2:	2200      	movs	r2, #0
1a0004a4:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
1a0004a8:	f002 fb2a 	bl	1a002b00 <__aeabi_dmul>
1a0004ac:	f002 fdea 	bl	1a003084 <__aeabi_d2uiz>
1a0004b0:	4601      	mov	r1, r0
1a0004b2:	480b      	ldr	r0, [pc, #44]	; (1a0004e0 <DAC_IRQHandler+0xf8>)
1a0004b4:	f000 fa0c 	bl	1a0008d0 <Chip_DAC_UpdateValue>
}
1a0004b8:	e7cc      	b.n	1a000454 <DAC_IRQHandler+0x6c>
1a0004ba:	bf00      	nop
1a0004bc:	f3af 8000 	nop.w
1a0004c0:	54524550 	.word	0x54524550
1a0004c4:	400921fb 	.word	0x400921fb
1a0004c8:	10000038 	.word	0x10000038
1a0004cc:	40500000 	.word	0x40500000
1a0004d0:	40600000 	.word	0x40600000
1a0004d4:	40680000 	.word	0x40680000
1a0004d8:	3f700000 	.word	0x3f700000
1a0004dc:	3ff00000 	.word	0x3ff00000
1a0004e0:	400e1000 	.word	0x400e1000

1a0004e4 <main>:

int main(void)
{
1a0004e4:	b508      	push	{r3, lr}
    uint8_t timer = 0;
    uint8_t tecla;
    uint8_t tecla_anterior;

    ConfigurarPuertosLaboratorio();
1a0004e6:	f7ff ff35 	bl	1a000354 <ConfigurarPuertosLaboratorio>
    ConfigurarDAC(LPC_DAC);
1a0004ea:	4802      	ldr	r0, [pc, #8]	; (1a0004f4 <main+0x10>)
1a0004ec:	f7ff ff08 	bl	1a000300 <ConfigurarDAC>
    //         Chip_DAC_SetDMATimeOut(LPC_DAC, valores_timer[timer]);
    //     }

    //     tecla_anterior = tecla;
    // }
1a0004f0:	2000      	movs	r0, #0
1a0004f2:	bd08      	pop	{r3, pc}
1a0004f4:	400e1000 	.word	0x400e1000

1a0004f8 <initialise_monitor_handles>:
{
1a0004f8:	4770      	bx	lr
1a0004fa:	Address 0x000000001a0004fa is out of bounds.


1a0004fc <Reset_Handler>:
void Reset_Handler(void) {
1a0004fc:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0004fe:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000500:	4a19      	ldr	r2, [pc, #100]	; (1a000568 <Reset_Handler+0x6c>)
1a000502:	4b1a      	ldr	r3, [pc, #104]	; (1a00056c <Reset_Handler+0x70>)
1a000504:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000506:	4a1a      	ldr	r2, [pc, #104]	; (1a000570 <Reset_Handler+0x74>)
1a000508:	3304      	adds	r3, #4
1a00050a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00050c:	2300      	movs	r3, #0
1a00050e:	e005      	b.n	1a00051c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000514:	4a17      	ldr	r2, [pc, #92]	; (1a000574 <Reset_Handler+0x78>)
1a000516:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00051a:	3301      	adds	r3, #1
1a00051c:	2b07      	cmp	r3, #7
1a00051e:	d9f7      	bls.n	1a000510 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000520:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000522:	4b15      	ldr	r3, [pc, #84]	; (1a000578 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000524:	e007      	b.n	1a000536 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000526:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00052a:	689a      	ldr	r2, [r3, #8]
1a00052c:	6859      	ldr	r1, [r3, #4]
1a00052e:	6818      	ldr	r0, [r3, #0]
1a000530:	f7ff fe2b 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000534:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000536:	4a11      	ldr	r2, [pc, #68]	; (1a00057c <Reset_Handler+0x80>)
1a000538:	4293      	cmp	r3, r2
1a00053a:	d3f4      	bcc.n	1a000526 <Reset_Handler+0x2a>
1a00053c:	e006      	b.n	1a00054c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00053e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000540:	6859      	ldr	r1, [r3, #4]
1a000542:	f854 0b08 	ldr.w	r0, [r4], #8
1a000546:	f7ff fe2f 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00054a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00054c:	4a0c      	ldr	r2, [pc, #48]	; (1a000580 <Reset_Handler+0x84>)
1a00054e:	4293      	cmp	r3, r2
1a000550:	d3f5      	bcc.n	1a00053e <Reset_Handler+0x42>
    SystemInit();
1a000552:	f000 ff01 	bl	1a001358 <SystemInit>
    __libc_init_array();
1a000556:	f002 ff3d 	bl	1a0033d4 <__libc_init_array>
    initialise_monitor_handles();
1a00055a:	f7ff ffcd 	bl	1a0004f8 <initialise_monitor_handles>
    main();
1a00055e:	f7ff ffc1 	bl	1a0004e4 <main>
        __asm__ volatile("wfi");
1a000562:	bf30      	wfi
1a000564:	e7fd      	b.n	1a000562 <Reset_Handler+0x66>
1a000566:	bf00      	nop
1a000568:	10df1000 	.word	0x10df1000
1a00056c:	40053100 	.word	0x40053100
1a000570:	01dff7ff 	.word	0x01dff7ff
1a000574:	e000e280 	.word	0xe000e280
1a000578:	1a000114 	.word	0x1a000114
1a00057c:	1a000150 	.word	0x1a000150
1a000580:	1a000178 	.word	0x1a000178

1a000584 <_fini>:
void _fini(void) {}
1a000584:	4770      	bx	lr

1a000586 <_init>:
void _init(void) {}
1a000586:	4770      	bx	lr

1a000588 <Led_On>:
	return TRUE;
}

/** \brief Function to turn on a specific led */
uint8_t Led_On(uint8_t led)
{
1a000588:	4603      	mov	r3, r0
	/** \details Function to turn on a specific led at the EDU-CIAA board.
	 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
	 * */
	uint8_t result = FALSE;

	if (led == RED_LED)
1a00058a:	2804      	cmp	r0, #4
1a00058c:	d00f      	beq.n	1a0005ae <Led_On+0x26>
	uint8_t result = FALSE;
1a00058e:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == YELLOW_LED)
1a000590:	2b03      	cmp	r3, #3
1a000592:	d012      	beq.n	1a0005ba <Led_On+0x32>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a000594:	2b05      	cmp	r3, #5
1a000596:	d018      	beq.n	1a0005ca <Led_On+0x42>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
    if (led == RGB_R_LED)
1a000598:	b923      	cbnz	r3, 1a0005a4 <Led_On+0x1c>
	pGPIO->SET[port] = (1 << pin);
1a00059a:	2001      	movs	r0, #1
1a00059c:	f242 2214 	movw	r2, #8724	; 0x2214
1a0005a0:	4915      	ldr	r1, [pc, #84]	; (1a0005f8 <Led_On+0x70>)
1a0005a2:	5088      	str	r0, [r1, r2]
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a0005a4:	2b01      	cmp	r3, #1
1a0005a6:	d018      	beq.n	1a0005da <Led_On+0x52>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a0005a8:	2b02      	cmp	r3, #2
1a0005aa:	d01d      	beq.n	1a0005e8 <Led_On+0x60>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
}
1a0005ac:	4770      	bx	lr
1a0005ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a0005b2:	4a12      	ldr	r2, [pc, #72]	; (1a0005fc <Led_On+0x74>)
1a0005b4:	6011      	str	r1, [r2, #0]
		result = TRUE;
1a0005b6:	2001      	movs	r0, #1
1a0005b8:	e7ea      	b.n	1a000590 <Led_On+0x8>
1a0005ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a0005be:	f242 2204 	movw	r2, #8708	; 0x2204
1a0005c2:	490d      	ldr	r1, [pc, #52]	; (1a0005f8 <Led_On+0x70>)
1a0005c4:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a0005c6:	2001      	movs	r0, #1
1a0005c8:	e7e4      	b.n	1a000594 <Led_On+0xc>
1a0005ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
1a0005ce:	f242 2204 	movw	r2, #8708	; 0x2204
1a0005d2:	4909      	ldr	r1, [pc, #36]	; (1a0005f8 <Led_On+0x70>)
1a0005d4:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a0005d6:	2001      	movs	r0, #1
1a0005d8:	e7de      	b.n	1a000598 <Led_On+0x10>
1a0005da:	2002      	movs	r0, #2
1a0005dc:	f242 2214 	movw	r2, #8724	; 0x2214
1a0005e0:	4905      	ldr	r1, [pc, #20]	; (1a0005f8 <Led_On+0x70>)
1a0005e2:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a0005e4:	4618      	mov	r0, r3
1a0005e6:	e7df      	b.n	1a0005a8 <Led_On+0x20>
1a0005e8:	2104      	movs	r1, #4
1a0005ea:	f242 2314 	movw	r3, #8724	; 0x2214
1a0005ee:	4a02      	ldr	r2, [pc, #8]	; (1a0005f8 <Led_On+0x70>)
1a0005f0:	50d1      	str	r1, [r2, r3]
		result = TRUE;
1a0005f2:	2001      	movs	r0, #1
1a0005f4:	e7da      	b.n	1a0005ac <Led_On+0x24>
1a0005f6:	bf00      	nop
1a0005f8:	400f4000 	.word	0x400f4000
1a0005fc:	400f6200 	.word	0x400f6200

1a000600 <Led_Off>:

/** \brief Function to turn off a specific led */
uint8_t Led_Off(uint8_t led)
{
1a000600:	4603      	mov	r3, r0
	/** \details Function to turn off a specific led at the EDU-CIAA board.
		 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
		 * */
	uint8_t result = FALSE;

	if (led == RED_LED)
1a000602:	2804      	cmp	r0, #4
1a000604:	d00f      	beq.n	1a000626 <Led_Off+0x26>
	uint8_t result = FALSE;
1a000606:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == YELLOW_LED)
1a000608:	2b03      	cmp	r3, #3
1a00060a:	d012      	beq.n	1a000632 <Led_Off+0x32>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a00060c:	2b05      	cmp	r3, #5
1a00060e:	d018      	beq.n	1a000642 <Led_Off+0x42>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_R_LED)
1a000610:	b923      	cbnz	r3, 1a00061c <Led_Off+0x1c>
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a000612:	2001      	movs	r0, #1
1a000614:	f242 2294 	movw	r2, #8852	; 0x2294
1a000618:	4915      	ldr	r1, [pc, #84]	; (1a000670 <Led_Off+0x70>)
1a00061a:	5088      	str	r0, [r1, r2]
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a00061c:	2b01      	cmp	r3, #1
1a00061e:	d018      	beq.n	1a000652 <Led_Off+0x52>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a000620:	2b02      	cmp	r3, #2
1a000622:	d01d      	beq.n	1a000660 <Led_Off+0x60>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
}
1a000624:	4770      	bx	lr
1a000626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a00062a:	4a12      	ldr	r2, [pc, #72]	; (1a000674 <Led_Off+0x74>)
1a00062c:	6011      	str	r1, [r2, #0]
		result = TRUE;
1a00062e:	2001      	movs	r0, #1
1a000630:	e7ea      	b.n	1a000608 <Led_Off+0x8>
1a000632:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a000636:	f242 2284 	movw	r2, #8836	; 0x2284
1a00063a:	490d      	ldr	r1, [pc, #52]	; (1a000670 <Led_Off+0x70>)
1a00063c:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a00063e:	2001      	movs	r0, #1
1a000640:	e7e4      	b.n	1a00060c <Led_Off+0xc>
1a000642:	f44f 5080 	mov.w	r0, #4096	; 0x1000
1a000646:	f242 2284 	movw	r2, #8836	; 0x2284
1a00064a:	4909      	ldr	r1, [pc, #36]	; (1a000670 <Led_Off+0x70>)
1a00064c:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a00064e:	2001      	movs	r0, #1
1a000650:	e7de      	b.n	1a000610 <Led_Off+0x10>
1a000652:	2002      	movs	r0, #2
1a000654:	f242 2294 	movw	r2, #8852	; 0x2294
1a000658:	4905      	ldr	r1, [pc, #20]	; (1a000670 <Led_Off+0x70>)
1a00065a:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a00065c:	4618      	mov	r0, r3
1a00065e:	e7df      	b.n	1a000620 <Led_Off+0x20>
1a000660:	2104      	movs	r1, #4
1a000662:	f242 2394 	movw	r3, #8852	; 0x2294
1a000666:	4a02      	ldr	r2, [pc, #8]	; (1a000670 <Led_Off+0x70>)
1a000668:	50d1      	str	r1, [r2, r3]
		result = TRUE;
1a00066a:	2001      	movs	r0, #1
1a00066c:	e7da      	b.n	1a000624 <Led_Off+0x24>
1a00066e:	bf00      	nop
1a000670:	400f4000 	.word	0x400f4000
1a000674:	400f6280 	.word	0x400f6280

1a000678 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000678:	2200      	movs	r2, #0
1a00067a:	2a05      	cmp	r2, #5
1a00067c:	d819      	bhi.n	1a0006b2 <Board_LED_Init+0x3a>
{
1a00067e:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000680:	490c      	ldr	r1, [pc, #48]	; (1a0006b4 <Board_LED_Init+0x3c>)
1a000682:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000686:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00068a:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a00068c:	4b0a      	ldr	r3, [pc, #40]	; (1a0006b8 <Board_LED_Init+0x40>)
1a00068e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000692:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000696:	2001      	movs	r0, #1
1a000698:	40a0      	lsls	r0, r4
1a00069a:	4301      	orrs	r1, r0
1a00069c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0006a0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0006a4:	2100      	movs	r1, #0
1a0006a6:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0006a8:	3201      	adds	r2, #1
1a0006aa:	2a05      	cmp	r2, #5
1a0006ac:	d9e8      	bls.n	1a000680 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0006ae:	bc70      	pop	{r4, r5, r6}
1a0006b0:	4770      	bx	lr
1a0006b2:	4770      	bx	lr
1a0006b4:	1a0034cc 	.word	0x1a0034cc
1a0006b8:	400f4000 	.word	0x400f4000

1a0006bc <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0006bc:	2300      	movs	r3, #0
1a0006be:	2b03      	cmp	r3, #3
1a0006c0:	d816      	bhi.n	1a0006f0 <Board_TEC_Init+0x34>
{
1a0006c2:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0006c4:	490b      	ldr	r1, [pc, #44]	; (1a0006f4 <Board_TEC_Init+0x38>)
1a0006c6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0006ca:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0006ce:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0006d0:	4c09      	ldr	r4, [pc, #36]	; (1a0006f8 <Board_TEC_Init+0x3c>)
1a0006d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0006d6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0006da:	2001      	movs	r0, #1
1a0006dc:	40a8      	lsls	r0, r5
1a0006de:	ea21 0100 	bic.w	r1, r1, r0
1a0006e2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0006e6:	3301      	adds	r3, #1
1a0006e8:	2b03      	cmp	r3, #3
1a0006ea:	d9eb      	bls.n	1a0006c4 <Board_TEC_Init+0x8>
    }
}
1a0006ec:	bc30      	pop	{r4, r5}
1a0006ee:	4770      	bx	lr
1a0006f0:	4770      	bx	lr
1a0006f2:	bf00      	nop
1a0006f4:	1a0034c4 	.word	0x1a0034c4
1a0006f8:	400f4000 	.word	0x400f4000

1a0006fc <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0006fc:	2300      	movs	r3, #0
1a0006fe:	2b08      	cmp	r3, #8
1a000700:	d816      	bhi.n	1a000730 <Board_GPIO_Init+0x34>
{
1a000702:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000704:	490b      	ldr	r1, [pc, #44]	; (1a000734 <Board_GPIO_Init+0x38>)
1a000706:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00070a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00070e:	784d      	ldrb	r5, [r1, #1]
1a000710:	4c09      	ldr	r4, [pc, #36]	; (1a000738 <Board_GPIO_Init+0x3c>)
1a000712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000716:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00071a:	2001      	movs	r0, #1
1a00071c:	40a8      	lsls	r0, r5
1a00071e:	ea21 0100 	bic.w	r1, r1, r0
1a000722:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000726:	3301      	adds	r3, #1
1a000728:	2b08      	cmp	r3, #8
1a00072a:	d9eb      	bls.n	1a000704 <Board_GPIO_Init+0x8>
    }
}
1a00072c:	bc30      	pop	{r4, r5}
1a00072e:	4770      	bx	lr
1a000730:	4770      	bx	lr
1a000732:	bf00      	nop
1a000734:	1a0034d8 	.word	0x1a0034d8
1a000738:	400f4000 	.word	0x400f4000

1a00073c <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00073c:	b510      	push	{r4, lr}
1a00073e:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a000740:	4c08      	ldr	r4, [pc, #32]	; (1a000764 <Board_ADC_Init+0x28>)
1a000742:	4669      	mov	r1, sp
1a000744:	4620      	mov	r0, r4
1a000746:	f000 f9bd 	bl	1a000ac4 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00074a:	4a07      	ldr	r2, [pc, #28]	; (1a000768 <Board_ADC_Init+0x2c>)
1a00074c:	4669      	mov	r1, sp
1a00074e:	4620      	mov	r0, r4
1a000750:	f000 f9d8 	bl	1a000b04 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000754:	2200      	movs	r2, #0
1a000756:	4669      	mov	r1, sp
1a000758:	4620      	mov	r0, r4
1a00075a:	f000 f9ec 	bl	1a000b36 <Chip_ADC_SetResolution>
}
1a00075e:	b002      	add	sp, #8
1a000760:	bd10      	pop	{r4, pc}
1a000762:	bf00      	nop
1a000764:	400e3000 	.word	0x400e3000
1a000768:	00061a80 	.word	0x00061a80

1a00076c <Board_SPI_Init>:
{
1a00076c:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00076e:	4c0b      	ldr	r4, [pc, #44]	; (1a00079c <Board_SPI_Init+0x30>)
1a000770:	4620      	mov	r0, r4
1a000772:	f000 fd97 	bl	1a0012a4 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000776:	6863      	ldr	r3, [r4, #4]
1a000778:	f023 0304 	bic.w	r3, r3, #4
1a00077c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00077e:	6823      	ldr	r3, [r4, #0]
1a000780:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000784:	f043 0307 	orr.w	r3, r3, #7
1a000788:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00078a:	4905      	ldr	r1, [pc, #20]	; (1a0007a0 <Board_SPI_Init+0x34>)
1a00078c:	4620      	mov	r0, r4
1a00078e:	f000 fd6a 	bl	1a001266 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000792:	6863      	ldr	r3, [r4, #4]
1a000794:	f043 0302 	orr.w	r3, r3, #2
1a000798:	6063      	str	r3, [r4, #4]
1a00079a:	bd10      	pop	{r4, pc}
1a00079c:	400c5000 	.word	0x400c5000
1a0007a0:	000186a0 	.word	0x000186a0

1a0007a4 <Board_I2C_Init>:
{
1a0007a4:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0007a6:	2000      	movs	r0, #0
1a0007a8:	f000 fda8 	bl	1a0012fc <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0007ac:	f640 0208 	movw	r2, #2056	; 0x808
1a0007b0:	4b03      	ldr	r3, [pc, #12]	; (1a0007c0 <Board_I2C_Init+0x1c>)
1a0007b2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0007b6:	4903      	ldr	r1, [pc, #12]	; (1a0007c4 <Board_I2C_Init+0x20>)
1a0007b8:	2000      	movs	r0, #0
1a0007ba:	f000 fdb1 	bl	1a001320 <Chip_I2C_SetClockRate>
1a0007be:	bd08      	pop	{r3, pc}
1a0007c0:	40086000 	.word	0x40086000
1a0007c4:	000f4240 	.word	0x000f4240

1a0007c8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0007c8:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0007ca:	4c07      	ldr	r4, [pc, #28]	; (1a0007e8 <Board_Debug_Init+0x20>)
1a0007cc:	4620      	mov	r0, r4
1a0007ce:	f000 f8b7 	bl	1a000940 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0007d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0007d6:	4620      	mov	r0, r4
1a0007d8:	f000 f8dc 	bl	1a000994 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0007dc:	2303      	movs	r3, #3
1a0007de:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0007e0:	2301      	movs	r3, #1
1a0007e2:	65e3      	str	r3, [r4, #92]	; 0x5c
1a0007e4:	bd10      	pop	{r4, pc}
1a0007e6:	bf00      	nop
1a0007e8:	400c1000 	.word	0x400c1000

1a0007ec <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0007ec:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0007ee:	f7ff ffeb 	bl	1a0007c8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0007f2:	4808      	ldr	r0, [pc, #32]	; (1a000814 <Board_Init+0x28>)
1a0007f4:	f000 fd16 	bl	1a001224 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a0007f8:	f7ff ff80 	bl	1a0006fc <Board_GPIO_Init>
   Board_ADC_Init();
1a0007fc:	f7ff ff9e 	bl	1a00073c <Board_ADC_Init>
   Board_SPI_Init();
1a000800:	f7ff ffb4 	bl	1a00076c <Board_SPI_Init>
   Board_I2C_Init();
1a000804:	f7ff ffce 	bl	1a0007a4 <Board_I2C_Init>

   Board_LED_Init();
1a000808:	f7ff ff36 	bl	1a000678 <Board_LED_Init>
   Board_TEC_Init();
1a00080c:	f7ff ff56 	bl	1a0006bc <Board_TEC_Init>
1a000810:	bd08      	pop	{r3, pc}
1a000812:	bf00      	nop
1a000814:	400f4000 	.word	0x400f4000

1a000818 <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a000818:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00081a:	f7ff ffd5 	bl	1a0007c8 <Board_Debug_Init>
1a00081e:	bd08      	pop	{r3, pc}

1a000820 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000820:	2300      	movs	r3, #0
1a000822:	2b1c      	cmp	r3, #28
1a000824:	d812      	bhi.n	1a00084c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000826:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000828:	4a09      	ldr	r2, [pc, #36]	; (1a000850 <Board_SetupMuxing+0x30>)
1a00082a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00082e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000832:	784a      	ldrb	r2, [r1, #1]
1a000834:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000836:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00083a:	4906      	ldr	r1, [pc, #24]	; (1a000854 <Board_SetupMuxing+0x34>)
1a00083c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000840:	3301      	adds	r3, #1
1a000842:	2b1c      	cmp	r3, #28
1a000844:	d9f0      	bls.n	1a000828 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000846:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00084a:	4770      	bx	lr
1a00084c:	4770      	bx	lr
1a00084e:	bf00      	nop
1a000850:	1a0034f4 	.word	0x1a0034f4
1a000854:	40086000 	.word	0x40086000

1a000858 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000858:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00085a:	4a17      	ldr	r2, [pc, #92]	; (1a0008b8 <Board_SetupClocking+0x60>)
1a00085c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000864:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000868:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00086c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000874:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000878:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00087c:	2201      	movs	r2, #1
1a00087e:	490f      	ldr	r1, [pc, #60]	; (1a0008bc <Board_SetupClocking+0x64>)
1a000880:	2006      	movs	r0, #6
1a000882:	f000 fc25 	bl	1a0010d0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000886:	2400      	movs	r4, #0
1a000888:	b14c      	cbz	r4, 1a00089e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00088a:	4b0b      	ldr	r3, [pc, #44]	; (1a0008b8 <Board_SetupClocking+0x60>)
1a00088c:	685a      	ldr	r2, [r3, #4]
1a00088e:	f022 020c 	bic.w	r2, r2, #12
1a000892:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000894:	685a      	ldr	r2, [r3, #4]
1a000896:	f042 0203 	orr.w	r2, r2, #3
1a00089a:	605a      	str	r2, [r3, #4]
1a00089c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00089e:	4808      	ldr	r0, [pc, #32]	; (1a0008c0 <Board_SetupClocking+0x68>)
1a0008a0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0008a4:	2301      	movs	r3, #1
1a0008a6:	788a      	ldrb	r2, [r1, #2]
1a0008a8:	7849      	ldrb	r1, [r1, #1]
1a0008aa:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0008ae:	f000 fb6b 	bl	1a000f88 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0008b2:	3401      	adds	r4, #1
1a0008b4:	e7e8      	b.n	1a000888 <Board_SetupClocking+0x30>
1a0008b6:	bf00      	nop
1a0008b8:	40043000 	.word	0x40043000
1a0008bc:	0c28cb00 	.word	0x0c28cb00
1a0008c0:	1a0034f0 	.word	0x1a0034f0

1a0008c4 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0008c4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0008c6:	f7ff ffab 	bl	1a000820 <Board_SetupMuxing>
    Board_SetupClocking();
1a0008ca:	f7ff ffc5 	bl	1a000858 <Board_SetupClocking>
1a0008ce:	bd08      	pop	{r3, pc}

1a0008d0 <Chip_DAC_UpdateValue>:
/* Update value to DAC buffer*/
void Chip_DAC_UpdateValue(LPC_DAC_T *pDAC, uint32_t dac_value)
{
	uint32_t tmp;

	tmp = pDAC->CR & DAC_BIAS_EN;
1a0008d0:	6803      	ldr	r3, [r0, #0]
1a0008d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	tmp |= DAC_VALUE(dac_value);
1a0008d6:	0189      	lsls	r1, r1, #6
1a0008d8:	b289      	uxth	r1, r1
1a0008da:	430b      	orrs	r3, r1
	/* Update value */
	pDAC->CR = tmp;
1a0008dc:	6003      	str	r3, [r0, #0]
1a0008de:	4770      	bx	lr

1a0008e0 <Chip_DAC_SetBias>:
}

/* Set Maximum update rate for DAC */
void Chip_DAC_SetBias(LPC_DAC_T *pDAC, uint32_t bias)
{
	pDAC->CR &= ~DAC_BIAS_EN;
1a0008e0:	6803      	ldr	r3, [r0, #0]
1a0008e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a0008e6:	6003      	str	r3, [r0, #0]

	if (bias  == DAC_MAX_UPDATE_RATE_400kHz) {
1a0008e8:	2901      	cmp	r1, #1
1a0008ea:	d000      	beq.n	1a0008ee <Chip_DAC_SetBias+0xe>
1a0008ec:	4770      	bx	lr
		pDAC->CR |= DAC_BIAS_EN;
1a0008ee:	6803      	ldr	r3, [r0, #0]
1a0008f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a0008f4:	6003      	str	r3, [r0, #0]
	}
}
1a0008f6:	e7f9      	b.n	1a0008ec <Chip_DAC_SetBias+0xc>

1a0008f8 <Chip_DAC_Init>:
{
1a0008f8:	b510      	push	{r4, lr}
1a0008fa:	4604      	mov	r4, r0
	Chip_Clock_EnableOpts(CLK_APB3_DAC, true, true, 1);
1a0008fc:	2301      	movs	r3, #1
1a0008fe:	461a      	mov	r2, r3
1a000900:	4619      	mov	r1, r3
1a000902:	2002      	movs	r0, #2
1a000904:	f000 fb86 	bl	1a001014 <Chip_Clock_EnableOpts>
	Chip_DAC_SetBias(pDAC, DAC_MAX_UPDATE_RATE_1MHz);
1a000908:	2100      	movs	r1, #0
1a00090a:	4620      	mov	r0, r4
1a00090c:	f7ff ffe8 	bl	1a0008e0 <Chip_DAC_SetBias>
1a000910:	bd10      	pop	{r4, pc}
1a000912:	Address 0x000000001a000912 is out of bounds.


1a000914 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000914:	4b09      	ldr	r3, [pc, #36]	; (1a00093c <Chip_UART_GetIndex+0x28>)
1a000916:	4298      	cmp	r0, r3
1a000918:	d009      	beq.n	1a00092e <Chip_UART_GetIndex+0x1a>
1a00091a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00091e:	4298      	cmp	r0, r3
1a000920:	d007      	beq.n	1a000932 <Chip_UART_GetIndex+0x1e>
1a000922:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000926:	4298      	cmp	r0, r3
1a000928:	d005      	beq.n	1a000936 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00092a:	2000      	movs	r0, #0
1a00092c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00092e:	2002      	movs	r0, #2
1a000930:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000932:	2003      	movs	r0, #3
1a000934:	4770      	bx	lr
			return 1;
1a000936:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000938:	4770      	bx	lr
1a00093a:	bf00      	nop
1a00093c:	400c1000 	.word	0x400c1000

1a000940 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000940:	b530      	push	{r4, r5, lr}
1a000942:	b083      	sub	sp, #12
1a000944:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000946:	f7ff ffe5 	bl	1a000914 <Chip_UART_GetIndex>
1a00094a:	2301      	movs	r3, #1
1a00094c:	461a      	mov	r2, r3
1a00094e:	4619      	mov	r1, r3
1a000950:	4d0e      	ldr	r5, [pc, #56]	; (1a00098c <Chip_UART_Init+0x4c>)
1a000952:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000956:	f000 fb5d 	bl	1a001014 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00095a:	2307      	movs	r3, #7
1a00095c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00095e:	2300      	movs	r3, #0
1a000960:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000962:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000964:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000966:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000968:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00096a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00096c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00096e:	4b08      	ldr	r3, [pc, #32]	; (1a000990 <Chip_UART_Init+0x50>)
1a000970:	429c      	cmp	r4, r3
1a000972:	d006      	beq.n	1a000982 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000974:	2303      	movs	r3, #3
1a000976:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000978:	2310      	movs	r3, #16
1a00097a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00097c:	9b01      	ldr	r3, [sp, #4]
}
1a00097e:	b003      	add	sp, #12
1a000980:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000982:	2300      	movs	r3, #0
1a000984:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000986:	69a3      	ldr	r3, [r4, #24]
1a000988:	9301      	str	r3, [sp, #4]
1a00098a:	e7f3      	b.n	1a000974 <Chip_UART_Init+0x34>
1a00098c:	1a003570 	.word	0x1a003570
1a000990:	40082000 	.word	0x40082000

1a000994 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000998:	b083      	sub	sp, #12
1a00099a:	4683      	mov	fp, r0
1a00099c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00099e:	f7ff ffb9 	bl	1a000914 <Chip_UART_GetIndex>
1a0009a2:	4b35      	ldr	r3, [pc, #212]	; (1a000a78 <Chip_UART_SetBaudFDR+0xe4>)
1a0009a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0009a8:	f000 fb6c 	bl	1a001084 <Chip_Clock_GetRate>
1a0009ac:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0009ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0009b2:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0009b4:	2300      	movs	r3, #0
1a0009b6:	9301      	str	r3, [sp, #4]
1a0009b8:	46a2      	mov	sl, r4
1a0009ba:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0009bc:	e02a      	b.n	1a000a14 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0009be:	4243      	negs	r3, r0
				div ++;
1a0009c0:	1c4a      	adds	r2, r1, #1
1a0009c2:	e017      	b.n	1a0009f4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0009c4:	b30b      	cbz	r3, 1a000a0a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0009c6:	461f      	mov	r7, r3
			sd = d;
1a0009c8:	9501      	str	r5, [sp, #4]
			sm = m;
1a0009ca:	46a2      	mov	sl, r4
			sdiv = div;
1a0009cc:	4691      	mov	r9, r2
		for (d = 0; d < m; d++) {
1a0009ce:	3501      	adds	r5, #1
1a0009d0:	42ac      	cmp	r4, r5
1a0009d2:	d91e      	bls.n	1a000a12 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0009d4:	0933      	lsrs	r3, r6, #4
1a0009d6:	0730      	lsls	r0, r6, #28
1a0009d8:	fba4 0100 	umull	r0, r1, r4, r0
1a0009dc:	fb04 1103 	mla	r1, r4, r3, r1
1a0009e0:	1962      	adds	r2, r4, r5
1a0009e2:	fb08 f202 	mul.w	r2, r8, r2
1a0009e6:	2300      	movs	r3, #0
1a0009e8:	f002 fb6c 	bl	1a0030c4 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0009ec:	4603      	mov	r3, r0
			div = (uint32_t) (dval >> 32);
1a0009ee:	460a      	mov	r2, r1
			if ((int)diff < 0) {
1a0009f0:	2800      	cmp	r0, #0
1a0009f2:	dbe4      	blt.n	1a0009be <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0009f4:	429f      	cmp	r7, r3
1a0009f6:	d3ea      	bcc.n	1a0009ce <Chip_UART_SetBaudFDR+0x3a>
1a0009f8:	2a00      	cmp	r2, #0
1a0009fa:	d0e8      	beq.n	1a0009ce <Chip_UART_SetBaudFDR+0x3a>
1a0009fc:	0c11      	lsrs	r1, r2, #16
1a0009fe:	d1e6      	bne.n	1a0009ce <Chip_UART_SetBaudFDR+0x3a>
1a000a00:	2a02      	cmp	r2, #2
1a000a02:	d8df      	bhi.n	1a0009c4 <Chip_UART_SetBaudFDR+0x30>
1a000a04:	2d00      	cmp	r5, #0
1a000a06:	d1e2      	bne.n	1a0009ce <Chip_UART_SetBaudFDR+0x3a>
1a000a08:	e7dc      	b.n	1a0009c4 <Chip_UART_SetBaudFDR+0x30>
			odiff = diff;
1a000a0a:	461f      	mov	r7, r3
			sd = d;
1a000a0c:	9501      	str	r5, [sp, #4]
			sm = m;
1a000a0e:	46a2      	mov	sl, r4
			sdiv = div;
1a000a10:	4691      	mov	r9, r2
	for (m = 1; odiff && m < 16; m++) {
1a000a12:	3401      	adds	r4, #1
1a000a14:	b11f      	cbz	r7, 1a000a1e <Chip_UART_SetBaudFDR+0x8a>
1a000a16:	2c0f      	cmp	r4, #15
1a000a18:	d801      	bhi.n	1a000a1e <Chip_UART_SetBaudFDR+0x8a>
1a000a1a:	2500      	movs	r5, #0
1a000a1c:	e7d8      	b.n	1a0009d0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000a1e:	f1b9 0f00 	cmp.w	r9, #0
1a000a22:	d024      	beq.n	1a000a6e <Chip_UART_SetBaudFDR+0xda>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000a24:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000a2c:	f8cb 300c 	str.w	r3, [fp, #12]
1a000a30:	fa5f f389 	uxtb.w	r3, r9
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000a34:	f8cb 3000 	str.w	r3, [fp]
1a000a38:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000a3c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000a40:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000a48:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000a4c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000a50:	b2db      	uxtb	r3, r3
1a000a52:	9901      	ldr	r1, [sp, #4]
1a000a54:	f001 020f 	and.w	r2, r1, #15
1a000a58:	4313      	orrs	r3, r2
1a000a5a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000a5e:	0933      	lsrs	r3, r6, #4
1a000a60:	fb03 f30a 	mul.w	r3, r3, sl
1a000a64:	448a      	add	sl, r1
1a000a66:	fb0a f909 	mul.w	r9, sl, r9
1a000a6a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000a6e:	4648      	mov	r0, r9
1a000a70:	b003      	add	sp, #12
1a000a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000a76:	bf00      	nop
1a000a78:	1a003568 	.word	0x1a003568

1a000a7c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000a7c:	4b03      	ldr	r3, [pc, #12]	; (1a000a8c <Chip_ADC_GetClockIndex+0x10>)
1a000a7e:	4298      	cmp	r0, r3
1a000a80:	d001      	beq.n	1a000a86 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000a82:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000a84:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000a86:	2004      	movs	r0, #4
1a000a88:	4770      	bx	lr
1a000a8a:	bf00      	nop
1a000a8c:	400e4000 	.word	0x400e4000

1a000a90 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000a90:	b570      	push	{r4, r5, r6, lr}
1a000a92:	460d      	mov	r5, r1
1a000a94:	4614      	mov	r4, r2
1a000a96:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000a98:	f7ff fff0 	bl	1a000a7c <Chip_ADC_GetClockIndex>
1a000a9c:	f000 faf2 	bl	1a001084 <Chip_Clock_GetRate>
	if (burstMode) {
1a000aa0:	b965      	cbnz	r5, 1a000abc <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a000aa2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000aa6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000aaa:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000aae:	0064      	lsls	r4, r4, #1
1a000ab0:	fbb0 f0f4 	udiv	r0, r0, r4
1a000ab4:	b2c0      	uxtb	r0, r0
1a000ab6:	3801      	subs	r0, #1
	return div;
}
1a000ab8:	b2c0      	uxtb	r0, r0
1a000aba:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a000abc:	fb04 f406 	mul.w	r4, r4, r6
1a000ac0:	e7f3      	b.n	1a000aaa <getClkDiv+0x1a>
1a000ac2:	Address 0x000000001a000ac2 is out of bounds.


1a000ac4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000ac4:	b538      	push	{r3, r4, r5, lr}
1a000ac6:	4605      	mov	r5, r0
1a000ac8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000aca:	f7ff ffd7 	bl	1a000a7c <Chip_ADC_GetClockIndex>
1a000ace:	2301      	movs	r3, #1
1a000ad0:	461a      	mov	r2, r3
1a000ad2:	4619      	mov	r1, r3
1a000ad4:	f000 fa9e 	bl	1a001014 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000ad8:	2100      	movs	r1, #0
1a000ada:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000adc:	4a08      	ldr	r2, [pc, #32]	; (1a000b00 <Chip_ADC_Init+0x3c>)
1a000ade:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000ae0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000ae2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000ae4:	230b      	movs	r3, #11
1a000ae6:	4628      	mov	r0, r5
1a000ae8:	f7ff ffd2 	bl	1a000a90 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000aec:	0200      	lsls	r0, r0, #8
1a000aee:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000af2:	7923      	ldrb	r3, [r4, #4]
1a000af4:	045b      	lsls	r3, r3, #17
1a000af6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000afa:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000afc:	6028      	str	r0, [r5, #0]
1a000afe:	bd38      	pop	{r3, r4, r5, pc}
1a000b00:	00061a80 	.word	0x00061a80

1a000b04 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000b04:	b570      	push	{r4, r5, r6, lr}
1a000b06:	4605      	mov	r5, r0
1a000b08:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000b0a:	6804      	ldr	r4, [r0, #0]
1a000b0c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000b10:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000b14:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000b16:	790b      	ldrb	r3, [r1, #4]
1a000b18:	f1c3 030b 	rsb	r3, r3, #11
1a000b1c:	b2db      	uxtb	r3, r3
1a000b1e:	7949      	ldrb	r1, [r1, #5]
1a000b20:	f7ff ffb6 	bl	1a000a90 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000b24:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000b28:	7934      	ldrb	r4, [r6, #4]
1a000b2a:	0464      	lsls	r4, r4, #17
1a000b2c:	f404 2460 	and.w	r4, r4, #917504	; 0xe0000
1a000b30:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a000b32:	6028      	str	r0, [r5, #0]
1a000b34:	bd70      	pop	{r4, r5, r6, pc}

1a000b36 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000b36:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000b38:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000b3a:	680a      	ldr	r2, [r1, #0]
1a000b3c:	f7ff ffe2 	bl	1a000b04 <Chip_ADC_SetSampleRate>
1a000b40:	bd08      	pop	{r3, pc}
1a000b42:	Address 0x000000001a000b42 is out of bounds.


1a000b44 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000b44:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000b46:	680b      	ldr	r3, [r1, #0]
1a000b48:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000b4c:	d002      	beq.n	1a000b54 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000b52:	600b      	str	r3, [r1, #0]
1a000b54:	4607      	mov	r7, r0
1a000b56:	2501      	movs	r5, #1
1a000b58:	e03b      	b.n	1a000bd2 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000b5a:	694b      	ldr	r3, [r1, #20]
1a000b5c:	fb03 f302 	mul.w	r3, r3, r2
1a000b60:	fbb3 f3f5 	udiv	r3, r3, r5
1a000b64:	e014      	b.n	1a000b90 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000b66:	461c      	mov	r4, r3
1a000b68:	e020      	b.n	1a000bac <pll_calc_divs+0x68>
		return -val;
1a000b6a:	f1ce 0e00 	rsb	lr, lr, #0
1a000b6e:	e020      	b.n	1a000bb2 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a000b70:	3201      	adds	r2, #1
1a000b72:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000b76:	dc26      	bgt.n	1a000bc6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000b78:	680c      	ldr	r4, [r1, #0]
1a000b7a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000b7e:	d0ec      	beq.n	1a000b5a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000b80:	1c73      	adds	r3, r6, #1
1a000b82:	fa02 fe03 	lsl.w	lr, r2, r3
1a000b86:	694b      	ldr	r3, [r1, #20]
1a000b88:	fb03 f30e 	mul.w	r3, r3, lr
1a000b8c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000b90:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a000bdc <pll_calc_divs+0x98>
1a000b94:	4573      	cmp	r3, lr
1a000b96:	d9eb      	bls.n	1a000b70 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000b98:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a000be0 <pll_calc_divs+0x9c>
1a000b9c:	4573      	cmp	r3, lr
1a000b9e:	d812      	bhi.n	1a000bc6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000ba0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000ba4:	d1df      	bne.n	1a000b66 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a000ba6:	1c74      	adds	r4, r6, #1
1a000ba8:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a000bac:	ebb0 0e04 	subs.w	lr, r0, r4
1a000bb0:	d4db      	bmi.n	1a000b6a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a000bb2:	4577      	cmp	r7, lr
1a000bb4:	d9dc      	bls.n	1a000b70 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000bb6:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000bb8:	1c77      	adds	r7, r6, #1
1a000bba:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000bbc:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000bbe:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000bc0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000bc2:	4677      	mov	r7, lr
1a000bc4:	e7d4      	b.n	1a000b70 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000bc6:	3601      	adds	r6, #1
1a000bc8:	2e03      	cmp	r6, #3
1a000bca:	dc01      	bgt.n	1a000bd0 <pll_calc_divs+0x8c>
1a000bcc:	2201      	movs	r2, #1
1a000bce:	e7d0      	b.n	1a000b72 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a000bd0:	3501      	adds	r5, #1
1a000bd2:	2d04      	cmp	r5, #4
1a000bd4:	dc01      	bgt.n	1a000bda <pll_calc_divs+0x96>
1a000bd6:	2600      	movs	r6, #0
1a000bd8:	e7f6      	b.n	1a000bc8 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000bdc:	094c5eff 	.word	0x094c5eff
1a000be0:	1312d000 	.word	0x1312d000

1a000be4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000be4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000be6:	b099      	sub	sp, #100	; 0x64
1a000be8:	4605      	mov	r5, r0
1a000bea:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000bec:	2260      	movs	r2, #96	; 0x60
1a000bee:	2100      	movs	r1, #0
1a000bf0:	4668      	mov	r0, sp
1a000bf2:	f002 fc17 	bl	1a003424 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000bf6:	2380      	movs	r3, #128	; 0x80
1a000bf8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000bfa:	6963      	ldr	r3, [r4, #20]
1a000bfc:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000bfe:	7923      	ldrb	r3, [r4, #4]
1a000c00:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000c04:	4669      	mov	r1, sp
1a000c06:	4628      	mov	r0, r5
1a000c08:	f7ff ff9c 	bl	1a000b44 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000c0c:	9b06      	ldr	r3, [sp, #24]
1a000c0e:	429d      	cmp	r5, r3
1a000c10:	d027      	beq.n	1a000c62 <pll_get_frac+0x7e>
	if (val < 0)
1a000c12:	1aeb      	subs	r3, r5, r3
1a000c14:	d42e      	bmi.n	1a000c74 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000c16:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000c18:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000c1e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000c20:	6963      	ldr	r3, [r4, #20]
1a000c22:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000c24:	7923      	ldrb	r3, [r4, #4]
1a000c26:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000c2a:	a910      	add	r1, sp, #64	; 0x40
1a000c2c:	4628      	mov	r0, r5
1a000c2e:	f7ff ff89 	bl	1a000b44 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000c32:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000c34:	429d      	cmp	r5, r3
1a000c36:	d01f      	beq.n	1a000c78 <pll_get_frac+0x94>
	if (val < 0)
1a000c38:	1aeb      	subs	r3, r5, r3
1a000c3a:	d425      	bmi.n	1a000c88 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000c3c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000c3e:	4b2b      	ldr	r3, [pc, #172]	; (1a000cec <pll_get_frac+0x108>)
1a000c40:	429d      	cmp	r5, r3
1a000c42:	d923      	bls.n	1a000c8c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000c44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000c46:	1aed      	subs	r5, r5, r3
1a000c48:	d433      	bmi.n	1a000cb2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000c4a:	42ae      	cmp	r6, r5
1a000c4c:	dc3b      	bgt.n	1a000cc6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000c4e:	42be      	cmp	r6, r7
1a000c50:	dc31      	bgt.n	1a000cb6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000c52:	466d      	mov	r5, sp
1a000c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c60:	e006      	b.n	1a000c70 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000c62:	466d      	mov	r5, sp
1a000c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000c70:	b019      	add	sp, #100	; 0x64
1a000c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000c74:	425b      	negs	r3, r3
1a000c76:	e7ce      	b.n	1a000c16 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000c78:	ad10      	add	r5, sp, #64	; 0x40
1a000c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000c86:	e7f3      	b.n	1a000c70 <pll_get_frac+0x8c>
		return -val;
1a000c88:	425b      	negs	r3, r3
1a000c8a:	e7d7      	b.n	1a000c3c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000c8c:	2340      	movs	r3, #64	; 0x40
1a000c8e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000c90:	6963      	ldr	r3, [r4, #20]
1a000c92:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000c94:	a908      	add	r1, sp, #32
1a000c96:	4628      	mov	r0, r5
1a000c98:	f7ff ff54 	bl	1a000b44 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000c9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000c9e:	429d      	cmp	r5, r3
1a000ca0:	d1d0      	bne.n	1a000c44 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000ca2:	ad08      	add	r5, sp, #32
1a000ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ca8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000cb0:	e7de      	b.n	1a000c70 <pll_get_frac+0x8c>
		return -val;
1a000cb2:	426d      	negs	r5, r5
1a000cb4:	e7c9      	b.n	1a000c4a <pll_get_frac+0x66>
			*ppll = pll[2];
1a000cb6:	ad10      	add	r5, sp, #64	; 0x40
1a000cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000cbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000cc4:	e7d4      	b.n	1a000c70 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000cc6:	42af      	cmp	r7, r5
1a000cc8:	db07      	blt.n	1a000cda <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000cca:	ad08      	add	r5, sp, #32
1a000ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000cd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000cd8:	e7ca      	b.n	1a000c70 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000cda:	ad10      	add	r5, sp, #64	; 0x40
1a000cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ce0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ce8:	e7c2      	b.n	1a000c70 <pll_get_frac+0x8c>
1a000cea:	bf00      	nop
1a000cec:	068e7780 	.word	0x068e7780

1a000cf0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000cf0:	b430      	push	{r4, r5}
1a000cf2:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000cf4:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000cf6:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000cf8:	e000      	b.n	1a000cfc <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000cfa:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000cfc:	281c      	cmp	r0, #28
1a000cfe:	d118      	bne.n	1a000d32 <Chip_Clock_FindBaseClock+0x42>
1a000d00:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000d04:	0051      	lsls	r1, r2, #1
1a000d06:	4a0c      	ldr	r2, [pc, #48]	; (1a000d38 <Chip_Clock_FindBaseClock+0x48>)
1a000d08:	440a      	add	r2, r1
1a000d0a:	7914      	ldrb	r4, [r2, #4]
1a000d0c:	42a0      	cmp	r0, r4
1a000d0e:	d010      	beq.n	1a000d32 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000d10:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000d14:	004a      	lsls	r2, r1, #1
1a000d16:	4908      	ldr	r1, [pc, #32]	; (1a000d38 <Chip_Clock_FindBaseClock+0x48>)
1a000d18:	5a8a      	ldrh	r2, [r1, r2]
1a000d1a:	42aa      	cmp	r2, r5
1a000d1c:	d8ed      	bhi.n	1a000cfa <Chip_Clock_FindBaseClock+0xa>
1a000d1e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000d22:	0051      	lsls	r1, r2, #1
1a000d24:	4a04      	ldr	r2, [pc, #16]	; (1a000d38 <Chip_Clock_FindBaseClock+0x48>)
1a000d26:	440a      	add	r2, r1
1a000d28:	8852      	ldrh	r2, [r2, #2]
1a000d2a:	4295      	cmp	r5, r2
1a000d2c:	d8e5      	bhi.n	1a000cfa <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000d2e:	4620      	mov	r0, r4
1a000d30:	e7e4      	b.n	1a000cfc <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000d32:	bc30      	pop	{r4, r5}
1a000d34:	4770      	bx	lr
1a000d36:	bf00      	nop
1a000d38:	1a003584 	.word	0x1a003584

1a000d3c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000d3c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000d42:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000d44:	4a0d      	ldr	r2, [pc, #52]	; (1a000d7c <Chip_Clock_EnableCrystal+0x40>)
1a000d46:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000d48:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000d4c:	6992      	ldr	r2, [r2, #24]
1a000d4e:	4291      	cmp	r1, r2
1a000d50:	d001      	beq.n	1a000d56 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000d52:	4a0a      	ldr	r2, [pc, #40]	; (1a000d7c <Chip_Clock_EnableCrystal+0x40>)
1a000d54:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000d56:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000d5a:	4a09      	ldr	r2, [pc, #36]	; (1a000d80 <Chip_Clock_EnableCrystal+0x44>)
1a000d5c:	6811      	ldr	r1, [r2, #0]
1a000d5e:	4a09      	ldr	r2, [pc, #36]	; (1a000d84 <Chip_Clock_EnableCrystal+0x48>)
1a000d60:	4291      	cmp	r1, r2
1a000d62:	d901      	bls.n	1a000d68 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000d64:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000d68:	4a04      	ldr	r2, [pc, #16]	; (1a000d7c <Chip_Clock_EnableCrystal+0x40>)
1a000d6a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000d6c:	9b01      	ldr	r3, [sp, #4]
1a000d6e:	1e5a      	subs	r2, r3, #1
1a000d70:	9201      	str	r2, [sp, #4]
1a000d72:	2b00      	cmp	r3, #0
1a000d74:	d1fa      	bne.n	1a000d6c <Chip_Clock_EnableCrystal+0x30>
}
1a000d76:	b002      	add	sp, #8
1a000d78:	4770      	bx	lr
1a000d7a:	bf00      	nop
1a000d7c:	40050000 	.word	0x40050000
1a000d80:	1a0034ec 	.word	0x1a0034ec
1a000d84:	01312cff 	.word	0x01312cff

1a000d88 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000d88:	3012      	adds	r0, #18
1a000d8a:	4b05      	ldr	r3, [pc, #20]	; (1a000da0 <Chip_Clock_GetDividerSource+0x18>)
1a000d8c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000d90:	f010 0f01 	tst.w	r0, #1
1a000d94:	d001      	beq.n	1a000d9a <Chip_Clock_GetDividerSource+0x12>
		return CLKINPUT_PD;
1a000d96:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000d98:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000d9a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000d9e:	4770      	bx	lr
1a000da0:	40050000 	.word	0x40050000

1a000da4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000da4:	f100 0212 	add.w	r2, r0, #18
1a000da8:	4b03      	ldr	r3, [pc, #12]	; (1a000db8 <Chip_Clock_GetDividerDivisor+0x14>)
1a000daa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000dae:	4b03      	ldr	r3, [pc, #12]	; (1a000dbc <Chip_Clock_GetDividerDivisor+0x18>)
1a000db0:	5c18      	ldrb	r0, [r3, r0]
}
1a000db2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000db6:	4770      	bx	lr
1a000db8:	40050000 	.word	0x40050000
1a000dbc:	1a00357c 	.word	0x1a00357c

1a000dc0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000dc0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000dc2:	2810      	cmp	r0, #16
1a000dc4:	d80a      	bhi.n	1a000ddc <Chip_Clock_GetClockInputHz+0x1c>
1a000dc6:	e8df f000 	tbb	[pc, r0]
1a000dca:	0b44      	.short	0x0b44
1a000dcc:	0921180d 	.word	0x0921180d
1a000dd0:	2d2a2724 	.word	0x2d2a2724
1a000dd4:	34300909 	.word	0x34300909
1a000dd8:	3c38      	.short	0x3c38
1a000dda:	40          	.byte	0x40
1a000ddb:	00          	.byte	0x00
	uint32_t rate = 0;
1a000ddc:	2000      	movs	r0, #0
1a000dde:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000de0:	481e      	ldr	r0, [pc, #120]	; (1a000e5c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000de2:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000de4:	4b1e      	ldr	r3, [pc, #120]	; (1a000e60 <Chip_Clock_GetClockInputHz+0xa0>)
1a000de6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000dea:	f003 0307 	and.w	r3, r3, #7
1a000dee:	2b04      	cmp	r3, #4
1a000df0:	d001      	beq.n	1a000df6 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000df2:	481c      	ldr	r0, [pc, #112]	; (1a000e64 <Chip_Clock_GetClockInputHz+0xa4>)
1a000df4:	bd08      	pop	{r3, pc}
	uint32_t rate = 0;
1a000df6:	2000      	movs	r0, #0
1a000df8:	bd08      	pop	{r3, pc}
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000dfa:	4b19      	ldr	r3, [pc, #100]	; (1a000e60 <Chip_Clock_GetClockInputHz+0xa0>)
1a000dfc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000e00:	f003 0307 	and.w	r3, r3, #7
1a000e04:	2b04      	cmp	r3, #4
1a000e06:	d027      	beq.n	1a000e58 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000e08:	4816      	ldr	r0, [pc, #88]	; (1a000e64 <Chip_Clock_GetClockInputHz+0xa4>)
1a000e0a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000e0c:	4b16      	ldr	r3, [pc, #88]	; (1a000e68 <Chip_Clock_GetClockInputHz+0xa8>)
1a000e0e:	6818      	ldr	r0, [r3, #0]
		break;
1a000e10:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000e12:	4b16      	ldr	r3, [pc, #88]	; (1a000e6c <Chip_Clock_GetClockInputHz+0xac>)
1a000e14:	6818      	ldr	r0, [r3, #0]
		break;
1a000e16:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000e18:	4b15      	ldr	r3, [pc, #84]	; (1a000e70 <Chip_Clock_GetClockInputHz+0xb0>)
1a000e1a:	6818      	ldr	r0, [r3, #0]
		break;
1a000e1c:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000e1e:	4b14      	ldr	r3, [pc, #80]	; (1a000e70 <Chip_Clock_GetClockInputHz+0xb0>)
1a000e20:	6858      	ldr	r0, [r3, #4]
		break;
1a000e22:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000e24:	f000 f868 	bl	1a000ef8 <Chip_Clock_GetMainPLLHz>
		break;
1a000e28:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000e2a:	2100      	movs	r1, #0
1a000e2c:	f000 f89a 	bl	1a000f64 <Chip_Clock_GetDivRate>
		break;
1a000e30:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000e32:	2101      	movs	r1, #1
1a000e34:	f000 f896 	bl	1a000f64 <Chip_Clock_GetDivRate>
		break;
1a000e38:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000e3a:	2102      	movs	r1, #2
1a000e3c:	f000 f892 	bl	1a000f64 <Chip_Clock_GetDivRate>
		break;
1a000e40:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000e42:	2103      	movs	r1, #3
1a000e44:	f000 f88e 	bl	1a000f64 <Chip_Clock_GetDivRate>
		break;
1a000e48:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000e4a:	2104      	movs	r1, #4
1a000e4c:	f000 f88a 	bl	1a000f64 <Chip_Clock_GetDivRate>
		break;
1a000e50:	bd08      	pop	{r3, pc}
		rate = CRYSTAL_32K_FREQ_IN;
1a000e52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000e56:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000e58:	4806      	ldr	r0, [pc, #24]	; (1a000e74 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a000e5a:	bd08      	pop	{r3, pc}
1a000e5c:	00b71b00 	.word	0x00b71b00
1a000e60:	40043000 	.word	0x40043000
1a000e64:	017d7840 	.word	0x017d7840
1a000e68:	1a0034c0 	.word	0x1a0034c0
1a000e6c:	1a0034ec 	.word	0x1a0034ec
1a000e70:	1000003c 	.word	0x1000003c
1a000e74:	02faf080 	.word	0x02faf080

1a000e78 <Chip_Clock_CalcMainPLLValue>:
{
1a000e78:	b538      	push	{r3, r4, r5, lr}
1a000e7a:	4605      	mov	r5, r0
1a000e7c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000e7e:	7908      	ldrb	r0, [r1, #4]
1a000e80:	f7ff ff9e 	bl	1a000dc0 <Chip_Clock_GetClockInputHz>
1a000e84:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000e86:	4b19      	ldr	r3, [pc, #100]	; (1a000eec <Chip_Clock_CalcMainPLLValue+0x74>)
1a000e88:	442b      	add	r3, r5
1a000e8a:	4a19      	ldr	r2, [pc, #100]	; (1a000ef0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000e8c:	4293      	cmp	r3, r2
1a000e8e:	d821      	bhi.n	1a000ed4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000e90:	b318      	cbz	r0, 1a000eda <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000e92:	2380      	movs	r3, #128	; 0x80
1a000e94:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000e96:	2300      	movs	r3, #0
1a000e98:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000e9a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000e9c:	fbb5 f3f0 	udiv	r3, r5, r0
1a000ea0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000ea2:	4a14      	ldr	r2, [pc, #80]	; (1a000ef4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000ea4:	4295      	cmp	r5, r2
1a000ea6:	d903      	bls.n	1a000eb0 <Chip_Clock_CalcMainPLLValue+0x38>
1a000ea8:	fb03 f000 	mul.w	r0, r3, r0
1a000eac:	4285      	cmp	r5, r0
1a000eae:	d007      	beq.n	1a000ec0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000eb0:	4621      	mov	r1, r4
1a000eb2:	4628      	mov	r0, r5
1a000eb4:	f7ff fe96 	bl	1a000be4 <pll_get_frac>
		if (!ppll->nsel) {
1a000eb8:	68a3      	ldr	r3, [r4, #8]
1a000eba:	b18b      	cbz	r3, 1a000ee0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000ebc:	3b01      	subs	r3, #1
1a000ebe:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000ec0:	6923      	ldr	r3, [r4, #16]
1a000ec2:	b183      	cbz	r3, 1a000ee6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000ec4:	68e2      	ldr	r2, [r4, #12]
1a000ec6:	b10a      	cbz	r2, 1a000ecc <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000ec8:	3a01      	subs	r2, #1
1a000eca:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000ecc:	3b01      	subs	r3, #1
1a000ece:	6123      	str	r3, [r4, #16]
	return 0;
1a000ed0:	2000      	movs	r0, #0
1a000ed2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ed8:	bd38      	pop	{r3, r4, r5, pc}
1a000eda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ede:	bd38      	pop	{r3, r4, r5, pc}
			return -1;
1a000ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ee4:	bd38      	pop	{r3, r4, r5, pc}
		return - 1;
1a000ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000eea:	bd38      	pop	{r3, r4, r5, pc}
1a000eec:	ff6b3a10 	.word	0xff6b3a10
1a000ef0:	0b940510 	.word	0x0b940510
1a000ef4:	094c5eff 	.word	0x094c5eff

1a000ef8 <Chip_Clock_GetMainPLLHz>:
{
1a000ef8:	b530      	push	{r4, r5, lr}
1a000efa:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000efc:	4d17      	ldr	r5, [pc, #92]	; (1a000f5c <Chip_Clock_GetMainPLLHz+0x64>)
1a000efe:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000f00:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000f04:	f7ff ff5c 	bl	1a000dc0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000f08:	4b15      	ldr	r3, [pc, #84]	; (1a000f60 <Chip_Clock_GetMainPLLHz+0x68>)
1a000f0a:	681b      	ldr	r3, [r3, #0]
1a000f0c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000f0e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000f10:	f013 0f01 	tst.w	r3, #1
1a000f14:	d01f      	beq.n	1a000f56 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a000f16:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000f1a:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000f1e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000f22:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000f26:	3201      	adds	r2, #1
	n = nsel + 1;
1a000f28:	3301      	adds	r3, #1
	p = ptab[psel];
1a000f2a:	f10d 0e08 	add.w	lr, sp, #8
1a000f2e:	4471      	add	r1, lr
1a000f30:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000f34:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000f38:	d108      	bne.n	1a000f4c <Chip_Clock_GetMainPLLHz+0x54>
1a000f3a:	b93d      	cbnz	r5, 1a000f4c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000f3c:	0049      	lsls	r1, r1, #1
1a000f3e:	fbb2 f2f1 	udiv	r2, r2, r1
1a000f42:	fbb0 f0f3 	udiv	r0, r0, r3
1a000f46:	fb00 f002 	mul.w	r0, r0, r2
1a000f4a:	e005      	b.n	1a000f58 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a000f4c:	fbb0 f0f3 	udiv	r0, r0, r3
1a000f50:	fb00 f002 	mul.w	r0, r0, r2
1a000f54:	e000      	b.n	1a000f58 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a000f56:	2000      	movs	r0, #0
}
1a000f58:	b003      	add	sp, #12
1a000f5a:	bd30      	pop	{r4, r5, pc}
1a000f5c:	40050000 	.word	0x40050000
1a000f60:	1a003578 	.word	0x1a003578

1a000f64 <Chip_Clock_GetDivRate>:
{
1a000f64:	b538      	push	{r3, r4, r5, lr}
1a000f66:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000f68:	4608      	mov	r0, r1
1a000f6a:	f7ff ff0d 	bl	1a000d88 <Chip_Clock_GetDividerSource>
1a000f6e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000f70:	4620      	mov	r0, r4
1a000f72:	f7ff ff17 	bl	1a000da4 <Chip_Clock_GetDividerDivisor>
1a000f76:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000f78:	4628      	mov	r0, r5
1a000f7a:	f7ff ff21 	bl	1a000dc0 <Chip_Clock_GetClockInputHz>
1a000f7e:	3401      	adds	r4, #1
}
1a000f80:	fbb0 f0f4 	udiv	r0, r0, r4
1a000f84:	bd38      	pop	{r3, r4, r5, pc}
1a000f86:	Address 0x000000001a000f86 is out of bounds.


1a000f88 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000f88:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000f8a:	f100 0416 	add.w	r4, r0, #22
1a000f8e:	00a4      	lsls	r4, r4, #2
1a000f90:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000f94:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000f98:	6865      	ldr	r5, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000f9a:	281b      	cmp	r0, #27
1a000f9c:	d813      	bhi.n	1a000fc6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000f9e:	2911      	cmp	r1, #17
1a000fa0:	d01a      	beq.n	1a000fd8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000fa2:	4c0e      	ldr	r4, [pc, #56]	; (1a000fdc <Chip_Clock_SetBaseClock+0x54>)
1a000fa4:	402c      	ands	r4, r5

			if (autoblocken) {
1a000fa6:	b10a      	cbz	r2, 1a000fac <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000fa8:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a000fac:	b10b      	cbz	r3, 1a000fb2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000fae:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000fb2:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000fb6:	3016      	adds	r0, #22
1a000fb8:	0080      	lsls	r0, r0, #2
1a000fba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000fbe:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000fc2:	6044      	str	r4, [r0, #4]
1a000fc4:	e008      	b.n	1a000fd8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000fc6:	f045 0501 	orr.w	r5, r5, #1
1a000fca:	3016      	adds	r0, #22
1a000fcc:	0080      	lsls	r0, r0, #2
1a000fce:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000fd2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000fd6:	6045      	str	r5, [r0, #4]
	}
}
1a000fd8:	bc30      	pop	{r4, r5}
1a000fda:	4770      	bx	lr
1a000fdc:	e0fff7fe 	.word	0xe0fff7fe

1a000fe0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000fe0:	281b      	cmp	r0, #27
1a000fe2:	d901      	bls.n	1a000fe8 <Chip_Clock_GetBaseClock+0x8>
		return CLKINPUT_PD;
1a000fe4:	2011      	movs	r0, #17
1a000fe6:	4770      	bx	lr
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000fe8:	3016      	adds	r0, #22
1a000fea:	0080      	lsls	r0, r0, #2
1a000fec:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000ff0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000ff4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000ff6:	f010 0f01 	tst.w	r0, #1
1a000ffa:	d001      	beq.n	1a001000 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
1a000ffc:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000ffe:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001000:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001004:	4770      	bx	lr

1a001006 <Chip_Clock_GetBaseClocktHz>:
{
1a001006:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001008:	f7ff ffea 	bl	1a000fe0 <Chip_Clock_GetBaseClock>
1a00100c:	f7ff fed8 	bl	1a000dc0 <Chip_Clock_GetClockInputHz>
}
1a001010:	bd08      	pop	{r3, pc}
1a001012:	Address 0x000000001a001012 is out of bounds.


1a001014 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001014:	b969      	cbnz	r1, 1a001032 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a001016:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001018:	b10a      	cbz	r2, 1a00101e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00101a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00101e:	2b02      	cmp	r3, #2
1a001020:	d009      	beq.n	1a001036 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001022:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001026:	d209      	bcs.n	1a00103c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001028:	3020      	adds	r0, #32
1a00102a:	4b07      	ldr	r3, [pc, #28]	; (1a001048 <Chip_Clock_EnableOpts+0x34>)
1a00102c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001030:	4770      	bx	lr
		reg |= (1 << 1);
1a001032:	2103      	movs	r1, #3
1a001034:	e7f0      	b.n	1a001018 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001036:	f041 0120 	orr.w	r1, r1, #32
1a00103a:	e7f2      	b.n	1a001022 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00103c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001040:	4b02      	ldr	r3, [pc, #8]	; (1a00104c <Chip_Clock_EnableOpts+0x38>)
1a001042:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001046:	4770      	bx	lr
1a001048:	40051000 	.word	0x40051000
1a00104c:	40052000 	.word	0x40052000

1a001050 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001050:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001054:	d208      	bcs.n	1a001068 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001056:	4a09      	ldr	r2, [pc, #36]	; (1a00107c <Chip_Clock_Enable+0x2c>)
1a001058:	3020      	adds	r0, #32
1a00105a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00105e:	f043 0301 	orr.w	r3, r3, #1
1a001062:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001066:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001068:	4a05      	ldr	r2, [pc, #20]	; (1a001080 <Chip_Clock_Enable+0x30>)
1a00106a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00106e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001072:	f043 0301 	orr.w	r3, r3, #1
1a001076:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00107a:	4770      	bx	lr
1a00107c:	40051000 	.word	0x40051000
1a001080:	40052000 	.word	0x40052000

1a001084 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001084:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001086:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00108a:	d309      	bcc.n	1a0010a0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00108c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001090:	4a0d      	ldr	r2, [pc, #52]	; (1a0010c8 <Chip_Clock_GetRate+0x44>)
1a001092:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001096:	f014 0f01 	tst.w	r4, #1
1a00109a:	d107      	bne.n	1a0010ac <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00109c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00109e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0010a0:	f100 0320 	add.w	r3, r0, #32
1a0010a4:	4a09      	ldr	r2, [pc, #36]	; (1a0010cc <Chip_Clock_GetRate+0x48>)
1a0010a6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0010aa:	e7f4      	b.n	1a001096 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0010ac:	f7ff fe20 	bl	1a000cf0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0010b0:	f7ff ffa9 	bl	1a001006 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0010b4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0010b8:	d103      	bne.n	1a0010c2 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0010ba:	2301      	movs	r3, #1
		rate = rate / div;
1a0010bc:	fbb0 f0f3 	udiv	r0, r0, r3
1a0010c0:	bd10      	pop	{r4, pc}
			div = 2;/* No other dividers supported */
1a0010c2:	2302      	movs	r3, #2
1a0010c4:	e7fa      	b.n	1a0010bc <Chip_Clock_GetRate+0x38>
1a0010c6:	bf00      	nop
1a0010c8:	40052000 	.word	0x40052000
1a0010cc:	40051000 	.word	0x40051000

1a0010d0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0010d0:	b570      	push	{r4, r5, r6, lr}
1a0010d2:	b08a      	sub	sp, #40	; 0x28
1a0010d4:	4605      	mov	r5, r0
1a0010d6:	460e      	mov	r6, r1
1a0010d8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0010da:	f242 7310 	movw	r3, #10000	; 0x2710
1a0010de:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0010e0:	2806      	cmp	r0, #6
1a0010e2:	d018      	beq.n	1a001116 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0010e4:	2300      	movs	r3, #0
1a0010e6:	2201      	movs	r2, #1
1a0010e8:	4629      	mov	r1, r5
1a0010ea:	2004      	movs	r0, #4
1a0010ec:	f7ff ff4c 	bl	1a000f88 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0010f0:	4a49      	ldr	r2, [pc, #292]	; (1a001218 <Chip_SetupCoreClock+0x148>)
1a0010f2:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0010f4:	f043 0301 	orr.w	r3, r3, #1
1a0010f8:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0010fa:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0010fe:	a901      	add	r1, sp, #4
1a001100:	4630      	mov	r0, r6
1a001102:	f7ff feb9 	bl	1a000e78 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001106:	4b45      	ldr	r3, [pc, #276]	; (1a00121c <Chip_SetupCoreClock+0x14c>)
1a001108:	429e      	cmp	r6, r3
1a00110a:	d916      	bls.n	1a00113a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a00110c:	9b01      	ldr	r3, [sp, #4]
1a00110e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001112:	d003      	beq.n	1a00111c <Chip_SetupCoreClock+0x4c>
1a001114:	e7fe      	b.n	1a001114 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001116:	f7ff fe11 	bl	1a000d3c <Chip_Clock_EnableCrystal>
1a00111a:	e7e3      	b.n	1a0010e4 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a00111c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001120:	d005      	beq.n	1a00112e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001126:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001128:	2500      	movs	r5, #0
			direct = 1;
1a00112a:	2601      	movs	r6, #1
1a00112c:	e007      	b.n	1a00113e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00112e:	9b04      	ldr	r3, [sp, #16]
1a001130:	3301      	adds	r3, #1
1a001132:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001134:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001136:	2600      	movs	r6, #0
1a001138:	e001      	b.n	1a00113e <Chip_SetupCoreClock+0x6e>
1a00113a:	2500      	movs	r5, #0
1a00113c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00113e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001142:	9b01      	ldr	r3, [sp, #4]
1a001144:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001148:	9a05      	ldr	r2, [sp, #20]
1a00114a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00114e:	9a03      	ldr	r2, [sp, #12]
1a001150:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001154:	9a04      	ldr	r2, [sp, #16]
1a001156:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00115a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00115e:	4a2e      	ldr	r2, [pc, #184]	; (1a001218 <Chip_SetupCoreClock+0x148>)
1a001160:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001162:	4b2d      	ldr	r3, [pc, #180]	; (1a001218 <Chip_SetupCoreClock+0x148>)
1a001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001166:	f013 0f01 	tst.w	r3, #1
1a00116a:	d0fa      	beq.n	1a001162 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00116c:	2300      	movs	r3, #0
1a00116e:	2201      	movs	r2, #1
1a001170:	2109      	movs	r1, #9
1a001172:	2004      	movs	r0, #4
1a001174:	f7ff ff08 	bl	1a000f88 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001178:	b1fe      	cbz	r6, 1a0011ba <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00117a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00117e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001180:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001182:	1e5a      	subs	r2, r3, #1
1a001184:	9209      	str	r2, [sp, #36]	; 0x24
1a001186:	2b00      	cmp	r3, #0
1a001188:	d1fa      	bne.n	1a001180 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00118a:	9b01      	ldr	r3, [sp, #4]
1a00118c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001190:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001192:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001196:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00119a:	9a05      	ldr	r2, [sp, #20]
1a00119c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0011a0:	9a03      	ldr	r2, [sp, #12]
1a0011a2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0011a6:	9a04      	ldr	r2, [sp, #16]
1a0011a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0011ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0011b0:	4a19      	ldr	r2, [pc, #100]	; (1a001218 <Chip_SetupCoreClock+0x148>)
1a0011b2:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0011b4:	b36c      	cbz	r4, 1a001212 <Chip_SetupCoreClock+0x142>
1a0011b6:	2400      	movs	r4, #0
1a0011b8:	e029      	b.n	1a00120e <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0011ba:	2d00      	cmp	r5, #0
1a0011bc:	d0fa      	beq.n	1a0011b4 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0011be:	f242 7310 	movw	r3, #10000	; 0x2710
1a0011c2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0011c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0011c6:	1e5a      	subs	r2, r3, #1
1a0011c8:	9209      	str	r2, [sp, #36]	; 0x24
1a0011ca:	2b00      	cmp	r3, #0
1a0011cc:	d1fa      	bne.n	1a0011c4 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0011ce:	9b04      	ldr	r3, [sp, #16]
1a0011d0:	1e5a      	subs	r2, r3, #1
1a0011d2:	9204      	str	r2, [sp, #16]
1a0011d4:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0011d8:	9b01      	ldr	r3, [sp, #4]
1a0011da:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0011de:	9905      	ldr	r1, [sp, #20]
1a0011e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0011e4:	9903      	ldr	r1, [sp, #12]
1a0011e6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0011ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0011ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0011f2:	4a09      	ldr	r2, [pc, #36]	; (1a001218 <Chip_SetupCoreClock+0x148>)
1a0011f4:	6453      	str	r3, [r2, #68]	; 0x44
1a0011f6:	e7dd      	b.n	1a0011b4 <Chip_SetupCoreClock+0xe4>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0011f8:	4809      	ldr	r0, [pc, #36]	; (1a001220 <Chip_SetupCoreClock+0x150>)
1a0011fa:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0011fe:	78cb      	ldrb	r3, [r1, #3]
1a001200:	788a      	ldrb	r2, [r1, #2]
1a001202:	7849      	ldrb	r1, [r1, #1]
1a001204:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001208:	f7ff febe 	bl	1a000f88 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00120c:	3401      	adds	r4, #1
1a00120e:	2c11      	cmp	r4, #17
1a001210:	d9f2      	bls.n	1a0011f8 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001212:	b00a      	add	sp, #40	; 0x28
1a001214:	bd70      	pop	{r4, r5, r6, pc}
1a001216:	bf00      	nop
1a001218:	40050000 	.word	0x40050000
1a00121c:	068e7780 	.word	0x068e7780
1a001220:	1a0035f0 	.word	0x1a0035f0

1a001224 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a001224:	4770      	bx	lr
1a001226:	Address 0x000000001a001226 is out of bounds.


1a001228 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001228:	4b03      	ldr	r3, [pc, #12]	; (1a001238 <Chip_SSP_GetClockIndex+0x10>)
1a00122a:	4298      	cmp	r0, r3
1a00122c:	d001      	beq.n	1a001232 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00122e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001230:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001232:	20a5      	movs	r0, #165	; 0xa5
1a001234:	4770      	bx	lr
1a001236:	bf00      	nop
1a001238:	400c5000 	.word	0x400c5000

1a00123c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00123c:	4b04      	ldr	r3, [pc, #16]	; (1a001250 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00123e:	4298      	cmp	r0, r3
1a001240:	d002      	beq.n	1a001248 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001242:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a001246:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001248:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a00124c:	4770      	bx	lr
1a00124e:	bf00      	nop
1a001250:	400c5000 	.word	0x400c5000

1a001254 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001254:	6803      	ldr	r3, [r0, #0]
1a001256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00125a:	0209      	lsls	r1, r1, #8
1a00125c:	b289      	uxth	r1, r1
1a00125e:	430b      	orrs	r3, r1
1a001260:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a001262:	6102      	str	r2, [r0, #16]
1a001264:	4770      	bx	lr

1a001266 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001266:	b570      	push	{r4, r5, r6, lr}
1a001268:	4606      	mov	r6, r0
1a00126a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00126c:	f7ff ffe6 	bl	1a00123c <Chip_SSP_GetPeriphClockIndex>
1a001270:	f7ff ff08 	bl	1a001084 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001274:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a001276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00127a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a00127c:	e000      	b.n	1a001280 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00127e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001280:	42ab      	cmp	r3, r5
1a001282:	d90b      	bls.n	1a00129c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001284:	1c4c      	adds	r4, r1, #1
1a001286:	fb04 f302 	mul.w	r3, r4, r2
1a00128a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00128e:	429d      	cmp	r5, r3
1a001290:	d2f6      	bcs.n	1a001280 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001292:	2cff      	cmp	r4, #255	; 0xff
1a001294:	d9f3      	bls.n	1a00127e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001296:	3202      	adds	r2, #2
				cr0_div = 0;
1a001298:	2100      	movs	r1, #0
1a00129a:	e7f1      	b.n	1a001280 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00129c:	4630      	mov	r0, r6
1a00129e:	f7ff ffd9 	bl	1a001254 <Chip_SSP_SetClockRate>
1a0012a2:	bd70      	pop	{r4, r5, r6, pc}

1a0012a4 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0012a4:	b510      	push	{r4, lr}
1a0012a6:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0012a8:	f7ff ffbe 	bl	1a001228 <Chip_SSP_GetClockIndex>
1a0012ac:	f7ff fed0 	bl	1a001050 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0012b0:	4620      	mov	r0, r4
1a0012b2:	f7ff ffc3 	bl	1a00123c <Chip_SSP_GetPeriphClockIndex>
1a0012b6:	f7ff fecb 	bl	1a001050 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0012ba:	6863      	ldr	r3, [r4, #4]
1a0012bc:	f023 0304 	bic.w	r3, r3, #4
1a0012c0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0012c2:	6823      	ldr	r3, [r4, #0]
1a0012c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0012c8:	f043 0307 	orr.w	r3, r3, #7
1a0012cc:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0012ce:	4902      	ldr	r1, [pc, #8]	; (1a0012d8 <Chip_SSP_Init+0x34>)
1a0012d0:	4620      	mov	r0, r4
1a0012d2:	f7ff ffc8 	bl	1a001266 <Chip_SSP_SetBitRate>
1a0012d6:	bd10      	pop	{r4, pc}
1a0012d8:	000186a0 	.word	0x000186a0

1a0012dc <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0012dc:	2901      	cmp	r1, #1
1a0012de:	d000      	beq.n	1a0012e2 <Chip_I2C_EventHandler+0x6>
1a0012e0:	4770      	bx	lr
		return;
	}

	stat = &iic->mXfer->status;
1a0012e2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0012e6:	0082      	lsls	r2, r0, #2
1a0012e8:	4b03      	ldr	r3, [pc, #12]	; (1a0012f8 <Chip_I2C_EventHandler+0x1c>)
1a0012ea:	4413      	add	r3, r2
1a0012ec:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0012ee:	7d13      	ldrb	r3, [r2, #20]
1a0012f0:	b2db      	uxtb	r3, r3
1a0012f2:	2b04      	cmp	r3, #4
1a0012f4:	d0fb      	beq.n	1a0012ee <Chip_I2C_EventHandler+0x12>
1a0012f6:	e7f3      	b.n	1a0012e0 <Chip_I2C_EventHandler+0x4>
1a0012f8:	10000000 	.word	0x10000000

1a0012fc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0012fc:	b570      	push	{r4, r5, r6, lr}
1a0012fe:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001300:	4e06      	ldr	r6, [pc, #24]	; (1a00131c <Chip_I2C_Init+0x20>)
1a001302:	00c4      	lsls	r4, r0, #3
1a001304:	1a22      	subs	r2, r4, r0
1a001306:	0093      	lsls	r3, r2, #2
1a001308:	4433      	add	r3, r6
1a00130a:	8898      	ldrh	r0, [r3, #4]
1a00130c:	f7ff fea0 	bl	1a001050 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001310:	1b64      	subs	r4, r4, r5
1a001312:	00a3      	lsls	r3, r4, #2
1a001314:	58f3      	ldr	r3, [r6, r3]
1a001316:	226c      	movs	r2, #108	; 0x6c
1a001318:	619a      	str	r2, [r3, #24]
1a00131a:	bd70      	pop	{r4, r5, r6, pc}
1a00131c:	10000000 	.word	0x10000000

1a001320 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001324:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a001326:	4e0b      	ldr	r6, [pc, #44]	; (1a001354 <Chip_I2C_SetClockRate+0x34>)
1a001328:	00c5      	lsls	r5, r0, #3
1a00132a:	1a2b      	subs	r3, r5, r0
1a00132c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001330:	eb06 0308 	add.w	r3, r6, r8
1a001334:	8898      	ldrh	r0, [r3, #4]
1a001336:	f7ff fea5 	bl	1a001084 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00133a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a00133e:	f856 3008 	ldr.w	r3, [r6, r8]
1a001342:	0842      	lsrs	r2, r0, #1
1a001344:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a001346:	f856 3008 	ldr.w	r3, [r6, r8]
1a00134a:	691a      	ldr	r2, [r3, #16]
1a00134c:	1a80      	subs	r0, r0, r2
1a00134e:	6158      	str	r0, [r3, #20]
1a001350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001354:	10000000 	.word	0x10000000

1a001358 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001358:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00135a:	4b0d      	ldr	r3, [pc, #52]	; (1a001390 <SystemInit+0x38>)
1a00135c:	4a0d      	ldr	r2, [pc, #52]	; (1a001394 <SystemInit+0x3c>)
1a00135e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001360:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001364:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001366:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00136a:	2b20      	cmp	r3, #32
1a00136c:	d00d      	beq.n	1a00138a <SystemInit+0x32>
  {
    return 1U;           /* Single precision FPU */
  }
  else
  {
    return 0U;           /* No FPU */
1a00136e:	2300      	movs	r3, #0

   if (SCB_GetFPUType() > 0)
1a001370:	b133      	cbz	r3, 1a001380 <SystemInit+0x28>
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001372:	4a07      	ldr	r2, [pc, #28]	; (1a001390 <SystemInit+0x38>)
1a001374:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00137c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Board specific SystemInit */
   Board_SystemInit();
1a001380:	f7ff faa0 	bl	1a0008c4 <Board_SystemInit>
   Board_Init();
1a001384:	f7ff fa32 	bl	1a0007ec <Board_Init>
1a001388:	bd08      	pop	{r3, pc}
    return 1U;           /* Single precision FPU */
1a00138a:	2301      	movs	r3, #1
1a00138c:	e7f0      	b.n	1a001370 <SystemInit+0x18>
1a00138e:	bf00      	nop
1a001390:	e000ed00 	.word	0xe000ed00
1a001394:	1a000000 	.word	0x1a000000

1a001398 <sin>:
1a001398:	b500      	push	{lr}
1a00139a:	ec51 0b10 	vmov	r0, r1, d0
1a00139e:	4a2c      	ldr	r2, [pc, #176]	; (1a001450 <sin+0xb8>)
1a0013a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a0013a4:	4293      	cmp	r3, r2
1a0013a6:	b085      	sub	sp, #20
1a0013a8:	dd27      	ble.n	1a0013fa <sin+0x62>
1a0013aa:	4a2a      	ldr	r2, [pc, #168]	; (1a001454 <sin+0xbc>)
1a0013ac:	4293      	cmp	r3, r2
1a0013ae:	dd09      	ble.n	1a0013c4 <sin+0x2c>
1a0013b0:	ee10 2a10 	vmov	r2, s0
1a0013b4:	460b      	mov	r3, r1
1a0013b6:	f001 f9ef 	bl	1a002798 <__aeabi_dsub>
1a0013ba:	ec41 0b10 	vmov	d0, r0, r1
1a0013be:	b005      	add	sp, #20
1a0013c0:	f85d fb04 	ldr.w	pc, [sp], #4
1a0013c4:	4668      	mov	r0, sp
1a0013c6:	f000 f847 	bl	1a001458 <__ieee754_rem_pio2>
1a0013ca:	f000 0003 	and.w	r0, r0, #3
1a0013ce:	2801      	cmp	r0, #1
1a0013d0:	d027      	beq.n	1a001422 <sin+0x8a>
1a0013d2:	2802      	cmp	r0, #2
1a0013d4:	d01d      	beq.n	1a001412 <sin+0x7a>
1a0013d6:	b368      	cbz	r0, 1a001434 <sin+0x9c>
1a0013d8:	ed9d 1b02 	vldr	d1, [sp, #8]
1a0013dc:	ed9d 0b00 	vldr	d0, [sp]
1a0013e0:	f000 fa62 	bl	1a0018a8 <__kernel_cos>
1a0013e4:	ec53 2b10 	vmov	r2, r3, d0
1a0013e8:	ee10 0a10 	vmov	r0, s0
1a0013ec:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
1a0013f0:	ec41 0b10 	vmov	d0, r0, r1
1a0013f4:	b005      	add	sp, #20
1a0013f6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0013fa:	2000      	movs	r0, #0
1a0013fc:	ed9f 1b12 	vldr	d1, [pc, #72]	; 1a001448 <sin+0xb0>
1a001400:	f000 ffce 	bl	1a0023a0 <__kernel_sin>
1a001404:	ec51 0b10 	vmov	r0, r1, d0
1a001408:	ec41 0b10 	vmov	d0, r0, r1
1a00140c:	b005      	add	sp, #20
1a00140e:	f85d fb04 	ldr.w	pc, [sp], #4
1a001412:	2001      	movs	r0, #1
1a001414:	ed9d 1b02 	vldr	d1, [sp, #8]
1a001418:	ed9d 0b00 	vldr	d0, [sp]
1a00141c:	f000 ffc0 	bl	1a0023a0 <__kernel_sin>
1a001420:	e7e0      	b.n	1a0013e4 <sin+0x4c>
1a001422:	ed9d 1b02 	vldr	d1, [sp, #8]
1a001426:	ed9d 0b00 	vldr	d0, [sp]
1a00142a:	f000 fa3d 	bl	1a0018a8 <__kernel_cos>
1a00142e:	ec51 0b10 	vmov	r0, r1, d0
1a001432:	e7c2      	b.n	1a0013ba <sin+0x22>
1a001434:	2001      	movs	r0, #1
1a001436:	ed9d 1b02 	vldr	d1, [sp, #8]
1a00143a:	ed9d 0b00 	vldr	d0, [sp]
1a00143e:	f000 ffaf 	bl	1a0023a0 <__kernel_sin>
1a001442:	ec51 0b10 	vmov	r0, r1, d0
1a001446:	e7b8      	b.n	1a0013ba <sin+0x22>
	...
1a001450:	3fe921fb 	.word	0x3fe921fb
1a001454:	7fefffff 	.word	0x7fefffff

1a001458 <__ieee754_rem_pio2>:
1a001458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00145c:	ec53 2b10 	vmov	r2, r3, d0
1a001460:	499d      	ldr	r1, [pc, #628]	; (1a0016d8 <__ieee754_rem_pio2+0x280>)
1a001462:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
1a001466:	428f      	cmp	r7, r1
1a001468:	b090      	sub	sp, #64	; 0x40
1a00146a:	f340 8091 	ble.w	1a001590 <__ieee754_rem_pio2+0x138>
1a00146e:	499b      	ldr	r1, [pc, #620]	; (1a0016dc <__ieee754_rem_pio2+0x284>)
1a001470:	428f      	cmp	r7, r1
1a001472:	461c      	mov	r4, r3
1a001474:	4682      	mov	sl, r0
1a001476:	dc29      	bgt.n	1a0014cc <__ieee754_rem_pio2+0x74>
1a001478:	2c00      	cmp	r4, #0
1a00147a:	4619      	mov	r1, r3
1a00147c:	ee10 0a10 	vmov	r0, s0
1a001480:	a38b      	add	r3, pc, #556	; (adr r3, 1a0016b0 <__ieee754_rem_pio2+0x258>)
1a001482:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001486:	f340 81b1 	ble.w	1a0017ec <__ieee754_rem_pio2+0x394>
1a00148a:	f001 f985 	bl	1a002798 <__aeabi_dsub>
1a00148e:	4b94      	ldr	r3, [pc, #592]	; (1a0016e0 <__ieee754_rem_pio2+0x288>)
1a001490:	429f      	cmp	r7, r3
1a001492:	4604      	mov	r4, r0
1a001494:	460d      	mov	r5, r1
1a001496:	f000 8091 	beq.w	1a0015bc <__ieee754_rem_pio2+0x164>
1a00149a:	a387      	add	r3, pc, #540	; (adr r3, 1a0016b8 <__ieee754_rem_pio2+0x260>)
1a00149c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0014a0:	f001 f97a 	bl	1a002798 <__aeabi_dsub>
1a0014a4:	4602      	mov	r2, r0
1a0014a6:	460b      	mov	r3, r1
1a0014a8:	e9ca 2300 	strd	r2, r3, [sl]
1a0014ac:	4620      	mov	r0, r4
1a0014ae:	4629      	mov	r1, r5
1a0014b0:	f001 f972 	bl	1a002798 <__aeabi_dsub>
1a0014b4:	a380      	add	r3, pc, #512	; (adr r3, 1a0016b8 <__ieee754_rem_pio2+0x260>)
1a0014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0014ba:	f001 f96d 	bl	1a002798 <__aeabi_dsub>
1a0014be:	2501      	movs	r5, #1
1a0014c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a0014c4:	4628      	mov	r0, r5
1a0014c6:	b010      	add	sp, #64	; 0x40
1a0014c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0014cc:	4985      	ldr	r1, [pc, #532]	; (1a0016e4 <__ieee754_rem_pio2+0x28c>)
1a0014ce:	428f      	cmp	r7, r1
1a0014d0:	f340 8091 	ble.w	1a0015f6 <__ieee754_rem_pio2+0x19e>
1a0014d4:	4984      	ldr	r1, [pc, #528]	; (1a0016e8 <__ieee754_rem_pio2+0x290>)
1a0014d6:	428f      	cmp	r7, r1
1a0014d8:	dc65      	bgt.n	1a0015a6 <__ieee754_rem_pio2+0x14e>
1a0014da:	153d      	asrs	r5, r7, #20
1a0014dc:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
1a0014e0:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
1a0014e4:	4610      	mov	r0, r2
1a0014e6:	4616      	mov	r6, r2
1a0014e8:	460f      	mov	r7, r1
1a0014ea:	f001 fda3 	bl	1a003034 <__aeabi_d2iz>
1a0014ee:	f001 faa1 	bl	1a002a34 <__aeabi_i2d>
1a0014f2:	4680      	mov	r8, r0
1a0014f4:	4689      	mov	r9, r1
1a0014f6:	4642      	mov	r2, r8
1a0014f8:	464b      	mov	r3, r9
1a0014fa:	4630      	mov	r0, r6
1a0014fc:	4639      	mov	r1, r7
1a0014fe:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
1a001502:	f001 f949 	bl	1a002798 <__aeabi_dsub>
1a001506:	2200      	movs	r2, #0
1a001508:	4b78      	ldr	r3, [pc, #480]	; (1a0016ec <__ieee754_rem_pio2+0x294>)
1a00150a:	f001 faf9 	bl	1a002b00 <__aeabi_dmul>
1a00150e:	4689      	mov	r9, r1
1a001510:	4680      	mov	r8, r0
1a001512:	f001 fd8f 	bl	1a003034 <__aeabi_d2iz>
1a001516:	f001 fa8d 	bl	1a002a34 <__aeabi_i2d>
1a00151a:	4606      	mov	r6, r0
1a00151c:	460f      	mov	r7, r1
1a00151e:	4632      	mov	r2, r6
1a001520:	463b      	mov	r3, r7
1a001522:	4640      	mov	r0, r8
1a001524:	4649      	mov	r1, r9
1a001526:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
1a00152a:	f001 f935 	bl	1a002798 <__aeabi_dsub>
1a00152e:	2200      	movs	r2, #0
1a001530:	4b6e      	ldr	r3, [pc, #440]	; (1a0016ec <__ieee754_rem_pio2+0x294>)
1a001532:	f001 fae5 	bl	1a002b00 <__aeabi_dmul>
1a001536:	2200      	movs	r2, #0
1a001538:	2300      	movs	r3, #0
1a00153a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1a00153e:	f001 fd47 	bl	1a002fd0 <__aeabi_dcmpeq>
1a001542:	2800      	cmp	r0, #0
1a001544:	f000 8170 	beq.w	1a001828 <__ieee754_rem_pio2+0x3d0>
1a001548:	2300      	movs	r3, #0
1a00154a:	4630      	mov	r0, r6
1a00154c:	4639      	mov	r1, r7
1a00154e:	2200      	movs	r2, #0
1a001550:	f001 fd3e 	bl	1a002fd0 <__aeabi_dcmpeq>
1a001554:	2800      	cmp	r0, #0
1a001556:	bf14      	ite	ne
1a001558:	2301      	movne	r3, #1
1a00155a:	2302      	moveq	r3, #2
1a00155c:	4a64      	ldr	r2, [pc, #400]	; (1a0016f0 <__ieee754_rem_pio2+0x298>)
1a00155e:	9201      	str	r2, [sp, #4]
1a001560:	2102      	movs	r1, #2
1a001562:	462a      	mov	r2, r5
1a001564:	9100      	str	r1, [sp, #0]
1a001566:	a80a      	add	r0, sp, #40	; 0x28
1a001568:	4651      	mov	r1, sl
1a00156a:	f000 fae1 	bl	1a001b30 <__kernel_rem_pio2>
1a00156e:	2c00      	cmp	r4, #0
1a001570:	4605      	mov	r5, r0
1a001572:	da14      	bge.n	1a00159e <__ieee754_rem_pio2+0x146>
1a001574:	f8da 2004 	ldr.w	r2, [sl, #4]
1a001578:	f8da 300c 	ldr.w	r3, [sl, #12]
1a00157c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
1a001580:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
1a001584:	4245      	negs	r5, r0
1a001586:	f8ca 2004 	str.w	r2, [sl, #4]
1a00158a:	f8ca 300c 	str.w	r3, [sl, #12]
1a00158e:	e006      	b.n	1a00159e <__ieee754_rem_pio2+0x146>
1a001590:	ed80 0b00 	vstr	d0, [r0]
1a001594:	2500      	movs	r5, #0
1a001596:	2400      	movs	r4, #0
1a001598:	e9c0 4502 	strd	r4, r5, [r0, #8]
1a00159c:	2500      	movs	r5, #0
1a00159e:	4628      	mov	r0, r5
1a0015a0:	b010      	add	sp, #64	; 0x40
1a0015a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0015a6:	ee10 0a10 	vmov	r0, s0
1a0015aa:	4619      	mov	r1, r3
1a0015ac:	f001 f8f4 	bl	1a002798 <__aeabi_dsub>
1a0015b0:	2500      	movs	r5, #0
1a0015b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a0015b6:	e9ca 0100 	strd	r0, r1, [sl]
1a0015ba:	e7f0      	b.n	1a00159e <__ieee754_rem_pio2+0x146>
1a0015bc:	a340      	add	r3, pc, #256	; (adr r3, 1a0016c0 <__ieee754_rem_pio2+0x268>)
1a0015be:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0015c2:	f001 f8e9 	bl	1a002798 <__aeabi_dsub>
1a0015c6:	a340      	add	r3, pc, #256	; (adr r3, 1a0016c8 <__ieee754_rem_pio2+0x270>)
1a0015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0015cc:	460d      	mov	r5, r1
1a0015ce:	4604      	mov	r4, r0
1a0015d0:	f001 f8e2 	bl	1a002798 <__aeabi_dsub>
1a0015d4:	4602      	mov	r2, r0
1a0015d6:	460b      	mov	r3, r1
1a0015d8:	e9ca 2300 	strd	r2, r3, [sl]
1a0015dc:	4629      	mov	r1, r5
1a0015de:	4620      	mov	r0, r4
1a0015e0:	f001 f8da 	bl	1a002798 <__aeabi_dsub>
1a0015e4:	a338      	add	r3, pc, #224	; (adr r3, 1a0016c8 <__ieee754_rem_pio2+0x270>)
1a0015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0015ea:	f001 f8d5 	bl	1a002798 <__aeabi_dsub>
1a0015ee:	2501      	movs	r5, #1
1a0015f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a0015f4:	e7d3      	b.n	1a00159e <__ieee754_rem_pio2+0x146>
1a0015f6:	f000 ff9d 	bl	1a002534 <fabs>
1a0015fa:	ec59 8b10 	vmov	r8, r9, d0
1a0015fe:	ee10 0a10 	vmov	r0, s0
1a001602:	a333      	add	r3, pc, #204	; (adr r3, 1a0016d0 <__ieee754_rem_pio2+0x278>)
1a001604:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001608:	4649      	mov	r1, r9
1a00160a:	f001 fa79 	bl	1a002b00 <__aeabi_dmul>
1a00160e:	2200      	movs	r2, #0
1a001610:	4b38      	ldr	r3, [pc, #224]	; (1a0016f4 <__ieee754_rem_pio2+0x29c>)
1a001612:	f001 f8c3 	bl	1a00279c <__adddf3>
1a001616:	f001 fd0d 	bl	1a003034 <__aeabi_d2iz>
1a00161a:	4605      	mov	r5, r0
1a00161c:	f001 fa0a 	bl	1a002a34 <__aeabi_i2d>
1a001620:	a323      	add	r3, pc, #140	; (adr r3, 1a0016b0 <__ieee754_rem_pio2+0x258>)
1a001622:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001626:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a00162a:	f001 fa69 	bl	1a002b00 <__aeabi_dmul>
1a00162e:	4602      	mov	r2, r0
1a001630:	460b      	mov	r3, r1
1a001632:	4640      	mov	r0, r8
1a001634:	4649      	mov	r1, r9
1a001636:	f001 f8af 	bl	1a002798 <__aeabi_dsub>
1a00163a:	a31f      	add	r3, pc, #124	; (adr r3, 1a0016b8 <__ieee754_rem_pio2+0x260>)
1a00163c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001640:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a001644:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a001648:	f001 fa5a 	bl	1a002b00 <__aeabi_dmul>
1a00164c:	2d1f      	cmp	r5, #31
1a00164e:	4680      	mov	r8, r0
1a001650:	4689      	mov	r9, r1
1a001652:	e9cd 8904 	strd	r8, r9, [sp, #16]
1a001656:	dc51      	bgt.n	1a0016fc <__ieee754_rem_pio2+0x2a4>
1a001658:	4b27      	ldr	r3, [pc, #156]	; (1a0016f8 <__ieee754_rem_pio2+0x2a0>)
1a00165a:	1e6a      	subs	r2, r5, #1
1a00165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a001660:	429f      	cmp	r7, r3
1a001662:	d04b      	beq.n	1a0016fc <__ieee754_rem_pio2+0x2a4>
1a001664:	4602      	mov	r2, r0
1a001666:	460b      	mov	r3, r1
1a001668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00166c:	f001 f894 	bl	1a002798 <__aeabi_dsub>
1a001670:	4680      	mov	r8, r0
1a001672:	4689      	mov	r9, r1
1a001674:	e9ca 8900 	strd	r8, r9, [sl]
1a001678:	4642      	mov	r2, r8
1a00167a:	464b      	mov	r3, r9
1a00167c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a001680:	f001 f88a 	bl	1a002798 <__aeabi_dsub>
1a001684:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a001688:	f001 f886 	bl	1a002798 <__aeabi_dsub>
1a00168c:	2c00      	cmp	r4, #0
1a00168e:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a001692:	da84      	bge.n	1a00159e <__ieee754_rem_pio2+0x146>
1a001694:	f109 4400 	add.w	r4, r9, #2147483648	; 0x80000000
1a001698:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a00169c:	426d      	negs	r5, r5
1a00169e:	f8ca 8000 	str.w	r8, [sl]
1a0016a2:	f8ca 4004 	str.w	r4, [sl, #4]
1a0016a6:	f8ca 0008 	str.w	r0, [sl, #8]
1a0016aa:	f8ca 300c 	str.w	r3, [sl, #12]
1a0016ae:	e776      	b.n	1a00159e <__ieee754_rem_pio2+0x146>
1a0016b0:	54400000 	.word	0x54400000
1a0016b4:	3ff921fb 	.word	0x3ff921fb
1a0016b8:	1a626331 	.word	0x1a626331
1a0016bc:	3dd0b461 	.word	0x3dd0b461
1a0016c0:	1a600000 	.word	0x1a600000
1a0016c4:	3dd0b461 	.word	0x3dd0b461
1a0016c8:	2e037073 	.word	0x2e037073
1a0016cc:	3ba3198a 	.word	0x3ba3198a
1a0016d0:	6dc9c883 	.word	0x6dc9c883
1a0016d4:	3fe45f30 	.word	0x3fe45f30
1a0016d8:	3fe921fb 	.word	0x3fe921fb
1a0016dc:	4002d97b 	.word	0x4002d97b
1a0016e0:	3ff921fb 	.word	0x3ff921fb
1a0016e4:	413921fb 	.word	0x413921fb
1a0016e8:	7fefffff 	.word	0x7fefffff
1a0016ec:	41700000 	.word	0x41700000
1a0016f0:	1a0036b8 	.word	0x1a0036b8
1a0016f4:	3fe00000 	.word	0x3fe00000
1a0016f8:	1a003638 	.word	0x1a003638
1a0016fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a001700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a001704:	f001 f848 	bl	1a002798 <__aeabi_dsub>
1a001708:	153f      	asrs	r7, r7, #20
1a00170a:	f3c1 530a 	ubfx	r3, r1, #20, #11
1a00170e:	1afb      	subs	r3, r7, r3
1a001710:	4680      	mov	r8, r0
1a001712:	4689      	mov	r9, r1
1a001714:	2b10      	cmp	r3, #16
1a001716:	e9ca 8900 	strd	r8, r9, [sl]
1a00171a:	ddad      	ble.n	1a001678 <__ieee754_rem_pio2+0x220>
1a00171c:	a358      	add	r3, pc, #352	; (adr r3, 1a001880 <__ieee754_rem_pio2+0x428>)
1a00171e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a001726:	f001 f9eb 	bl	1a002b00 <__aeabi_dmul>
1a00172a:	4680      	mov	r8, r0
1a00172c:	4689      	mov	r9, r1
1a00172e:	4602      	mov	r2, r0
1a001730:	460b      	mov	r3, r1
1a001732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a001736:	f001 f82f 	bl	1a002798 <__aeabi_dsub>
1a00173a:	4602      	mov	r2, r0
1a00173c:	460b      	mov	r3, r1
1a00173e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a001742:	e9cd 2308 	strd	r2, r3, [sp, #32]
1a001746:	f001 f827 	bl	1a002798 <__aeabi_dsub>
1a00174a:	4642      	mov	r2, r8
1a00174c:	464b      	mov	r3, r9
1a00174e:	f001 f823 	bl	1a002798 <__aeabi_dsub>
1a001752:	a34d      	add	r3, pc, #308	; (adr r3, 1a001888 <__ieee754_rem_pio2+0x430>)
1a001754:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001758:	4680      	mov	r8, r0
1a00175a:	4689      	mov	r9, r1
1a00175c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a001760:	f001 f9ce 	bl	1a002b00 <__aeabi_dmul>
1a001764:	4642      	mov	r2, r8
1a001766:	464b      	mov	r3, r9
1a001768:	f001 f816 	bl	1a002798 <__aeabi_dsub>
1a00176c:	460b      	mov	r3, r1
1a00176e:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a001772:	4602      	mov	r2, r0
1a001774:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1a001778:	f001 f80e 	bl	1a002798 <__aeabi_dsub>
1a00177c:	f3c1 530a 	ubfx	r3, r1, #20, #11
1a001780:	1aff      	subs	r7, r7, r3
1a001782:	4680      	mov	r8, r0
1a001784:	4689      	mov	r9, r1
1a001786:	2f31      	cmp	r7, #49	; 0x31
1a001788:	e9ca 8900 	strd	r8, r9, [sl]
1a00178c:	dd6c      	ble.n	1a001868 <__ieee754_rem_pio2+0x410>
1a00178e:	a341      	add	r3, pc, #260	; (adr r3, 1a001894 <__ieee754_rem_pio2+0x43c>)
1a001790:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a001798:	f001 f9b2 	bl	1a002b00 <__aeabi_dmul>
1a00179c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
1a0017a0:	4606      	mov	r6, r0
1a0017a2:	460f      	mov	r7, r1
1a0017a4:	4602      	mov	r2, r0
1a0017a6:	460b      	mov	r3, r1
1a0017a8:	4640      	mov	r0, r8
1a0017aa:	4649      	mov	r1, r9
1a0017ac:	f000 fff4 	bl	1a002798 <__aeabi_dsub>
1a0017b0:	4602      	mov	r2, r0
1a0017b2:	460b      	mov	r3, r1
1a0017b4:	4640      	mov	r0, r8
1a0017b6:	4649      	mov	r1, r9
1a0017b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a0017bc:	f000 ffec 	bl	1a002798 <__aeabi_dsub>
1a0017c0:	4632      	mov	r2, r6
1a0017c2:	463b      	mov	r3, r7
1a0017c4:	f000 ffe8 	bl	1a002798 <__aeabi_dsub>
1a0017c8:	a334      	add	r3, pc, #208	; (adr r3, 1a00189c <__ieee754_rem_pio2+0x444>)
1a0017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0017ce:	4606      	mov	r6, r0
1a0017d0:	460f      	mov	r7, r1
1a0017d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0017d6:	f001 f993 	bl	1a002b00 <__aeabi_dmul>
1a0017da:	4632      	mov	r2, r6
1a0017dc:	463b      	mov	r3, r7
1a0017de:	f000 ffdb 	bl	1a002798 <__aeabi_dsub>
1a0017e2:	4602      	mov	r2, r0
1a0017e4:	460b      	mov	r3, r1
1a0017e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
1a0017ea:	e73d      	b.n	1a001668 <__ieee754_rem_pio2+0x210>
1a0017ec:	f000 ffd6 	bl	1a00279c <__adddf3>
1a0017f0:	4b27      	ldr	r3, [pc, #156]	; (1a001890 <__ieee754_rem_pio2+0x438>)
1a0017f2:	429f      	cmp	r7, r3
1a0017f4:	4604      	mov	r4, r0
1a0017f6:	460d      	mov	r5, r1
1a0017f8:	d018      	beq.n	1a00182c <__ieee754_rem_pio2+0x3d4>
1a0017fa:	a31f      	add	r3, pc, #124	; (adr r3, 1a001878 <__ieee754_rem_pio2+0x420>)
1a0017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001800:	f000 ffcc 	bl	1a00279c <__adddf3>
1a001804:	4602      	mov	r2, r0
1a001806:	460b      	mov	r3, r1
1a001808:	e9ca 2300 	strd	r2, r3, [sl]
1a00180c:	4629      	mov	r1, r5
1a00180e:	4620      	mov	r0, r4
1a001810:	f000 ffc2 	bl	1a002798 <__aeabi_dsub>
1a001814:	a318      	add	r3, pc, #96	; (adr r3, 1a001878 <__ieee754_rem_pio2+0x420>)
1a001816:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00181a:	f000 ffbf 	bl	1a00279c <__adddf3>
1a00181e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a001822:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a001826:	e6ba      	b.n	1a00159e <__ieee754_rem_pio2+0x146>
1a001828:	2303      	movs	r3, #3
1a00182a:	e697      	b.n	1a00155c <__ieee754_rem_pio2+0x104>
1a00182c:	a314      	add	r3, pc, #80	; (adr r3, 1a001880 <__ieee754_rem_pio2+0x428>)
1a00182e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001832:	f000 ffb3 	bl	1a00279c <__adddf3>
1a001836:	a314      	add	r3, pc, #80	; (adr r3, 1a001888 <__ieee754_rem_pio2+0x430>)
1a001838:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00183c:	460d      	mov	r5, r1
1a00183e:	4604      	mov	r4, r0
1a001840:	f000 ffac 	bl	1a00279c <__adddf3>
1a001844:	4602      	mov	r2, r0
1a001846:	460b      	mov	r3, r1
1a001848:	e9ca 2300 	strd	r2, r3, [sl]
1a00184c:	4629      	mov	r1, r5
1a00184e:	4620      	mov	r0, r4
1a001850:	f000 ffa2 	bl	1a002798 <__aeabi_dsub>
1a001854:	a30c      	add	r3, pc, #48	; (adr r3, 1a001888 <__ieee754_rem_pio2+0x430>)
1a001856:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00185a:	f000 ff9f 	bl	1a00279c <__adddf3>
1a00185e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a001862:	e9ca 0102 	strd	r0, r1, [sl, #8]
1a001866:	e69a      	b.n	1a00159e <__ieee754_rem_pio2+0x146>
1a001868:	ed9d 7b08 	vldr	d7, [sp, #32]
1a00186c:	ed8d 7b02 	vstr	d7, [sp, #8]
1a001870:	e702      	b.n	1a001678 <__ieee754_rem_pio2+0x220>
1a001872:	bf00      	nop
1a001874:	f3af 8000 	nop.w
1a001878:	1a626331 	.word	0x1a626331
1a00187c:	3dd0b461 	.word	0x3dd0b461
1a001880:	1a600000 	.word	0x1a600000
1a001884:	3dd0b461 	.word	0x3dd0b461
1a001888:	2e037073 	.word	0x2e037073
1a00188c:	3ba3198a 	.word	0x3ba3198a
1a001890:	3ff921fb 	.word	0x3ff921fb
1a001894:	2e000000 	.word	0x2e000000
1a001898:	3ba3198a 	.word	0x3ba3198a
1a00189c:	252049c1 	.word	0x252049c1
1a0018a0:	397b839a 	.word	0x397b839a
1a0018a4:	ffffffff 	.word	0xffffffff

1a0018a8 <__kernel_cos>:
1a0018a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0018ac:	ec57 6b10 	vmov	r6, r7, d0
1a0018b0:	ed2d 8b02 	vpush	{d8}
1a0018b4:	eeb0 8a41 	vmov.f32	s16, s2
1a0018b8:	eef0 8a61 	vmov.f32	s17, s3
1a0018bc:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
1a0018c0:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
1a0018c4:	b083      	sub	sp, #12
1a0018c6:	da72      	bge.n	1a0019ae <__kernel_cos+0x106>
1a0018c8:	ee10 0a10 	vmov	r0, s0
1a0018cc:	4639      	mov	r1, r7
1a0018ce:	f001 fbb1 	bl	1a003034 <__aeabi_d2iz>
1a0018d2:	2800      	cmp	r0, #0
1a0018d4:	f000 80f6 	beq.w	1a001ac4 <__kernel_cos+0x21c>
1a0018d8:	4632      	mov	r2, r6
1a0018da:	463b      	mov	r3, r7
1a0018dc:	4630      	mov	r0, r6
1a0018de:	4639      	mov	r1, r7
1a0018e0:	f001 f90e 	bl	1a002b00 <__aeabi_dmul>
1a0018e4:	a37c      	add	r3, pc, #496	; (adr r3, 1a001ad8 <__kernel_cos+0x230>)
1a0018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0018ea:	4604      	mov	r4, r0
1a0018ec:	460d      	mov	r5, r1
1a0018ee:	f001 f907 	bl	1a002b00 <__aeabi_dmul>
1a0018f2:	a37b      	add	r3, pc, #492	; (adr r3, 1a001ae0 <__kernel_cos+0x238>)
1a0018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0018f8:	f000 ff50 	bl	1a00279c <__adddf3>
1a0018fc:	4622      	mov	r2, r4
1a0018fe:	462b      	mov	r3, r5
1a001900:	f001 f8fe 	bl	1a002b00 <__aeabi_dmul>
1a001904:	a378      	add	r3, pc, #480	; (adr r3, 1a001ae8 <__kernel_cos+0x240>)
1a001906:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00190a:	f000 ff45 	bl	1a002798 <__aeabi_dsub>
1a00190e:	4622      	mov	r2, r4
1a001910:	462b      	mov	r3, r5
1a001912:	f001 f8f5 	bl	1a002b00 <__aeabi_dmul>
1a001916:	a376      	add	r3, pc, #472	; (adr r3, 1a001af0 <__kernel_cos+0x248>)
1a001918:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00191c:	f000 ff3e 	bl	1a00279c <__adddf3>
1a001920:	4622      	mov	r2, r4
1a001922:	462b      	mov	r3, r5
1a001924:	f001 f8ec 	bl	1a002b00 <__aeabi_dmul>
1a001928:	a373      	add	r3, pc, #460	; (adr r3, 1a001af8 <__kernel_cos+0x250>)
1a00192a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00192e:	f000 ff33 	bl	1a002798 <__aeabi_dsub>
1a001932:	4622      	mov	r2, r4
1a001934:	462b      	mov	r3, r5
1a001936:	f001 f8e3 	bl	1a002b00 <__aeabi_dmul>
1a00193a:	a371      	add	r3, pc, #452	; (adr r3, 1a001b00 <__kernel_cos+0x258>)
1a00193c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001940:	f000 ff2c 	bl	1a00279c <__adddf3>
1a001944:	4622      	mov	r2, r4
1a001946:	462b      	mov	r3, r5
1a001948:	f001 f8da 	bl	1a002b00 <__aeabi_dmul>
1a00194c:	4682      	mov	sl, r0
1a00194e:	468b      	mov	fp, r1
1a001950:	2200      	movs	r2, #0
1a001952:	4b71      	ldr	r3, [pc, #452]	; (1a001b18 <__kernel_cos+0x270>)
1a001954:	4620      	mov	r0, r4
1a001956:	4629      	mov	r1, r5
1a001958:	f001 f8d2 	bl	1a002b00 <__aeabi_dmul>
1a00195c:	4652      	mov	r2, sl
1a00195e:	4680      	mov	r8, r0
1a001960:	4689      	mov	r9, r1
1a001962:	465b      	mov	r3, fp
1a001964:	4620      	mov	r0, r4
1a001966:	4629      	mov	r1, r5
1a001968:	f001 f8ca 	bl	1a002b00 <__aeabi_dmul>
1a00196c:	ec53 2b18 	vmov	r2, r3, d8
1a001970:	4604      	mov	r4, r0
1a001972:	460d      	mov	r5, r1
1a001974:	4630      	mov	r0, r6
1a001976:	4639      	mov	r1, r7
1a001978:	f001 f8c2 	bl	1a002b00 <__aeabi_dmul>
1a00197c:	4602      	mov	r2, r0
1a00197e:	460b      	mov	r3, r1
1a001980:	4620      	mov	r0, r4
1a001982:	4629      	mov	r1, r5
1a001984:	f000 ff08 	bl	1a002798 <__aeabi_dsub>
1a001988:	4602      	mov	r2, r0
1a00198a:	460b      	mov	r3, r1
1a00198c:	4640      	mov	r0, r8
1a00198e:	4649      	mov	r1, r9
1a001990:	f000 ff02 	bl	1a002798 <__aeabi_dsub>
1a001994:	4602      	mov	r2, r0
1a001996:	460b      	mov	r3, r1
1a001998:	2000      	movs	r0, #0
1a00199a:	4960      	ldr	r1, [pc, #384]	; (1a001b1c <__kernel_cos+0x274>)
1a00199c:	f000 fefc 	bl	1a002798 <__aeabi_dsub>
1a0019a0:	ec41 0b10 	vmov	d0, r0, r1
1a0019a4:	b003      	add	sp, #12
1a0019a6:	ecbd 8b02 	vpop	{d8}
1a0019aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0019ae:	ee10 2a10 	vmov	r2, s0
1a0019b2:	ee10 0a10 	vmov	r0, s0
1a0019b6:	463b      	mov	r3, r7
1a0019b8:	4639      	mov	r1, r7
1a0019ba:	f001 f8a1 	bl	1a002b00 <__aeabi_dmul>
1a0019be:	a346      	add	r3, pc, #280	; (adr r3, 1a001ad8 <__kernel_cos+0x230>)
1a0019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0019c4:	4604      	mov	r4, r0
1a0019c6:	460d      	mov	r5, r1
1a0019c8:	f001 f89a 	bl	1a002b00 <__aeabi_dmul>
1a0019cc:	a344      	add	r3, pc, #272	; (adr r3, 1a001ae0 <__kernel_cos+0x238>)
1a0019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0019d2:	f000 fee3 	bl	1a00279c <__adddf3>
1a0019d6:	4622      	mov	r2, r4
1a0019d8:	462b      	mov	r3, r5
1a0019da:	f001 f891 	bl	1a002b00 <__aeabi_dmul>
1a0019de:	a342      	add	r3, pc, #264	; (adr r3, 1a001ae8 <__kernel_cos+0x240>)
1a0019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0019e4:	f000 fed8 	bl	1a002798 <__aeabi_dsub>
1a0019e8:	4622      	mov	r2, r4
1a0019ea:	462b      	mov	r3, r5
1a0019ec:	f001 f888 	bl	1a002b00 <__aeabi_dmul>
1a0019f0:	a33f      	add	r3, pc, #252	; (adr r3, 1a001af0 <__kernel_cos+0x248>)
1a0019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0019f6:	f000 fed1 	bl	1a00279c <__adddf3>
1a0019fa:	4622      	mov	r2, r4
1a0019fc:	462b      	mov	r3, r5
1a0019fe:	f001 f87f 	bl	1a002b00 <__aeabi_dmul>
1a001a02:	a33d      	add	r3, pc, #244	; (adr r3, 1a001af8 <__kernel_cos+0x250>)
1a001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001a08:	f000 fec6 	bl	1a002798 <__aeabi_dsub>
1a001a0c:	4622      	mov	r2, r4
1a001a0e:	462b      	mov	r3, r5
1a001a10:	f001 f876 	bl	1a002b00 <__aeabi_dmul>
1a001a14:	a33a      	add	r3, pc, #232	; (adr r3, 1a001b00 <__kernel_cos+0x258>)
1a001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001a1a:	f000 febf 	bl	1a00279c <__adddf3>
1a001a1e:	462b      	mov	r3, r5
1a001a20:	4622      	mov	r2, r4
1a001a22:	f001 f86d 	bl	1a002b00 <__aeabi_dmul>
1a001a26:	4b3e      	ldr	r3, [pc, #248]	; (1a001b20 <__kernel_cos+0x278>)
1a001a28:	4599      	cmp	r9, r3
1a001a2a:	4682      	mov	sl, r0
1a001a2c:	468b      	mov	fp, r1
1a001a2e:	dd8f      	ble.n	1a001950 <__kernel_cos+0xa8>
1a001a30:	4b3c      	ldr	r3, [pc, #240]	; (1a001b24 <__kernel_cos+0x27c>)
1a001a32:	4599      	cmp	r9, r3
1a001a34:	dc3d      	bgt.n	1a001ab2 <__kernel_cos+0x20a>
1a001a36:	2200      	movs	r2, #0
1a001a38:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
1a001a3c:	2000      	movs	r0, #0
1a001a3e:	4937      	ldr	r1, [pc, #220]	; (1a001b1c <__kernel_cos+0x274>)
1a001a40:	4690      	mov	r8, r2
1a001a42:	4699      	mov	r9, r3
1a001a44:	f000 fea8 	bl	1a002798 <__aeabi_dsub>
1a001a48:	e9cd 0100 	strd	r0, r1, [sp]
1a001a4c:	2200      	movs	r2, #0
1a001a4e:	4b32      	ldr	r3, [pc, #200]	; (1a001b18 <__kernel_cos+0x270>)
1a001a50:	4620      	mov	r0, r4
1a001a52:	4629      	mov	r1, r5
1a001a54:	f001 f854 	bl	1a002b00 <__aeabi_dmul>
1a001a58:	4642      	mov	r2, r8
1a001a5a:	464b      	mov	r3, r9
1a001a5c:	f000 fe9c 	bl	1a002798 <__aeabi_dsub>
1a001a60:	4652      	mov	r2, sl
1a001a62:	4680      	mov	r8, r0
1a001a64:	4689      	mov	r9, r1
1a001a66:	465b      	mov	r3, fp
1a001a68:	4620      	mov	r0, r4
1a001a6a:	4629      	mov	r1, r5
1a001a6c:	f001 f848 	bl	1a002b00 <__aeabi_dmul>
1a001a70:	ec53 2b18 	vmov	r2, r3, d8
1a001a74:	4604      	mov	r4, r0
1a001a76:	460d      	mov	r5, r1
1a001a78:	4630      	mov	r0, r6
1a001a7a:	4639      	mov	r1, r7
1a001a7c:	f001 f840 	bl	1a002b00 <__aeabi_dmul>
1a001a80:	4602      	mov	r2, r0
1a001a82:	460b      	mov	r3, r1
1a001a84:	4620      	mov	r0, r4
1a001a86:	4629      	mov	r1, r5
1a001a88:	f000 fe86 	bl	1a002798 <__aeabi_dsub>
1a001a8c:	4602      	mov	r2, r0
1a001a8e:	460b      	mov	r3, r1
1a001a90:	4640      	mov	r0, r8
1a001a92:	4649      	mov	r1, r9
1a001a94:	f000 fe80 	bl	1a002798 <__aeabi_dsub>
1a001a98:	4602      	mov	r2, r0
1a001a9a:	460b      	mov	r3, r1
1a001a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a001aa0:	f000 fe7a 	bl	1a002798 <__aeabi_dsub>
1a001aa4:	ec41 0b10 	vmov	d0, r0, r1
1a001aa8:	b003      	add	sp, #12
1a001aaa:	ecbd 8b02 	vpop	{d8}
1a001aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001ab2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 1a001b08 <__kernel_cos+0x260>
1a001ab6:	f04f 0800 	mov.w	r8, #0
1a001aba:	ed8d 7b00 	vstr	d7, [sp]
1a001abe:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1a001b28 <__kernel_cos+0x280>
1a001ac2:	e7c3      	b.n	1a001a4c <__kernel_cos+0x1a4>
1a001ac4:	ed9f 0b12 	vldr	d0, [pc, #72]	; 1a001b10 <__kernel_cos+0x268>
1a001ac8:	b003      	add	sp, #12
1a001aca:	ecbd 8b02 	vpop	{d8}
1a001ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001ad2:	bf00      	nop
1a001ad4:	f3af 8000 	nop.w
1a001ad8:	be8838d4 	.word	0xbe8838d4
1a001adc:	bda8fae9 	.word	0xbda8fae9
1a001ae0:	bdb4b1c4 	.word	0xbdb4b1c4
1a001ae4:	3e21ee9e 	.word	0x3e21ee9e
1a001ae8:	809c52ad 	.word	0x809c52ad
1a001aec:	3e927e4f 	.word	0x3e927e4f
1a001af0:	19cb1590 	.word	0x19cb1590
1a001af4:	3efa01a0 	.word	0x3efa01a0
1a001af8:	16c15177 	.word	0x16c15177
1a001afc:	3f56c16c 	.word	0x3f56c16c
1a001b00:	5555554c 	.word	0x5555554c
1a001b04:	3fa55555 	.word	0x3fa55555
1a001b08:	00000000 	.word	0x00000000
1a001b0c:	3fe70000 	.word	0x3fe70000
1a001b10:	00000000 	.word	0x00000000
1a001b14:	3ff00000 	.word	0x3ff00000
1a001b18:	3fe00000 	.word	0x3fe00000
1a001b1c:	3ff00000 	.word	0x3ff00000
1a001b20:	3fd33332 	.word	0x3fd33332
1a001b24:	3fe90000 	.word	0x3fe90000
1a001b28:	3fd20000 	.word	0x3fd20000
1a001b2c:	ffffffff 	.word	0xffffffff

1a001b30 <__kernel_rem_pio2>:
1a001b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001b34:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
1a001b38:	4ca3      	ldr	r4, [pc, #652]	; (1a001dc8 <__kernel_rem_pio2+0x298>)
1a001b3a:	9ea4      	ldr	r6, [sp, #656]	; 0x290
1a001b3c:	4da3      	ldr	r5, [pc, #652]	; (1a001dcc <__kernel_rem_pio2+0x29c>)
1a001b3e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
1a001b42:	9407      	str	r4, [sp, #28]
1a001b44:	4626      	mov	r6, r4
1a001b46:	1ed4      	subs	r4, r2, #3
1a001b48:	fb85 7504 	smull	r7, r5, r5, r4
1a001b4c:	17e4      	asrs	r4, r4, #31
1a001b4e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
1a001b52:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
1a001b56:	461d      	mov	r5, r3
1a001b58:	930a      	str	r3, [sp, #40]	; 0x28
1a001b5a:	1c63      	adds	r3, r4, #1
1a001b5c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
1a001b60:	3d01      	subs	r5, #1
1a001b62:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001b66:	9306      	str	r3, [sp, #24]
1a001b68:	462b      	mov	r3, r5
1a001b6a:	940b      	str	r4, [sp, #44]	; 0x2c
1a001b6c:	9503      	str	r5, [sp, #12]
1a001b6e:	1b65      	subs	r5, r4, r5
1a001b70:	18f4      	adds	r4, r6, r3
1a001b72:	9004      	str	r0, [sp, #16]
1a001b74:	9108      	str	r1, [sp, #32]
1a001b76:	d41a      	bmi.n	1a001bae <__kernel_rem_pio2+0x7e>
1a001b78:	442c      	add	r4, r5
1a001b7a:	2600      	movs	r6, #0
1a001b7c:	2700      	movs	r7, #0
1a001b7e:	3401      	adds	r4, #1
1a001b80:	f10d 0888 	add.w	r8, sp, #136	; 0x88
1a001b84:	f8dd 9294 	ldr.w	r9, [sp, #660]	; 0x294
1a001b88:	e008      	b.n	1a001b9c <__kernel_rem_pio2+0x6c>
1a001b8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
1a001b8e:	f000 ff51 	bl	1a002a34 <__aeabi_i2d>
1a001b92:	3501      	adds	r5, #1
1a001b94:	42a5      	cmp	r5, r4
1a001b96:	e8e8 0102 	strd	r0, r1, [r8], #8
1a001b9a:	d008      	beq.n	1a001bae <__kernel_rem_pio2+0x7e>
1a001b9c:	2d00      	cmp	r5, #0
1a001b9e:	daf4      	bge.n	1a001b8a <__kernel_rem_pio2+0x5a>
1a001ba0:	3501      	adds	r5, #1
1a001ba2:	4630      	mov	r0, r6
1a001ba4:	4639      	mov	r1, r7
1a001ba6:	42a5      	cmp	r5, r4
1a001ba8:	e8e8 0102 	strd	r0, r1, [r8], #8
1a001bac:	d1f6      	bne.n	1a001b9c <__kernel_rem_pio2+0x6c>
1a001bae:	9b07      	ldr	r3, [sp, #28]
1a001bb0:	2b00      	cmp	r3, #0
1a001bb2:	f2c0 83eb 	blt.w	1a00238c <__kernel_rem_pio2+0x85c>
1a001bb6:	9b07      	ldr	r3, [sp, #28]
1a001bb8:	f103 0b01 	add.w	fp, r3, #1
1a001bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a001bbe:	a922      	add	r1, sp, #136	; 0x88
1a001bc0:	00db      	lsls	r3, r3, #3
1a001bc2:	461a      	mov	r2, r3
1a001bc4:	eb01 0903 	add.w	r9, r1, r3
1a001bc8:	9300      	str	r3, [sp, #0]
1a001bca:	9b04      	ldr	r3, [sp, #16]
1a001bcc:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
1a001bd0:	4619      	mov	r1, r3
1a001bd2:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
1a001bd6:	eb01 0802 	add.w	r8, r1, r2
1a001bda:	9b03      	ldr	r3, [sp, #12]
1a001bdc:	2b00      	cmp	r3, #0
1a001bde:	f2c0 8301 	blt.w	1a0021e4 <__kernel_rem_pio2+0x6b4>
1a001be2:	9c04      	ldr	r4, [sp, #16]
1a001be4:	464d      	mov	r5, r9
1a001be6:	2600      	movs	r6, #0
1a001be8:	2700      	movs	r7, #0
1a001bea:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a001bee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
1a001bf2:	f000 ff85 	bl	1a002b00 <__aeabi_dmul>
1a001bf6:	4602      	mov	r2, r0
1a001bf8:	460b      	mov	r3, r1
1a001bfa:	4630      	mov	r0, r6
1a001bfc:	4639      	mov	r1, r7
1a001bfe:	f000 fdcd 	bl	1a00279c <__adddf3>
1a001c02:	4544      	cmp	r4, r8
1a001c04:	4606      	mov	r6, r0
1a001c06:	460f      	mov	r7, r1
1a001c08:	d1ef      	bne.n	1a001bea <__kernel_rem_pio2+0xba>
1a001c0a:	e8ea 6702 	strd	r6, r7, [sl], #8
1a001c0e:	45da      	cmp	sl, fp
1a001c10:	f109 0908 	add.w	r9, r9, #8
1a001c14:	d1e1      	bne.n	1a001bda <__kernel_rem_pio2+0xaa>
1a001c16:	9907      	ldr	r1, [sp, #28]
1a001c18:	9800      	ldr	r0, [sp, #0]
1a001c1a:	9c04      	ldr	r4, [sp, #16]
1a001c1c:	9100      	str	r1, [sp, #0]
1a001c1e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
1a001c22:	3b01      	subs	r3, #1
1a001c24:	009b      	lsls	r3, r3, #2
1a001c26:	4420      	add	r0, r4
1a001c28:	1f1a      	subs	r2, r3, #4
1a001c2a:	4683      	mov	fp, r0
1a001c2c:	a80e      	add	r0, sp, #56	; 0x38
1a001c2e:	4402      	add	r2, r0
1a001c30:	4403      	add	r3, r0
1a001c32:	920c      	str	r2, [sp, #48]	; 0x30
1a001c34:	930d      	str	r3, [sp, #52]	; 0x34
1a001c36:	9a00      	ldr	r2, [sp, #0]
1a001c38:	a99a      	add	r1, sp, #616	; 0x268
1a001c3a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
1a001c3e:	2a00      	cmp	r2, #0
1a001c40:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
1a001c44:	dd29      	ble.n	1a001c9a <__kernel_rem_pio2+0x16a>
1a001c46:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
1a001c4a:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
1a001c4e:	f10d 0934 	add.w	r9, sp, #52	; 0x34
1a001c52:	2200      	movs	r2, #0
1a001c54:	4b5e      	ldr	r3, [pc, #376]	; (1a001dd0 <__kernel_rem_pio2+0x2a0>)
1a001c56:	4620      	mov	r0, r4
1a001c58:	4629      	mov	r1, r5
1a001c5a:	f000 ff51 	bl	1a002b00 <__aeabi_dmul>
1a001c5e:	f001 f9e9 	bl	1a003034 <__aeabi_d2iz>
1a001c62:	f000 fee7 	bl	1a002a34 <__aeabi_i2d>
1a001c66:	2200      	movs	r2, #0
1a001c68:	4b5a      	ldr	r3, [pc, #360]	; (1a001dd4 <__kernel_rem_pio2+0x2a4>)
1a001c6a:	4606      	mov	r6, r0
1a001c6c:	460f      	mov	r7, r1
1a001c6e:	f000 ff47 	bl	1a002b00 <__aeabi_dmul>
1a001c72:	4602      	mov	r2, r0
1a001c74:	460b      	mov	r3, r1
1a001c76:	4620      	mov	r0, r4
1a001c78:	4629      	mov	r1, r5
1a001c7a:	f000 fd8d 	bl	1a002798 <__aeabi_dsub>
1a001c7e:	f001 f9d9 	bl	1a003034 <__aeabi_d2iz>
1a001c82:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
1a001c86:	f849 0f04 	str.w	r0, [r9, #4]!
1a001c8a:	4639      	mov	r1, r7
1a001c8c:	4630      	mov	r0, r6
1a001c8e:	f000 fd85 	bl	1a00279c <__adddf3>
1a001c92:	45d0      	cmp	r8, sl
1a001c94:	4604      	mov	r4, r0
1a001c96:	460d      	mov	r5, r1
1a001c98:	d1db      	bne.n	1a001c52 <__kernel_rem_pio2+0x122>
1a001c9a:	f8dd 9018 	ldr.w	r9, [sp, #24]
1a001c9e:	ec45 4b10 	vmov	d0, r4, r5
1a001ca2:	4648      	mov	r0, r9
1a001ca4:	f000 fce0 	bl	1a002668 <scalbn>
1a001ca8:	ec55 4b10 	vmov	r4, r5, d0
1a001cac:	2200      	movs	r2, #0
1a001cae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a001cb2:	ee10 0a10 	vmov	r0, s0
1a001cb6:	4629      	mov	r1, r5
1a001cb8:	f000 ff22 	bl	1a002b00 <__aeabi_dmul>
1a001cbc:	ec41 0b10 	vmov	d0, r0, r1
1a001cc0:	f000 fc42 	bl	1a002548 <floor>
1a001cc4:	2200      	movs	r2, #0
1a001cc6:	ec51 0b10 	vmov	r0, r1, d0
1a001cca:	4b43      	ldr	r3, [pc, #268]	; (1a001dd8 <__kernel_rem_pio2+0x2a8>)
1a001ccc:	f000 ff18 	bl	1a002b00 <__aeabi_dmul>
1a001cd0:	4602      	mov	r2, r0
1a001cd2:	460b      	mov	r3, r1
1a001cd4:	4620      	mov	r0, r4
1a001cd6:	4629      	mov	r1, r5
1a001cd8:	f000 fd5e 	bl	1a002798 <__aeabi_dsub>
1a001cdc:	460d      	mov	r5, r1
1a001cde:	4604      	mov	r4, r0
1a001ce0:	f001 f9a8 	bl	1a003034 <__aeabi_d2iz>
1a001ce4:	4680      	mov	r8, r0
1a001ce6:	f000 fea5 	bl	1a002a34 <__aeabi_i2d>
1a001cea:	460b      	mov	r3, r1
1a001cec:	4602      	mov	r2, r0
1a001cee:	4629      	mov	r1, r5
1a001cf0:	4620      	mov	r0, r4
1a001cf2:	f000 fd51 	bl	1a002798 <__aeabi_dsub>
1a001cf6:	464b      	mov	r3, r9
1a001cf8:	2b00      	cmp	r3, #0
1a001cfa:	4606      	mov	r6, r0
1a001cfc:	460f      	mov	r7, r1
1a001cfe:	f340 80fa 	ble.w	1a001ef6 <__kernel_rem_pio2+0x3c6>
1a001d02:	9a00      	ldr	r2, [sp, #0]
1a001d04:	a90e      	add	r1, sp, #56	; 0x38
1a001d06:	3a01      	subs	r2, #1
1a001d08:	f1c9 0318 	rsb	r3, r9, #24
1a001d0c:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
1a001d10:	fa45 f103 	asr.w	r1, r5, r3
1a001d14:	fa01 f303 	lsl.w	r3, r1, r3
1a001d18:	a80e      	add	r0, sp, #56	; 0x38
1a001d1a:	1aeb      	subs	r3, r5, r3
1a001d1c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
1a001d20:	f1c9 0517 	rsb	r5, r9, #23
1a001d24:	4488      	add	r8, r1
1a001d26:	fa43 f505 	asr.w	r5, r3, r5
1a001d2a:	2d00      	cmp	r5, #0
1a001d2c:	dd6e      	ble.n	1a001e0c <__kernel_rem_pio2+0x2dc>
1a001d2e:	9b00      	ldr	r3, [sp, #0]
1a001d30:	2b00      	cmp	r3, #0
1a001d32:	f108 0801 	add.w	r8, r8, #1
1a001d36:	f340 8274 	ble.w	1a002222 <__kernel_rem_pio2+0x6f2>
1a001d3a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1a001d3c:	2c00      	cmp	r4, #0
1a001d3e:	f040 831b 	bne.w	1a002378 <__kernel_rem_pio2+0x848>
1a001d42:	9b00      	ldr	r3, [sp, #0]
1a001d44:	2b01      	cmp	r3, #1
1a001d46:	f340 8294 	ble.w	1a002272 <__kernel_rem_pio2+0x742>
1a001d4a:	aa0e      	add	r2, sp, #56	; 0x38
1a001d4c:	2301      	movs	r3, #1
1a001d4e:	f852 4f04 	ldr.w	r4, [r2, #4]!
1a001d52:	2c00      	cmp	r4, #0
1a001d54:	f000 8288 	beq.w	1a002268 <__kernel_rem_pio2+0x738>
1a001d58:	1c58      	adds	r0, r3, #1
1a001d5a:	aa0e      	add	r2, sp, #56	; 0x38
1a001d5c:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
1a001d60:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
1a001d64:	9a00      	ldr	r2, [sp, #0]
1a001d66:	4282      	cmp	r2, r0
1a001d68:	dd19      	ble.n	1a001d9e <__kernel_rem_pio2+0x26e>
1a001d6a:	aa0e      	add	r2, sp, #56	; 0x38
1a001d6c:	ac0e      	add	r4, sp, #56	; 0x38
1a001d6e:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
1a001d72:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
1a001d76:	1a51      	subs	r1, r2, r1
1a001d78:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
1a001d7c:	9900      	ldr	r1, [sp, #0]
1a001d7e:	3302      	adds	r3, #2
1a001d80:	4299      	cmp	r1, r3
1a001d82:	dd0c      	ble.n	1a001d9e <__kernel_rem_pio2+0x26e>
1a001d84:	4610      	mov	r0, r2
1a001d86:	9a00      	ldr	r2, [sp, #0]
1a001d88:	a90e      	add	r1, sp, #56	; 0x38
1a001d8a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
1a001d8e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
1a001d92:	681a      	ldr	r2, [r3, #0]
1a001d94:	1a82      	subs	r2, r0, r2
1a001d96:	f843 2b04 	str.w	r2, [r3], #4
1a001d9a:	428b      	cmp	r3, r1
1a001d9c:	d1f9      	bne.n	1a001d92 <__kernel_rem_pio2+0x262>
1a001d9e:	9b06      	ldr	r3, [sp, #24]
1a001da0:	2b00      	cmp	r3, #0
1a001da2:	dd1b      	ble.n	1a001ddc <__kernel_rem_pio2+0x2ac>
1a001da4:	9b06      	ldr	r3, [sp, #24]
1a001da6:	2b01      	cmp	r3, #1
1a001da8:	f04f 0401 	mov.w	r4, #1
1a001dac:	f040 8241 	bne.w	1a002232 <__kernel_rem_pio2+0x702>
1a001db0:	9b00      	ldr	r3, [sp, #0]
1a001db2:	1e5a      	subs	r2, r3, #1
1a001db4:	ab0e      	add	r3, sp, #56	; 0x38
1a001db6:	a90e      	add	r1, sp, #56	; 0x38
1a001db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a001dbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
1a001dc0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a001dc4:	e241      	b.n	1a00224a <__kernel_rem_pio2+0x71a>
1a001dc6:	bf00      	nop
1a001dc8:	1a0037c0 	.word	0x1a0037c0
1a001dcc:	2aaaaaab 	.word	0x2aaaaaab
1a001dd0:	3e700000 	.word	0x3e700000
1a001dd4:	41700000 	.word	0x41700000
1a001dd8:	40200000 	.word	0x40200000
1a001ddc:	2d02      	cmp	r5, #2
1a001dde:	d115      	bne.n	1a001e0c <__kernel_rem_pio2+0x2dc>
1a001de0:	4632      	mov	r2, r6
1a001de2:	463b      	mov	r3, r7
1a001de4:	2000      	movs	r0, #0
1a001de6:	4994      	ldr	r1, [pc, #592]	; (1a002038 <__kernel_rem_pio2+0x508>)
1a001de8:	f000 fcd6 	bl	1a002798 <__aeabi_dsub>
1a001dec:	4606      	mov	r6, r0
1a001dee:	460f      	mov	r7, r1
1a001df0:	9806      	ldr	r0, [sp, #24]
1a001df2:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 1a002028 <__kernel_rem_pio2+0x4f8>
1a001df6:	f000 fc37 	bl	1a002668 <scalbn>
1a001dfa:	4630      	mov	r0, r6
1a001dfc:	4639      	mov	r1, r7
1a001dfe:	ec53 2b10 	vmov	r2, r3, d0
1a001e02:	f000 fcc9 	bl	1a002798 <__aeabi_dsub>
1a001e06:	2502      	movs	r5, #2
1a001e08:	4606      	mov	r6, r0
1a001e0a:	460f      	mov	r7, r1
1a001e0c:	2200      	movs	r2, #0
1a001e0e:	2300      	movs	r3, #0
1a001e10:	4630      	mov	r0, r6
1a001e12:	4639      	mov	r1, r7
1a001e14:	f001 f8dc 	bl	1a002fd0 <__aeabi_dcmpeq>
1a001e18:	2800      	cmp	r0, #0
1a001e1a:	f000 823b 	beq.w	1a002294 <__kernel_rem_pio2+0x764>
1a001e1e:	9a00      	ldr	r2, [sp, #0]
1a001e20:	9b07      	ldr	r3, [sp, #28]
1a001e22:	1e50      	subs	r0, r2, #1
1a001e24:	4283      	cmp	r3, r0
1a001e26:	dc0f      	bgt.n	1a001e48 <__kernel_rem_pio2+0x318>
1a001e28:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
1a001e2c:	3b01      	subs	r3, #1
1a001e2e:	aa0e      	add	r2, sp, #56	; 0x38
1a001e30:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1a001e32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1a001e36:	2200      	movs	r2, #0
1a001e38:	f853 1904 	ldr.w	r1, [r3], #-4
1a001e3c:	42a3      	cmp	r3, r4
1a001e3e:	ea42 0201 	orr.w	r2, r2, r1
1a001e42:	d1f9      	bne.n	1a001e38 <__kernel_rem_pio2+0x308>
1a001e44:	2a00      	cmp	r2, #0
1a001e46:	d167      	bne.n	1a001f18 <__kernel_rem_pio2+0x3e8>
1a001e48:	9b07      	ldr	r3, [sp, #28]
1a001e4a:	aa0e      	add	r2, sp, #56	; 0x38
1a001e4c:	3b01      	subs	r3, #1
1a001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001e52:	2b00      	cmp	r3, #0
1a001e54:	f040 821c 	bne.w	1a002290 <__kernel_rem_pio2+0x760>
1a001e58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a001e5a:	2301      	movs	r3, #1
1a001e5c:	f852 1904 	ldr.w	r1, [r2], #-4
1a001e60:	3301      	adds	r3, #1
1a001e62:	2900      	cmp	r1, #0
1a001e64:	d0fa      	beq.n	1a001e5c <__kernel_rem_pio2+0x32c>
1a001e66:	9a00      	ldr	r2, [sp, #0]
1a001e68:	18d3      	adds	r3, r2, r3
1a001e6a:	f102 0a01 	add.w	sl, r2, #1
1a001e6e:	459a      	cmp	sl, r3
1a001e70:	9309      	str	r3, [sp, #36]	; 0x24
1a001e72:	dc3d      	bgt.n	1a001ef0 <__kernel_rem_pio2+0x3c0>
1a001e74:	9b00      	ldr	r3, [sp, #0]
1a001e76:	990a      	ldr	r1, [sp, #40]	; 0x28
1a001e78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a001e7a:	440b      	add	r3, r1
1a001e7c:	9909      	ldr	r1, [sp, #36]	; 0x24
1a001e7e:	eb0a 0802 	add.w	r8, sl, r2
1a001e82:	4699      	mov	r9, r3
1a001e84:	ab22      	add	r3, sp, #136	; 0x88
1a001e86:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
1a001e8a:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
1a001e8e:	188b      	adds	r3, r1, r2
1a001e90:	9aa5      	ldr	r2, [sp, #660]	; 0x294
1a001e92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a001e96:	eb02 0888 	add.w	r8, r2, r8, lsl #2
1a001e9a:	aa72      	add	r2, sp, #456	; 0x1c8
1a001e9c:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
1a001ea0:	9aa5      	ldr	r2, [sp, #660]	; 0x294
1a001ea2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1a001ea6:	9300      	str	r3, [sp, #0]
1a001ea8:	f858 0f04 	ldr.w	r0, [r8, #4]!
1a001eac:	f000 fdc2 	bl	1a002a34 <__aeabi_i2d>
1a001eb0:	9b03      	ldr	r3, [sp, #12]
1a001eb2:	2b00      	cmp	r3, #0
1a001eb4:	e8e9 0102 	strd	r0, r1, [r9], #8
1a001eb8:	f04f 0600 	mov.w	r6, #0
1a001ebc:	f04f 0700 	mov.w	r7, #0
1a001ec0:	db11      	blt.n	1a001ee6 <__kernel_rem_pio2+0x3b6>
1a001ec2:	9c04      	ldr	r4, [sp, #16]
1a001ec4:	464d      	mov	r5, r9
1a001ec6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a001eca:	e8f4 0102 	ldrd	r0, r1, [r4], #8
1a001ece:	f000 fe17 	bl	1a002b00 <__aeabi_dmul>
1a001ed2:	4602      	mov	r2, r0
1a001ed4:	460b      	mov	r3, r1
1a001ed6:	4630      	mov	r0, r6
1a001ed8:	4639      	mov	r1, r7
1a001eda:	f000 fc5f 	bl	1a00279c <__adddf3>
1a001ede:	455c      	cmp	r4, fp
1a001ee0:	4606      	mov	r6, r0
1a001ee2:	460f      	mov	r7, r1
1a001ee4:	d1ef      	bne.n	1a001ec6 <__kernel_rem_pio2+0x396>
1a001ee6:	9b00      	ldr	r3, [sp, #0]
1a001ee8:	4598      	cmp	r8, r3
1a001eea:	e8ea 6702 	strd	r6, r7, [sl], #8
1a001eee:	d1db      	bne.n	1a001ea8 <__kernel_rem_pio2+0x378>
1a001ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001ef2:	9300      	str	r3, [sp, #0]
1a001ef4:	e69f      	b.n	1a001c36 <__kernel_rem_pio2+0x106>
1a001ef6:	d106      	bne.n	1a001f06 <__kernel_rem_pio2+0x3d6>
1a001ef8:	9b00      	ldr	r3, [sp, #0]
1a001efa:	aa0e      	add	r2, sp, #56	; 0x38
1a001efc:	3b01      	subs	r3, #1
1a001efe:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
1a001f02:	15ed      	asrs	r5, r5, #23
1a001f04:	e711      	b.n	1a001d2a <__kernel_rem_pio2+0x1fa>
1a001f06:	2200      	movs	r2, #0
1a001f08:	4b4c      	ldr	r3, [pc, #304]	; (1a00203c <__kernel_rem_pio2+0x50c>)
1a001f0a:	f001 f87f 	bl	1a00300c <__aeabi_dcmpge>
1a001f0e:	2800      	cmp	r0, #0
1a001f10:	f040 8172 	bne.w	1a0021f8 <__kernel_rem_pio2+0x6c8>
1a001f14:	4605      	mov	r5, r0
1a001f16:	e779      	b.n	1a001e0c <__kernel_rem_pio2+0x2dc>
1a001f18:	a90e      	add	r1, sp, #56	; 0x38
1a001f1a:	9503      	str	r5, [sp, #12]
1a001f1c:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
1a001f20:	9906      	ldr	r1, [sp, #24]
1a001f22:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
1a001f26:	3918      	subs	r1, #24
1a001f28:	4602      	mov	r2, r0
1a001f2a:	9000      	str	r0, [sp, #0]
1a001f2c:	9106      	str	r1, [sp, #24]
1a001f2e:	b96b      	cbnz	r3, 1a001f4c <__kernel_rem_pio2+0x41c>
1a001f30:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
1a001f34:	3b01      	subs	r3, #1
1a001f36:	a80e      	add	r0, sp, #56	; 0x38
1a001f38:	eb00 0383 	add.w	r3, r0, r3, lsl #2
1a001f3c:	f853 0904 	ldr.w	r0, [r3], #-4
1a001f40:	3a01      	subs	r2, #1
1a001f42:	3918      	subs	r1, #24
1a001f44:	2800      	cmp	r0, #0
1a001f46:	d0f9      	beq.n	1a001f3c <__kernel_rem_pio2+0x40c>
1a001f48:	9200      	str	r2, [sp, #0]
1a001f4a:	9106      	str	r1, [sp, #24]
1a001f4c:	9806      	ldr	r0, [sp, #24]
1a001f4e:	ed9f 0b36 	vldr	d0, [pc, #216]	; 1a002028 <__kernel_rem_pio2+0x4f8>
1a001f52:	f000 fb89 	bl	1a002668 <scalbn>
1a001f56:	9b00      	ldr	r3, [sp, #0]
1a001f58:	2b00      	cmp	r3, #0
1a001f5a:	ec55 4b10 	vmov	r4, r5, d0
1a001f5e:	f2c0 81fc 	blt.w	1a00235a <__kernel_rem_pio2+0x82a>
1a001f62:	00da      	lsls	r2, r3, #3
1a001f64:	a972      	add	r1, sp, #456	; 0x1c8
1a001f66:	eb01 0b02 	add.w	fp, r1, r2
1a001f6a:	9206      	str	r2, [sp, #24]
1a001f6c:	aa0e      	add	r2, sp, #56	; 0x38
1a001f6e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
1a001f72:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 1a002040 <__kernel_rem_pio2+0x510>
1a001f76:	f04f 0800 	mov.w	r8, #0
1a001f7a:	f10b 0708 	add.w	r7, fp, #8
1a001f7e:	3604      	adds	r6, #4
1a001f80:	f856 0d04 	ldr.w	r0, [r6, #-4]!
1a001f84:	f000 fd56 	bl	1a002a34 <__aeabi_i2d>
1a001f88:	4622      	mov	r2, r4
1a001f8a:	462b      	mov	r3, r5
1a001f8c:	f000 fdb8 	bl	1a002b00 <__aeabi_dmul>
1a001f90:	464b      	mov	r3, r9
1a001f92:	e967 0102 	strd	r0, r1, [r7, #-8]!
1a001f96:	4642      	mov	r2, r8
1a001f98:	4620      	mov	r0, r4
1a001f9a:	4629      	mov	r1, r5
1a001f9c:	f000 fdb0 	bl	1a002b00 <__aeabi_dmul>
1a001fa0:	ab0e      	add	r3, sp, #56	; 0x38
1a001fa2:	429e      	cmp	r6, r3
1a001fa4:	4604      	mov	r4, r0
1a001fa6:	460d      	mov	r5, r1
1a001fa8:	d1ea      	bne.n	1a001f80 <__kernel_rem_pio2+0x450>
1a001faa:	ac4a      	add	r4, sp, #296	; 0x128
1a001fac:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a001fb0:	9404      	str	r4, [sp, #16]
1a001fb2:	f04f 0a00 	mov.w	sl, #0
1a001fb6:	f1b9 0f00 	cmp.w	r9, #0
1a001fba:	f2c0 812f 	blt.w	1a00221c <__kernel_rem_pio2+0x6ec>
1a001fbe:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1a002044 <__kernel_rem_pio2+0x514>
1a001fc2:	465d      	mov	r5, fp
1a001fc4:	a11a      	add	r1, pc, #104	; (adr r1, 1a002030 <__kernel_rem_pio2+0x500>)
1a001fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
1a001fca:	2600      	movs	r6, #0
1a001fcc:	2700      	movs	r7, #0
1a001fce:	2400      	movs	r4, #0
1a001fd0:	e003      	b.n	1a001fda <__kernel_rem_pio2+0x4aa>
1a001fd2:	4554      	cmp	r4, sl
1a001fd4:	dc10      	bgt.n	1a001ff8 <__kernel_rem_pio2+0x4c8>
1a001fd6:	e8f8 0102 	ldrd	r0, r1, [r8], #8
1a001fda:	e8f5 2302 	ldrd	r2, r3, [r5], #8
1a001fde:	f000 fd8f 	bl	1a002b00 <__aeabi_dmul>
1a001fe2:	4602      	mov	r2, r0
1a001fe4:	460b      	mov	r3, r1
1a001fe6:	4630      	mov	r0, r6
1a001fe8:	4639      	mov	r1, r7
1a001fea:	f000 fbd7 	bl	1a00279c <__adddf3>
1a001fee:	3401      	adds	r4, #1
1a001ff0:	45a1      	cmp	r9, r4
1a001ff2:	4606      	mov	r6, r0
1a001ff4:	460f      	mov	r7, r1
1a001ff6:	daec      	bge.n	1a001fd2 <__kernel_rem_pio2+0x4a2>
1a001ff8:	9b04      	ldr	r3, [sp, #16]
1a001ffa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
1a001ffe:	f1ab 0b08 	sub.w	fp, fp, #8
1a002002:	e9c3 6700 	strd	r6, r7, [r3]
1a002006:	ab70      	add	r3, sp, #448	; 0x1c0
1a002008:	459b      	cmp	fp, r3
1a00200a:	f10a 0a01 	add.w	sl, sl, #1
1a00200e:	d1d2      	bne.n	1a001fb6 <__kernel_rem_pio2+0x486>
1a002010:	9ba4      	ldr	r3, [sp, #656]	; 0x290
1a002012:	9c04      	ldr	r4, [sp, #16]
1a002014:	2b03      	cmp	r3, #3
1a002016:	f200 808d 	bhi.w	1a002134 <__kernel_rem_pio2+0x604>
1a00201a:	e8df f013 	tbh	[pc, r3, lsl #1]
1a00201e:	00c9      	.short	0x00c9
1a002020:	00920092 	.word	0x00920092
1a002024:	0015      	.short	0x0015
1a002026:	bf00      	nop
1a002028:	00000000 	.word	0x00000000
1a00202c:	3ff00000 	.word	0x3ff00000
1a002030:	40000000 	.word	0x40000000
1a002034:	3ff921fb 	.word	0x3ff921fb
1a002038:	3ff00000 	.word	0x3ff00000
1a00203c:	3fe00000 	.word	0x3fe00000
1a002040:	3e700000 	.word	0x3e700000
1a002044:	1a0037d8 	.word	0x1a0037d8
1a002048:	9b00      	ldr	r3, [sp, #0]
1a00204a:	2b00      	cmp	r3, #0
1a00204c:	f340 8182 	ble.w	1a002354 <__kernel_rem_pio2+0x824>
1a002050:	9a06      	ldr	r2, [sp, #24]
1a002052:	eb04 0a02 	add.w	sl, r4, r2
1a002056:	e9da 8900 	ldrd	r8, r9, [sl]
1a00205a:	f102 0508 	add.w	r5, r2, #8
1a00205e:	4425      	add	r5, r4
1a002060:	f50d 7b98 	add.w	fp, sp, #304	; 0x130
1a002064:	ed1a 7b02 	vldr	d7, [sl, #-8]
1a002068:	4642      	mov	r2, r8
1a00206a:	464b      	mov	r3, r9
1a00206c:	ec51 0b17 	vmov	r0, r1, d7
1a002070:	ed8d 7b04 	vstr	d7, [sp, #16]
1a002074:	f000 fb92 	bl	1a00279c <__adddf3>
1a002078:	4606      	mov	r6, r0
1a00207a:	460f      	mov	r7, r1
1a00207c:	4602      	mov	r2, r0
1a00207e:	460b      	mov	r3, r1
1a002080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a002084:	f000 fb88 	bl	1a002798 <__aeabi_dsub>
1a002088:	4642      	mov	r2, r8
1a00208a:	464b      	mov	r3, r9
1a00208c:	f000 fb86 	bl	1a00279c <__adddf3>
1a002090:	e965 0102 	strd	r0, r1, [r5, #-8]!
1a002094:	455d      	cmp	r5, fp
1a002096:	46b0      	mov	r8, r6
1a002098:	46b9      	mov	r9, r7
1a00209a:	e96a 6702 	strd	r6, r7, [sl, #-8]!
1a00209e:	d1e1      	bne.n	1a002064 <__kernel_rem_pio2+0x534>
1a0020a0:	9b00      	ldr	r3, [sp, #0]
1a0020a2:	2b01      	cmp	r3, #1
1a0020a4:	f340 8156 	ble.w	1a002354 <__kernel_rem_pio2+0x824>
1a0020a8:	9b06      	ldr	r3, [sp, #24]
1a0020aa:	18e5      	adds	r5, r4, r3
1a0020ac:	e9d5 8900 	ldrd	r8, r9, [r5]
1a0020b0:	f103 0b08 	add.w	fp, r3, #8
1a0020b4:	eb04 0a0b 	add.w	sl, r4, fp
1a0020b8:	ed15 7b02 	vldr	d7, [r5, #-8]
1a0020bc:	4642      	mov	r2, r8
1a0020be:	464b      	mov	r3, r9
1a0020c0:	ec51 0b17 	vmov	r0, r1, d7
1a0020c4:	ed8d 7b00 	vstr	d7, [sp]
1a0020c8:	f000 fb68 	bl	1a00279c <__adddf3>
1a0020cc:	4606      	mov	r6, r0
1a0020ce:	460f      	mov	r7, r1
1a0020d0:	4602      	mov	r2, r0
1a0020d2:	460b      	mov	r3, r1
1a0020d4:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0020d8:	f000 fb5e 	bl	1a002798 <__aeabi_dsub>
1a0020dc:	464b      	mov	r3, r9
1a0020de:	4642      	mov	r2, r8
1a0020e0:	f000 fb5c 	bl	1a00279c <__adddf3>
1a0020e4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
1a0020e8:	ab4e      	add	r3, sp, #312	; 0x138
1a0020ea:	4553      	cmp	r3, sl
1a0020ec:	46b0      	mov	r8, r6
1a0020ee:	46b9      	mov	r9, r7
1a0020f0:	e965 6702 	strd	r6, r7, [r5, #-8]!
1a0020f4:	d1e0      	bne.n	1a0020b8 <__kernel_rem_pio2+0x588>
1a0020f6:	2000      	movs	r0, #0
1a0020f8:	2100      	movs	r1, #0
1a0020fa:	eb04 050b 	add.w	r5, r4, fp
1a0020fe:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a002102:	f000 fb4b 	bl	1a00279c <__adddf3>
1a002106:	45aa      	cmp	sl, r5
1a002108:	d1f9      	bne.n	1a0020fe <__kernel_rem_pio2+0x5ce>
1a00210a:	9b03      	ldr	r3, [sp, #12]
1a00210c:	2b00      	cmp	r3, #0
1a00210e:	f000 810b 	beq.w	1a002328 <__kernel_rem_pio2+0x7f8>
1a002112:	6862      	ldr	r2, [r4, #4]
1a002114:	68e3      	ldr	r3, [r4, #12]
1a002116:	9f08      	ldr	r7, [sp, #32]
1a002118:	6825      	ldr	r5, [r4, #0]
1a00211a:	68a4      	ldr	r4, [r4, #8]
1a00211c:	603d      	str	r5, [r7, #0]
1a00211e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
1a002122:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
1a002126:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
1a00212a:	607a      	str	r2, [r7, #4]
1a00212c:	60fb      	str	r3, [r7, #12]
1a00212e:	60bc      	str	r4, [r7, #8]
1a002130:	6138      	str	r0, [r7, #16]
1a002132:	6179      	str	r1, [r7, #20]
1a002134:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002136:	f003 0007 	and.w	r0, r3, #7
1a00213a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
1a00213e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002142:	9d06      	ldr	r5, [sp, #24]
1a002144:	3508      	adds	r5, #8
1a002146:	4425      	add	r5, r4
1a002148:	2000      	movs	r0, #0
1a00214a:	2100      	movs	r1, #0
1a00214c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a002150:	f000 fb24 	bl	1a00279c <__adddf3>
1a002154:	42a5      	cmp	r5, r4
1a002156:	d1f9      	bne.n	1a00214c <__kernel_rem_pio2+0x61c>
1a002158:	9b03      	ldr	r3, [sp, #12]
1a00215a:	2b00      	cmp	r3, #0
1a00215c:	f000 80d3 	beq.w	1a002306 <__kernel_rem_pio2+0x7d6>
1a002160:	9e08      	ldr	r6, [sp, #32]
1a002162:	4602      	mov	r2, r0
1a002164:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a002168:	e886 000c 	stmia.w	r6, {r2, r3}
1a00216c:	460b      	mov	r3, r1
1a00216e:	4602      	mov	r2, r0
1a002170:	e9d4 0100 	ldrd	r0, r1, [r4]
1a002174:	f000 fb10 	bl	1a002798 <__aeabi_dsub>
1a002178:	9b00      	ldr	r3, [sp, #0]
1a00217a:	2b00      	cmp	r3, #0
1a00217c:	dd0b      	ble.n	1a002196 <__kernel_rem_pio2+0x666>
1a00217e:	ad4c      	add	r5, sp, #304	; 0x130
1a002180:	2401      	movs	r4, #1
1a002182:	e8f5 2302 	ldrd	r2, r3, [r5], #8
1a002186:	f000 fb09 	bl	1a00279c <__adddf3>
1a00218a:	9b00      	ldr	r3, [sp, #0]
1a00218c:	3401      	adds	r4, #1
1a00218e:	42a3      	cmp	r3, r4
1a002190:	daf7      	bge.n	1a002182 <__kernel_rem_pio2+0x652>
1a002192:	9b03      	ldr	r3, [sp, #12]
1a002194:	b113      	cbz	r3, 1a00219c <__kernel_rem_pio2+0x66c>
1a002196:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a00219a:	4619      	mov	r1, r3
1a00219c:	9b08      	ldr	r3, [sp, #32]
1a00219e:	e9c3 0102 	strd	r0, r1, [r3, #8]
1a0021a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0021a4:	f003 0007 	and.w	r0, r3, #7
1a0021a8:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
1a0021ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0021b0:	9d06      	ldr	r5, [sp, #24]
1a0021b2:	3508      	adds	r5, #8
1a0021b4:	2000      	movs	r0, #0
1a0021b6:	2100      	movs	r1, #0
1a0021b8:	4425      	add	r5, r4
1a0021ba:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
1a0021be:	f000 faed 	bl	1a00279c <__adddf3>
1a0021c2:	42ac      	cmp	r4, r5
1a0021c4:	d1f9      	bne.n	1a0021ba <__kernel_rem_pio2+0x68a>
1a0021c6:	9b03      	ldr	r3, [sp, #12]
1a0021c8:	b113      	cbz	r3, 1a0021d0 <__kernel_rem_pio2+0x6a0>
1a0021ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a0021ce:	4619      	mov	r1, r3
1a0021d0:	9b08      	ldr	r3, [sp, #32]
1a0021d2:	e9c3 0100 	strd	r0, r1, [r3]
1a0021d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0021d8:	f003 0007 	and.w	r0, r3, #7
1a0021dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
1a0021e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0021e4:	2600      	movs	r6, #0
1a0021e6:	2700      	movs	r7, #0
1a0021e8:	e8ea 6702 	strd	r6, r7, [sl], #8
1a0021ec:	45da      	cmp	sl, fp
1a0021ee:	f109 0908 	add.w	r9, r9, #8
1a0021f2:	f47f acf2 	bne.w	1a001bda <__kernel_rem_pio2+0xaa>
1a0021f6:	e50e      	b.n	1a001c16 <__kernel_rem_pio2+0xe6>
1a0021f8:	9b00      	ldr	r3, [sp, #0]
1a0021fa:	2b00      	cmp	r3, #0
1a0021fc:	f108 0801 	add.w	r8, r8, #1
1a002200:	bfc8      	it	gt
1a002202:	2502      	movgt	r5, #2
1a002204:	f73f ad99 	bgt.w	1a001d3a <__kernel_rem_pio2+0x20a>
1a002208:	4632      	mov	r2, r6
1a00220a:	463b      	mov	r3, r7
1a00220c:	2000      	movs	r0, #0
1a00220e:	4961      	ldr	r1, [pc, #388]	; (1a002394 <__kernel_rem_pio2+0x864>)
1a002210:	f000 fac2 	bl	1a002798 <__aeabi_dsub>
1a002214:	2502      	movs	r5, #2
1a002216:	4606      	mov	r6, r0
1a002218:	460f      	mov	r7, r1
1a00221a:	e5f7      	b.n	1a001e0c <__kernel_rem_pio2+0x2dc>
1a00221c:	2600      	movs	r6, #0
1a00221e:	2700      	movs	r7, #0
1a002220:	e6ea      	b.n	1a001ff8 <__kernel_rem_pio2+0x4c8>
1a002222:	9b06      	ldr	r3, [sp, #24]
1a002224:	2b00      	cmp	r3, #0
1a002226:	dd27      	ble.n	1a002278 <__kernel_rem_pio2+0x748>
1a002228:	2400      	movs	r4, #0
1a00222a:	9b06      	ldr	r3, [sp, #24]
1a00222c:	2b01      	cmp	r3, #1
1a00222e:	f43f adbf 	beq.w	1a001db0 <__kernel_rem_pio2+0x280>
1a002232:	2b02      	cmp	r3, #2
1a002234:	d109      	bne.n	1a00224a <__kernel_rem_pio2+0x71a>
1a002236:	9b00      	ldr	r3, [sp, #0]
1a002238:	1e5a      	subs	r2, r3, #1
1a00223a:	ab0e      	add	r3, sp, #56	; 0x38
1a00223c:	a90e      	add	r1, sp, #56	; 0x38
1a00223e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a002242:	f3c3 0315 	ubfx	r3, r3, #0, #22
1a002246:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a00224a:	2d02      	cmp	r5, #2
1a00224c:	f47f adde 	bne.w	1a001e0c <__kernel_rem_pio2+0x2dc>
1a002250:	4632      	mov	r2, r6
1a002252:	463b      	mov	r3, r7
1a002254:	2000      	movs	r0, #0
1a002256:	494f      	ldr	r1, [pc, #316]	; (1a002394 <__kernel_rem_pio2+0x864>)
1a002258:	f000 fa9e 	bl	1a002798 <__aeabi_dsub>
1a00225c:	4606      	mov	r6, r0
1a00225e:	460f      	mov	r7, r1
1a002260:	2c00      	cmp	r4, #0
1a002262:	f43f add3 	beq.w	1a001e0c <__kernel_rem_pio2+0x2dc>
1a002266:	e5c3      	b.n	1a001df0 <__kernel_rem_pio2+0x2c0>
1a002268:	9900      	ldr	r1, [sp, #0]
1a00226a:	3301      	adds	r3, #1
1a00226c:	4299      	cmp	r1, r3
1a00226e:	f47f ad6e 	bne.w	1a001d4e <__kernel_rem_pio2+0x21e>
1a002272:	9b06      	ldr	r3, [sp, #24]
1a002274:	2b00      	cmp	r3, #0
1a002276:	dcd8      	bgt.n	1a00222a <__kernel_rem_pio2+0x6fa>
1a002278:	2d02      	cmp	r5, #2
1a00227a:	f47f adc7 	bne.w	1a001e0c <__kernel_rem_pio2+0x2dc>
1a00227e:	4632      	mov	r2, r6
1a002280:	463b      	mov	r3, r7
1a002282:	2000      	movs	r0, #0
1a002284:	4943      	ldr	r1, [pc, #268]	; (1a002394 <__kernel_rem_pio2+0x864>)
1a002286:	f000 fa87 	bl	1a002798 <__aeabi_dsub>
1a00228a:	4606      	mov	r6, r0
1a00228c:	460f      	mov	r7, r1
1a00228e:	e5bd      	b.n	1a001e0c <__kernel_rem_pio2+0x2dc>
1a002290:	2301      	movs	r3, #1
1a002292:	e5e8      	b.n	1a001e66 <__kernel_rem_pio2+0x336>
1a002294:	9b06      	ldr	r3, [sp, #24]
1a002296:	9503      	str	r5, [sp, #12]
1a002298:	4258      	negs	r0, r3
1a00229a:	ec47 6b10 	vmov	d0, r6, r7
1a00229e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
1a0022a2:	f000 f9e1 	bl	1a002668 <scalbn>
1a0022a6:	ec55 4b10 	vmov	r4, r5, d0
1a0022aa:	2200      	movs	r2, #0
1a0022ac:	4b3a      	ldr	r3, [pc, #232]	; (1a002398 <__kernel_rem_pio2+0x868>)
1a0022ae:	ee10 0a10 	vmov	r0, s0
1a0022b2:	4629      	mov	r1, r5
1a0022b4:	f000 feaa 	bl	1a00300c <__aeabi_dcmpge>
1a0022b8:	2800      	cmp	r0, #0
1a0022ba:	d041      	beq.n	1a002340 <__kernel_rem_pio2+0x810>
1a0022bc:	2200      	movs	r2, #0
1a0022be:	4b37      	ldr	r3, [pc, #220]	; (1a00239c <__kernel_rem_pio2+0x86c>)
1a0022c0:	4620      	mov	r0, r4
1a0022c2:	4629      	mov	r1, r5
1a0022c4:	f000 fc1c 	bl	1a002b00 <__aeabi_dmul>
1a0022c8:	f000 feb4 	bl	1a003034 <__aeabi_d2iz>
1a0022cc:	4606      	mov	r6, r0
1a0022ce:	f000 fbb1 	bl	1a002a34 <__aeabi_i2d>
1a0022d2:	2200      	movs	r2, #0
1a0022d4:	4b30      	ldr	r3, [pc, #192]	; (1a002398 <__kernel_rem_pio2+0x868>)
1a0022d6:	f000 fc13 	bl	1a002b00 <__aeabi_dmul>
1a0022da:	4602      	mov	r2, r0
1a0022dc:	460b      	mov	r3, r1
1a0022de:	4620      	mov	r0, r4
1a0022e0:	4629      	mov	r1, r5
1a0022e2:	f000 fa59 	bl	1a002798 <__aeabi_dsub>
1a0022e6:	f000 fea5 	bl	1a003034 <__aeabi_d2iz>
1a0022ea:	9900      	ldr	r1, [sp, #0]
1a0022ec:	9b06      	ldr	r3, [sp, #24]
1a0022ee:	460a      	mov	r2, r1
1a0022f0:	3318      	adds	r3, #24
1a0022f2:	3201      	adds	r2, #1
1a0022f4:	9306      	str	r3, [sp, #24]
1a0022f6:	460b      	mov	r3, r1
1a0022f8:	a90e      	add	r1, sp, #56	; 0x38
1a0022fa:	9200      	str	r2, [sp, #0]
1a0022fc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
1a002300:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
1a002304:	e622      	b.n	1a001f4c <__kernel_rem_pio2+0x41c>
1a002306:	9b08      	ldr	r3, [sp, #32]
1a002308:	4602      	mov	r2, r0
1a00230a:	e9c3 0100 	strd	r0, r1, [r3]
1a00230e:	460b      	mov	r3, r1
1a002310:	e9d4 0100 	ldrd	r0, r1, [r4]
1a002314:	f000 fa40 	bl	1a002798 <__aeabi_dsub>
1a002318:	9b00      	ldr	r3, [sp, #0]
1a00231a:	2b00      	cmp	r3, #0
1a00231c:	f73f af2f 	bgt.w	1a00217e <__kernel_rem_pio2+0x64e>
1a002320:	9b08      	ldr	r3, [sp, #32]
1a002322:	e9c3 0102 	strd	r0, r1, [r3, #8]
1a002326:	e73c      	b.n	1a0021a2 <__kernel_rem_pio2+0x672>
1a002328:	e9d4 6700 	ldrd	r6, r7, [r4]
1a00232c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a002330:	9d08      	ldr	r5, [sp, #32]
1a002332:	e9c5 0104 	strd	r0, r1, [r5, #16]
1a002336:	e9c5 6700 	strd	r6, r7, [r5]
1a00233a:	e9c5 2302 	strd	r2, r3, [r5, #8]
1a00233e:	e6f9      	b.n	1a002134 <__kernel_rem_pio2+0x604>
1a002340:	4629      	mov	r1, r5
1a002342:	4620      	mov	r0, r4
1a002344:	f000 fe76 	bl	1a003034 <__aeabi_d2iz>
1a002348:	9a00      	ldr	r2, [sp, #0]
1a00234a:	a90e      	add	r1, sp, #56	; 0x38
1a00234c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
1a002350:	e5fc      	b.n	1a001f4c <__kernel_rem_pio2+0x41c>
1a002352:	ac4a      	add	r4, sp, #296	; 0x128
1a002354:	2000      	movs	r0, #0
1a002356:	2100      	movs	r1, #0
1a002358:	e6d7      	b.n	1a00210a <__kernel_rem_pio2+0x5da>
1a00235a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
1a00235c:	2b03      	cmp	r3, #3
1a00235e:	f63f aee9 	bhi.w	1a002134 <__kernel_rem_pio2+0x604>
1a002362:	a201      	add	r2, pc, #4	; (adr r2, 1a002368 <__kernel_rem_pio2+0x838>)
1a002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002368:	1a002387 	.word	0x1a002387
1a00236c:	1a00237f 	.word	0x1a00237f
1a002370:	1a00237f 	.word	0x1a00237f
1a002374:	1a002353 	.word	0x1a002353
1a002378:	2001      	movs	r0, #1
1a00237a:	2300      	movs	r3, #0
1a00237c:	e4ed      	b.n	1a001d5a <__kernel_rem_pio2+0x22a>
1a00237e:	2000      	movs	r0, #0
1a002380:	2100      	movs	r1, #0
1a002382:	ac4a      	add	r4, sp, #296	; 0x128
1a002384:	e6e8      	b.n	1a002158 <__kernel_rem_pio2+0x628>
1a002386:	2000      	movs	r0, #0
1a002388:	2100      	movs	r1, #0
1a00238a:	e71c      	b.n	1a0021c6 <__kernel_rem_pio2+0x696>
1a00238c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00238e:	00db      	lsls	r3, r3, #3
1a002390:	9300      	str	r3, [sp, #0]
1a002392:	e440      	b.n	1a001c16 <__kernel_rem_pio2+0xe6>
1a002394:	3ff00000 	.word	0x3ff00000
1a002398:	41700000 	.word	0x41700000
1a00239c:	3e700000 	.word	0x3e700000

1a0023a0 <__kernel_sin>:
1a0023a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0023a4:	ec55 4b10 	vmov	r4, r5, d0
1a0023a8:	ed2d 8b02 	vpush	{d8}
1a0023ac:	eeb0 8a41 	vmov.f32	s16, s2
1a0023b0:	eef0 8a61 	vmov.f32	s17, s3
1a0023b4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a0023b8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
1a0023bc:	b083      	sub	sp, #12
1a0023be:	4682      	mov	sl, r0
1a0023c0:	da07      	bge.n	1a0023d2 <__kernel_sin+0x32>
1a0023c2:	ee10 0a10 	vmov	r0, s0
1a0023c6:	4629      	mov	r1, r5
1a0023c8:	f000 fe34 	bl	1a003034 <__aeabi_d2iz>
1a0023cc:	2800      	cmp	r0, #0
1a0023ce:	f000 808e 	beq.w	1a0024ee <__kernel_sin+0x14e>
1a0023d2:	4622      	mov	r2, r4
1a0023d4:	462b      	mov	r3, r5
1a0023d6:	4620      	mov	r0, r4
1a0023d8:	4629      	mov	r1, r5
1a0023da:	f000 fb91 	bl	1a002b00 <__aeabi_dmul>
1a0023de:	4606      	mov	r6, r0
1a0023e0:	460f      	mov	r7, r1
1a0023e2:	4602      	mov	r2, r0
1a0023e4:	460b      	mov	r3, r1
1a0023e6:	4620      	mov	r0, r4
1a0023e8:	4629      	mov	r1, r5
1a0023ea:	f000 fb89 	bl	1a002b00 <__aeabi_dmul>
1a0023ee:	a347      	add	r3, pc, #284	; (adr r3, 1a00250c <__kernel_sin+0x16c>)
1a0023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0023f4:	4680      	mov	r8, r0
1a0023f6:	4689      	mov	r9, r1
1a0023f8:	4630      	mov	r0, r6
1a0023fa:	4639      	mov	r1, r7
1a0023fc:	f000 fb80 	bl	1a002b00 <__aeabi_dmul>
1a002400:	a344      	add	r3, pc, #272	; (adr r3, 1a002514 <__kernel_sin+0x174>)
1a002402:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002406:	f000 f9c7 	bl	1a002798 <__aeabi_dsub>
1a00240a:	4632      	mov	r2, r6
1a00240c:	463b      	mov	r3, r7
1a00240e:	f000 fb77 	bl	1a002b00 <__aeabi_dmul>
1a002412:	a342      	add	r3, pc, #264	; (adr r3, 1a00251c <__kernel_sin+0x17c>)
1a002414:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002418:	f000 f9c0 	bl	1a00279c <__adddf3>
1a00241c:	4632      	mov	r2, r6
1a00241e:	463b      	mov	r3, r7
1a002420:	f000 fb6e 	bl	1a002b00 <__aeabi_dmul>
1a002424:	a33f      	add	r3, pc, #252	; (adr r3, 1a002524 <__kernel_sin+0x184>)
1a002426:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00242a:	f000 f9b5 	bl	1a002798 <__aeabi_dsub>
1a00242e:	4632      	mov	r2, r6
1a002430:	463b      	mov	r3, r7
1a002432:	f000 fb65 	bl	1a002b00 <__aeabi_dmul>
1a002436:	a33d      	add	r3, pc, #244	; (adr r3, 1a00252c <__kernel_sin+0x18c>)
1a002438:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00243c:	f000 f9ae 	bl	1a00279c <__adddf3>
1a002440:	e9cd 0100 	strd	r0, r1, [sp]
1a002444:	f1ba 0f00 	cmp.w	sl, #0
1a002448:	d037      	beq.n	1a0024ba <__kernel_sin+0x11a>
1a00244a:	2200      	movs	r2, #0
1a00244c:	4b2e      	ldr	r3, [pc, #184]	; (1a002508 <__kernel_sin+0x168>)
1a00244e:	ec51 0b18 	vmov	r0, r1, d8
1a002452:	f000 fb55 	bl	1a002b00 <__aeabi_dmul>
1a002456:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00245a:	4682      	mov	sl, r0
1a00245c:	468b      	mov	fp, r1
1a00245e:	4640      	mov	r0, r8
1a002460:	4649      	mov	r1, r9
1a002462:	f000 fb4d 	bl	1a002b00 <__aeabi_dmul>
1a002466:	4602      	mov	r2, r0
1a002468:	460b      	mov	r3, r1
1a00246a:	4650      	mov	r0, sl
1a00246c:	4659      	mov	r1, fp
1a00246e:	f000 f993 	bl	1a002798 <__aeabi_dsub>
1a002472:	4632      	mov	r2, r6
1a002474:	463b      	mov	r3, r7
1a002476:	f000 fb43 	bl	1a002b00 <__aeabi_dmul>
1a00247a:	ec53 2b18 	vmov	r2, r3, d8
1a00247e:	f000 f98b 	bl	1a002798 <__aeabi_dsub>
1a002482:	a31f      	add	r3, pc, #124	; (adr r3, 1a002500 <__kernel_sin+0x160>)
1a002484:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002488:	4606      	mov	r6, r0
1a00248a:	460f      	mov	r7, r1
1a00248c:	4640      	mov	r0, r8
1a00248e:	4649      	mov	r1, r9
1a002490:	f000 fb36 	bl	1a002b00 <__aeabi_dmul>
1a002494:	4602      	mov	r2, r0
1a002496:	460b      	mov	r3, r1
1a002498:	4630      	mov	r0, r6
1a00249a:	4639      	mov	r1, r7
1a00249c:	f000 f97e 	bl	1a00279c <__adddf3>
1a0024a0:	4602      	mov	r2, r0
1a0024a2:	460b      	mov	r3, r1
1a0024a4:	4620      	mov	r0, r4
1a0024a6:	4629      	mov	r1, r5
1a0024a8:	f000 f976 	bl	1a002798 <__aeabi_dsub>
1a0024ac:	ec41 0b10 	vmov	d0, r0, r1
1a0024b0:	b003      	add	sp, #12
1a0024b2:	ecbd 8b02 	vpop	{d8}
1a0024b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0024ba:	4602      	mov	r2, r0
1a0024bc:	460b      	mov	r3, r1
1a0024be:	4630      	mov	r0, r6
1a0024c0:	4639      	mov	r1, r7
1a0024c2:	f000 fb1d 	bl	1a002b00 <__aeabi_dmul>
1a0024c6:	a30e      	add	r3, pc, #56	; (adr r3, 1a002500 <__kernel_sin+0x160>)
1a0024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0024cc:	f000 f964 	bl	1a002798 <__aeabi_dsub>
1a0024d0:	4642      	mov	r2, r8
1a0024d2:	464b      	mov	r3, r9
1a0024d4:	f000 fb14 	bl	1a002b00 <__aeabi_dmul>
1a0024d8:	4622      	mov	r2, r4
1a0024da:	462b      	mov	r3, r5
1a0024dc:	f000 f95e 	bl	1a00279c <__adddf3>
1a0024e0:	ec41 0b10 	vmov	d0, r0, r1
1a0024e4:	b003      	add	sp, #12
1a0024e6:	ecbd 8b02 	vpop	{d8}
1a0024ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0024ee:	ec45 4b10 	vmov	d0, r4, r5
1a0024f2:	b003      	add	sp, #12
1a0024f4:	ecbd 8b02 	vpop	{d8}
1a0024f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0024fc:	f3af 8000 	nop.w
1a002500:	55555549 	.word	0x55555549
1a002504:	3fc55555 	.word	0x3fc55555
1a002508:	3fe00000 	.word	0x3fe00000
1a00250c:	5acfd57c 	.word	0x5acfd57c
1a002510:	3de5d93a 	.word	0x3de5d93a
1a002514:	8a2b9ceb 	.word	0x8a2b9ceb
1a002518:	3e5ae5e6 	.word	0x3e5ae5e6
1a00251c:	57b1fe7d 	.word	0x57b1fe7d
1a002520:	3ec71de3 	.word	0x3ec71de3
1a002524:	19c161d5 	.word	0x19c161d5
1a002528:	3f2a01a0 	.word	0x3f2a01a0
1a00252c:	1110f8a6 	.word	0x1110f8a6
1a002530:	3f811111 	.word	0x3f811111

1a002534 <fabs>:
1a002534:	ec53 2b10 	vmov	r2, r3, d0
1a002538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
1a00253c:	ec43 2b10 	vmov	d0, r2, r3
1a002540:	4770      	bx	lr
1a002542:	bf00      	nop
1a002544:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a002548 <floor>:
1a002548:	ec51 0b10 	vmov	r0, r1, d0
1a00254c:	f3c1 530a 	ubfx	r3, r1, #20, #11
1a002550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002554:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
1a002558:	2d13      	cmp	r5, #19
1a00255a:	460c      	mov	r4, r1
1a00255c:	460f      	mov	r7, r1
1a00255e:	ee10 6a10 	vmov	r6, s0
1a002562:	dc1d      	bgt.n	1a0025a0 <floor+0x58>
1a002564:	2d00      	cmp	r5, #0
1a002566:	db43      	blt.n	1a0025f0 <floor+0xa8>
1a002568:	4b3d      	ldr	r3, [pc, #244]	; (1a002660 <floor+0x118>)
1a00256a:	fa43 f805 	asr.w	r8, r3, r5
1a00256e:	ea01 0308 	and.w	r3, r1, r8
1a002572:	4303      	orrs	r3, r0
1a002574:	d019      	beq.n	1a0025aa <floor+0x62>
1a002576:	a338      	add	r3, pc, #224	; (adr r3, 1a002658 <floor+0x110>)
1a002578:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00257c:	f000 f90e 	bl	1a00279c <__adddf3>
1a002580:	2200      	movs	r2, #0
1a002582:	2300      	movs	r3, #0
1a002584:	f000 fd4c 	bl	1a003020 <__aeabi_dcmpgt>
1a002588:	b120      	cbz	r0, 1a002594 <floor+0x4c>
1a00258a:	2c00      	cmp	r4, #0
1a00258c:	db49      	blt.n	1a002622 <floor+0xda>
1a00258e:	ea27 0408 	bic.w	r4, r7, r8
1a002592:	2600      	movs	r6, #0
1a002594:	4623      	mov	r3, r4
1a002596:	4632      	mov	r2, r6
1a002598:	ec43 2b10 	vmov	d0, r2, r3
1a00259c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0025a0:	2d33      	cmp	r5, #51	; 0x33
1a0025a2:	dd06      	ble.n	1a0025b2 <floor+0x6a>
1a0025a4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
1a0025a8:	d032      	beq.n	1a002610 <floor+0xc8>
1a0025aa:	ec41 0b10 	vmov	d0, r0, r1
1a0025ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0025b2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
1a0025b6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
1a0025ba:	fa28 f803 	lsr.w	r8, r8, r3
1a0025be:	ea10 0f08 	tst.w	r0, r8
1a0025c2:	d0f2      	beq.n	1a0025aa <floor+0x62>
1a0025c4:	a324      	add	r3, pc, #144	; (adr r3, 1a002658 <floor+0x110>)
1a0025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0025ca:	f000 f8e7 	bl	1a00279c <__adddf3>
1a0025ce:	2200      	movs	r2, #0
1a0025d0:	2300      	movs	r3, #0
1a0025d2:	f000 fd25 	bl	1a003020 <__aeabi_dcmpgt>
1a0025d6:	2800      	cmp	r0, #0
1a0025d8:	d0dc      	beq.n	1a002594 <floor+0x4c>
1a0025da:	2c00      	cmp	r4, #0
1a0025dc:	db27      	blt.n	1a00262e <floor+0xe6>
1a0025de:	463c      	mov	r4, r7
1a0025e0:	ea26 0608 	bic.w	r6, r6, r8
1a0025e4:	4623      	mov	r3, r4
1a0025e6:	4632      	mov	r2, r6
1a0025e8:	ec43 2b10 	vmov	d0, r2, r3
1a0025ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0025f0:	a319      	add	r3, pc, #100	; (adr r3, 1a002658 <floor+0x110>)
1a0025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0025f6:	f000 f8d1 	bl	1a00279c <__adddf3>
1a0025fa:	2200      	movs	r2, #0
1a0025fc:	2300      	movs	r3, #0
1a0025fe:	f000 fd0f 	bl	1a003020 <__aeabi_dcmpgt>
1a002602:	2800      	cmp	r0, #0
1a002604:	d0c6      	beq.n	1a002594 <floor+0x4c>
1a002606:	2c00      	cmp	r4, #0
1a002608:	db1c      	blt.n	1a002644 <floor+0xfc>
1a00260a:	2600      	movs	r6, #0
1a00260c:	4634      	mov	r4, r6
1a00260e:	e7c1      	b.n	1a002594 <floor+0x4c>
1a002610:	ee10 2a10 	vmov	r2, s0
1a002614:	460b      	mov	r3, r1
1a002616:	f000 f8c1 	bl	1a00279c <__adddf3>
1a00261a:	ec41 0b10 	vmov	d0, r0, r1
1a00261e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002622:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
1a002626:	fa43 f505 	asr.w	r5, r3, r5
1a00262a:	442f      	add	r7, r5
1a00262c:	e7af      	b.n	1a00258e <floor+0x46>
1a00262e:	2d14      	cmp	r5, #20
1a002630:	d010      	beq.n	1a002654 <floor+0x10c>
1a002632:	2301      	movs	r3, #1
1a002634:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
1a002638:	fa03 f505 	lsl.w	r5, r3, r5
1a00263c:	19ae      	adds	r6, r5, r6
1a00263e:	bf28      	it	cs
1a002640:	18ff      	addcs	r7, r7, r3
1a002642:	e7cc      	b.n	1a0025de <floor+0x96>
1a002644:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
1a002648:	4b06      	ldr	r3, [pc, #24]	; (1a002664 <floor+0x11c>)
1a00264a:	4332      	orrs	r2, r6
1a00264c:	bf18      	it	ne
1a00264e:	461c      	movne	r4, r3
1a002650:	2600      	movs	r6, #0
1a002652:	e79f      	b.n	1a002594 <floor+0x4c>
1a002654:	3701      	adds	r7, #1
1a002656:	e7c2      	b.n	1a0025de <floor+0x96>
1a002658:	8800759c 	.word	0x8800759c
1a00265c:	7e37e43c 	.word	0x7e37e43c
1a002660:	000fffff 	.word	0x000fffff
1a002664:	bff00000 	.word	0xbff00000

1a002668 <scalbn>:
1a002668:	ec53 2b10 	vmov	r2, r3, d0
1a00266c:	b570      	push	{r4, r5, r6, lr}
1a00266e:	f3c3 540a 	ubfx	r4, r3, #20, #11
1a002672:	4619      	mov	r1, r3
1a002674:	4605      	mov	r5, r0
1a002676:	bb14      	cbnz	r4, 1a0026be <scalbn+0x56>
1a002678:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a00267c:	4311      	orrs	r1, r2
1a00267e:	d02a      	beq.n	1a0026d6 <scalbn+0x6e>
1a002680:	4619      	mov	r1, r3
1a002682:	2200      	movs	r2, #0
1a002684:	4b38      	ldr	r3, [pc, #224]	; (1a002768 <scalbn+0x100>)
1a002686:	4e39      	ldr	r6, [pc, #228]	; (1a00276c <scalbn+0x104>)
1a002688:	ee10 0a10 	vmov	r0, s0
1a00268c:	f000 fa38 	bl	1a002b00 <__aeabi_dmul>
1a002690:	42b5      	cmp	r5, r6
1a002692:	4602      	mov	r2, r0
1a002694:	460b      	mov	r3, r1
1a002696:	db1f      	blt.n	1a0026d8 <scalbn+0x70>
1a002698:	f3c1 540a 	ubfx	r4, r1, #20, #11
1a00269c:	3c36      	subs	r4, #54	; 0x36
1a00269e:	442c      	add	r4, r5
1a0026a0:	f240 70fe 	movw	r0, #2046	; 0x7fe
1a0026a4:	4284      	cmp	r4, r0
1a0026a6:	dc1f      	bgt.n	1a0026e8 <scalbn+0x80>
1a0026a8:	2c00      	cmp	r4, #0
1a0026aa:	dd2d      	ble.n	1a002708 <scalbn+0xa0>
1a0026ac:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
1a0026b0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
1a0026b4:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
1a0026b8:	ec43 2b10 	vmov	d0, r2, r3
1a0026bc:	bd70      	pop	{r4, r5, r6, pc}
1a0026be:	f240 70ff 	movw	r0, #2047	; 0x7ff
1a0026c2:	4284      	cmp	r4, r0
1a0026c4:	d1eb      	bne.n	1a00269e <scalbn+0x36>
1a0026c6:	ee10 0a10 	vmov	r0, s0
1a0026ca:	4619      	mov	r1, r3
1a0026cc:	f000 f866 	bl	1a00279c <__adddf3>
1a0026d0:	ec41 0b10 	vmov	d0, r0, r1
1a0026d4:	bd70      	pop	{r4, r5, r6, pc}
1a0026d6:	bd70      	pop	{r4, r5, r6, pc}
1a0026d8:	a31f      	add	r3, pc, #124	; (adr r3, 1a002758 <scalbn+0xf0>)
1a0026da:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0026de:	f000 fa0f 	bl	1a002b00 <__aeabi_dmul>
1a0026e2:	ec41 0b10 	vmov	d0, r0, r1
1a0026e6:	bd70      	pop	{r4, r5, r6, pc}
1a0026e8:	ec43 2b11 	vmov	d1, r2, r3
1a0026ec:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 1a002760 <scalbn+0xf8>
1a0026f0:	f000 f840 	bl	1a002774 <copysign>
1a0026f4:	a31a      	add	r3, pc, #104	; (adr r3, 1a002760 <scalbn+0xf8>)
1a0026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0026fa:	ec51 0b10 	vmov	r0, r1, d0
1a0026fe:	f000 f9ff 	bl	1a002b00 <__aeabi_dmul>
1a002702:	ec41 0b10 	vmov	d0, r0, r1
1a002706:	bd70      	pop	{r4, r5, r6, pc}
1a002708:	f114 0f35 	cmn.w	r4, #53	; 0x35
1a00270c:	da13      	bge.n	1a002736 <scalbn+0xce>
1a00270e:	f24c 3150 	movw	r1, #50000	; 0xc350
1a002712:	428d      	cmp	r5, r1
1a002714:	ec43 2b11 	vmov	d1, r2, r3
1a002718:	dce8      	bgt.n	1a0026ec <scalbn+0x84>
1a00271a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 1a002758 <scalbn+0xf0>
1a00271e:	f000 f829 	bl	1a002774 <copysign>
1a002722:	a30d      	add	r3, pc, #52	; (adr r3, 1a002758 <scalbn+0xf0>)
1a002724:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002728:	ec51 0b10 	vmov	r0, r1, d0
1a00272c:	f000 f9e8 	bl	1a002b00 <__aeabi_dmul>
1a002730:	ec41 0b10 	vmov	d0, r0, r1
1a002734:	bd70      	pop	{r4, r5, r6, pc}
1a002736:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
1a00273a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
1a00273e:	3436      	adds	r4, #54	; 0x36
1a002740:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
1a002744:	4610      	mov	r0, r2
1a002746:	4619      	mov	r1, r3
1a002748:	2200      	movs	r2, #0
1a00274a:	4b09      	ldr	r3, [pc, #36]	; (1a002770 <scalbn+0x108>)
1a00274c:	f000 f9d8 	bl	1a002b00 <__aeabi_dmul>
1a002750:	ec41 0b10 	vmov	d0, r0, r1
1a002754:	bd70      	pop	{r4, r5, r6, pc}
1a002756:	bf00      	nop
1a002758:	c2f8f359 	.word	0xc2f8f359
1a00275c:	01a56e1f 	.word	0x01a56e1f
1a002760:	8800759c 	.word	0x8800759c
1a002764:	7e37e43c 	.word	0x7e37e43c
1a002768:	43500000 	.word	0x43500000
1a00276c:	ffff3cb0 	.word	0xffff3cb0
1a002770:	3c900000 	.word	0x3c900000

1a002774 <copysign>:
1a002774:	ec53 2b10 	vmov	r2, r3, d0
1a002778:	ee11 0a90 	vmov	r0, s3
1a00277c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a002780:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
1a002784:	ea41 0300 	orr.w	r3, r1, r0
1a002788:	ec43 2b10 	vmov	d0, r2, r3
1a00278c:	4770      	bx	lr
1a00278e:	bf00      	nop

1a002790 <__aeabi_drsub>:
1a002790:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a002794:	e002      	b.n	1a00279c <__adddf3>
1a002796:	bf00      	nop

1a002798 <__aeabi_dsub>:
1a002798:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a00279c <__adddf3>:
1a00279c:	b530      	push	{r4, r5, lr}
1a00279e:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a0027a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a0027a6:	ea94 0f05 	teq	r4, r5
1a0027aa:	bf08      	it	eq
1a0027ac:	ea90 0f02 	teqeq	r0, r2
1a0027b0:	bf1f      	itttt	ne
1a0027b2:	ea54 0c00 	orrsne.w	ip, r4, r0
1a0027b6:	ea55 0c02 	orrsne.w	ip, r5, r2
1a0027ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a0027be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0027c2:	f000 80e2 	beq.w	1a00298a <__adddf3+0x1ee>
1a0027c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a0027ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a0027ce:	bfb8      	it	lt
1a0027d0:	426d      	neglt	r5, r5
1a0027d2:	dd0c      	ble.n	1a0027ee <__adddf3+0x52>
1a0027d4:	442c      	add	r4, r5
1a0027d6:	ea80 0202 	eor.w	r2, r0, r2
1a0027da:	ea81 0303 	eor.w	r3, r1, r3
1a0027de:	ea82 0000 	eor.w	r0, r2, r0
1a0027e2:	ea83 0101 	eor.w	r1, r3, r1
1a0027e6:	ea80 0202 	eor.w	r2, r0, r2
1a0027ea:	ea81 0303 	eor.w	r3, r1, r3
1a0027ee:	2d36      	cmp	r5, #54	; 0x36
1a0027f0:	bf88      	it	hi
1a0027f2:	bd30      	pophi	{r4, r5, pc}
1a0027f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0027f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0027fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a002800:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a002804:	d002      	beq.n	1a00280c <__adddf3+0x70>
1a002806:	4240      	negs	r0, r0
1a002808:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00280c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a002810:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002814:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a002818:	d002      	beq.n	1a002820 <__adddf3+0x84>
1a00281a:	4252      	negs	r2, r2
1a00281c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002820:	ea94 0f05 	teq	r4, r5
1a002824:	f000 80a7 	beq.w	1a002976 <__adddf3+0x1da>
1a002828:	f1a4 0401 	sub.w	r4, r4, #1
1a00282c:	f1d5 0e20 	rsbs	lr, r5, #32
1a002830:	db0d      	blt.n	1a00284e <__adddf3+0xb2>
1a002832:	fa02 fc0e 	lsl.w	ip, r2, lr
1a002836:	fa22 f205 	lsr.w	r2, r2, r5
1a00283a:	1880      	adds	r0, r0, r2
1a00283c:	f141 0100 	adc.w	r1, r1, #0
1a002840:	fa03 f20e 	lsl.w	r2, r3, lr
1a002844:	1880      	adds	r0, r0, r2
1a002846:	fa43 f305 	asr.w	r3, r3, r5
1a00284a:	4159      	adcs	r1, r3
1a00284c:	e00e      	b.n	1a00286c <__adddf3+0xd0>
1a00284e:	f1a5 0520 	sub.w	r5, r5, #32
1a002852:	f10e 0e20 	add.w	lr, lr, #32
1a002856:	2a01      	cmp	r2, #1
1a002858:	fa03 fc0e 	lsl.w	ip, r3, lr
1a00285c:	bf28      	it	cs
1a00285e:	f04c 0c02 	orrcs.w	ip, ip, #2
1a002862:	fa43 f305 	asr.w	r3, r3, r5
1a002866:	18c0      	adds	r0, r0, r3
1a002868:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a00286c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002870:	d507      	bpl.n	1a002882 <__adddf3+0xe6>
1a002872:	f04f 0e00 	mov.w	lr, #0
1a002876:	f1dc 0c00 	rsbs	ip, ip, #0
1a00287a:	eb7e 0000 	sbcs.w	r0, lr, r0
1a00287e:	eb6e 0101 	sbc.w	r1, lr, r1
1a002882:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a002886:	d31b      	bcc.n	1a0028c0 <__adddf3+0x124>
1a002888:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a00288c:	d30c      	bcc.n	1a0028a8 <__adddf3+0x10c>
1a00288e:	0849      	lsrs	r1, r1, #1
1a002890:	ea5f 0030 	movs.w	r0, r0, rrx
1a002894:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a002898:	f104 0401 	add.w	r4, r4, #1
1a00289c:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a0028a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a0028a4:	f080 809a 	bcs.w	1a0029dc <__adddf3+0x240>
1a0028a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a0028ac:	bf08      	it	eq
1a0028ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0028b2:	f150 0000 	adcs.w	r0, r0, #0
1a0028b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0028ba:	ea41 0105 	orr.w	r1, r1, r5
1a0028be:	bd30      	pop	{r4, r5, pc}
1a0028c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a0028c4:	4140      	adcs	r0, r0
1a0028c6:	eb41 0101 	adc.w	r1, r1, r1
1a0028ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0028ce:	f1a4 0401 	sub.w	r4, r4, #1
1a0028d2:	d1e9      	bne.n	1a0028a8 <__adddf3+0x10c>
1a0028d4:	f091 0f00 	teq	r1, #0
1a0028d8:	bf04      	itt	eq
1a0028da:	4601      	moveq	r1, r0
1a0028dc:	2000      	moveq	r0, #0
1a0028de:	fab1 f381 	clz	r3, r1
1a0028e2:	bf08      	it	eq
1a0028e4:	3320      	addeq	r3, #32
1a0028e6:	f1a3 030b 	sub.w	r3, r3, #11
1a0028ea:	f1b3 0220 	subs.w	r2, r3, #32
1a0028ee:	da0c      	bge.n	1a00290a <__adddf3+0x16e>
1a0028f0:	320c      	adds	r2, #12
1a0028f2:	dd08      	ble.n	1a002906 <__adddf3+0x16a>
1a0028f4:	f102 0c14 	add.w	ip, r2, #20
1a0028f8:	f1c2 020c 	rsb	r2, r2, #12
1a0028fc:	fa01 f00c 	lsl.w	r0, r1, ip
1a002900:	fa21 f102 	lsr.w	r1, r1, r2
1a002904:	e00c      	b.n	1a002920 <__adddf3+0x184>
1a002906:	f102 0214 	add.w	r2, r2, #20
1a00290a:	bfd8      	it	le
1a00290c:	f1c2 0c20 	rsble	ip, r2, #32
1a002910:	fa01 f102 	lsl.w	r1, r1, r2
1a002914:	fa20 fc0c 	lsr.w	ip, r0, ip
1a002918:	bfdc      	itt	le
1a00291a:	ea41 010c 	orrle.w	r1, r1, ip
1a00291e:	4090      	lslle	r0, r2
1a002920:	1ae4      	subs	r4, r4, r3
1a002922:	bfa2      	ittt	ge
1a002924:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a002928:	4329      	orrge	r1, r5
1a00292a:	bd30      	popge	{r4, r5, pc}
1a00292c:	ea6f 0404 	mvn.w	r4, r4
1a002930:	3c1f      	subs	r4, #31
1a002932:	da1c      	bge.n	1a00296e <__adddf3+0x1d2>
1a002934:	340c      	adds	r4, #12
1a002936:	dc0e      	bgt.n	1a002956 <__adddf3+0x1ba>
1a002938:	f104 0414 	add.w	r4, r4, #20
1a00293c:	f1c4 0220 	rsb	r2, r4, #32
1a002940:	fa20 f004 	lsr.w	r0, r0, r4
1a002944:	fa01 f302 	lsl.w	r3, r1, r2
1a002948:	ea40 0003 	orr.w	r0, r0, r3
1a00294c:	fa21 f304 	lsr.w	r3, r1, r4
1a002950:	ea45 0103 	orr.w	r1, r5, r3
1a002954:	bd30      	pop	{r4, r5, pc}
1a002956:	f1c4 040c 	rsb	r4, r4, #12
1a00295a:	f1c4 0220 	rsb	r2, r4, #32
1a00295e:	fa20 f002 	lsr.w	r0, r0, r2
1a002962:	fa01 f304 	lsl.w	r3, r1, r4
1a002966:	ea40 0003 	orr.w	r0, r0, r3
1a00296a:	4629      	mov	r1, r5
1a00296c:	bd30      	pop	{r4, r5, pc}
1a00296e:	fa21 f004 	lsr.w	r0, r1, r4
1a002972:	4629      	mov	r1, r5
1a002974:	bd30      	pop	{r4, r5, pc}
1a002976:	f094 0f00 	teq	r4, #0
1a00297a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a00297e:	bf06      	itte	eq
1a002980:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a002984:	3401      	addeq	r4, #1
1a002986:	3d01      	subne	r5, #1
1a002988:	e74e      	b.n	1a002828 <__adddf3+0x8c>
1a00298a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00298e:	bf18      	it	ne
1a002990:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002994:	d029      	beq.n	1a0029ea <__adddf3+0x24e>
1a002996:	ea94 0f05 	teq	r4, r5
1a00299a:	bf08      	it	eq
1a00299c:	ea90 0f02 	teqeq	r0, r2
1a0029a0:	d005      	beq.n	1a0029ae <__adddf3+0x212>
1a0029a2:	ea54 0c00 	orrs.w	ip, r4, r0
1a0029a6:	bf04      	itt	eq
1a0029a8:	4619      	moveq	r1, r3
1a0029aa:	4610      	moveq	r0, r2
1a0029ac:	bd30      	pop	{r4, r5, pc}
1a0029ae:	ea91 0f03 	teq	r1, r3
1a0029b2:	bf1e      	ittt	ne
1a0029b4:	2100      	movne	r1, #0
1a0029b6:	2000      	movne	r0, #0
1a0029b8:	bd30      	popne	{r4, r5, pc}
1a0029ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a0029be:	d105      	bne.n	1a0029cc <__adddf3+0x230>
1a0029c0:	0040      	lsls	r0, r0, #1
1a0029c2:	4149      	adcs	r1, r1
1a0029c4:	bf28      	it	cs
1a0029c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a0029ca:	bd30      	pop	{r4, r5, pc}
1a0029cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a0029d0:	bf3c      	itt	cc
1a0029d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a0029d6:	bd30      	popcc	{r4, r5, pc}
1a0029d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0029dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0029e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0029e4:	f04f 0000 	mov.w	r0, #0
1a0029e8:	bd30      	pop	{r4, r5, pc}
1a0029ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0029ee:	bf1a      	itte	ne
1a0029f0:	4619      	movne	r1, r3
1a0029f2:	4610      	movne	r0, r2
1a0029f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a0029f8:	bf1c      	itt	ne
1a0029fa:	460b      	movne	r3, r1
1a0029fc:	4602      	movne	r2, r0
1a0029fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002a02:	bf06      	itte	eq
1a002a04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a002a08:	ea91 0f03 	teqeq	r1, r3
1a002a0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a002a10:	bd30      	pop	{r4, r5, pc}
1a002a12:	bf00      	nop

1a002a14 <__aeabi_ui2d>:
1a002a14:	f090 0f00 	teq	r0, #0
1a002a18:	bf04      	itt	eq
1a002a1a:	2100      	moveq	r1, #0
1a002a1c:	4770      	bxeq	lr
1a002a1e:	b530      	push	{r4, r5, lr}
1a002a20:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002a24:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002a28:	f04f 0500 	mov.w	r5, #0
1a002a2c:	f04f 0100 	mov.w	r1, #0
1a002a30:	e750      	b.n	1a0028d4 <__adddf3+0x138>
1a002a32:	bf00      	nop

1a002a34 <__aeabi_i2d>:
1a002a34:	f090 0f00 	teq	r0, #0
1a002a38:	bf04      	itt	eq
1a002a3a:	2100      	moveq	r1, #0
1a002a3c:	4770      	bxeq	lr
1a002a3e:	b530      	push	{r4, r5, lr}
1a002a40:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002a44:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002a48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002a4c:	bf48      	it	mi
1a002a4e:	4240      	negmi	r0, r0
1a002a50:	f04f 0100 	mov.w	r1, #0
1a002a54:	e73e      	b.n	1a0028d4 <__adddf3+0x138>
1a002a56:	bf00      	nop

1a002a58 <__aeabi_f2d>:
1a002a58:	0042      	lsls	r2, r0, #1
1a002a5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a002a5e:	ea4f 0131 	mov.w	r1, r1, rrx
1a002a62:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a002a66:	bf1f      	itttt	ne
1a002a68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002a6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002a70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a002a74:	4770      	bxne	lr
1a002a76:	f092 0f00 	teq	r2, #0
1a002a7a:	bf14      	ite	ne
1a002a7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002a80:	4770      	bxeq	lr
1a002a82:	b530      	push	{r4, r5, lr}
1a002a84:	f44f 7460 	mov.w	r4, #896	; 0x380
1a002a88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002a8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002a90:	e720      	b.n	1a0028d4 <__adddf3+0x138>
1a002a92:	bf00      	nop

1a002a94 <__aeabi_ul2d>:
1a002a94:	ea50 0201 	orrs.w	r2, r0, r1
1a002a98:	bf08      	it	eq
1a002a9a:	4770      	bxeq	lr
1a002a9c:	b530      	push	{r4, r5, lr}
1a002a9e:	f04f 0500 	mov.w	r5, #0
1a002aa2:	e00a      	b.n	1a002aba <__aeabi_l2d+0x16>

1a002aa4 <__aeabi_l2d>:
1a002aa4:	ea50 0201 	orrs.w	r2, r0, r1
1a002aa8:	bf08      	it	eq
1a002aaa:	4770      	bxeq	lr
1a002aac:	b530      	push	{r4, r5, lr}
1a002aae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002ab2:	d502      	bpl.n	1a002aba <__aeabi_l2d+0x16>
1a002ab4:	4240      	negs	r0, r0
1a002ab6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002aba:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002abe:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002ac2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a002ac6:	f43f aedc 	beq.w	1a002882 <__adddf3+0xe6>
1a002aca:	f04f 0203 	mov.w	r2, #3
1a002ace:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002ad2:	bf18      	it	ne
1a002ad4:	3203      	addne	r2, #3
1a002ad6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002ada:	bf18      	it	ne
1a002adc:	3203      	addne	r2, #3
1a002ade:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a002ae2:	f1c2 0320 	rsb	r3, r2, #32
1a002ae6:	fa00 fc03 	lsl.w	ip, r0, r3
1a002aea:	fa20 f002 	lsr.w	r0, r0, r2
1a002aee:	fa01 fe03 	lsl.w	lr, r1, r3
1a002af2:	ea40 000e 	orr.w	r0, r0, lr
1a002af6:	fa21 f102 	lsr.w	r1, r1, r2
1a002afa:	4414      	add	r4, r2
1a002afc:	e6c1      	b.n	1a002882 <__adddf3+0xe6>
1a002afe:	bf00      	nop

1a002b00 <__aeabi_dmul>:
1a002b00:	b570      	push	{r4, r5, r6, lr}
1a002b02:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002b06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002b0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002b0e:	bf1d      	ittte	ne
1a002b10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002b14:	ea94 0f0c 	teqne	r4, ip
1a002b18:	ea95 0f0c 	teqne	r5, ip
1a002b1c:	f000 f8de 	bleq	1a002cdc <__aeabi_dmul+0x1dc>
1a002b20:	442c      	add	r4, r5
1a002b22:	ea81 0603 	eor.w	r6, r1, r3
1a002b26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a002b2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a002b2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002b32:	bf18      	it	ne
1a002b34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002b38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002b3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002b40:	d038      	beq.n	1a002bb4 <__aeabi_dmul+0xb4>
1a002b42:	fba0 ce02 	umull	ip, lr, r0, r2
1a002b46:	f04f 0500 	mov.w	r5, #0
1a002b4a:	fbe1 e502 	umlal	lr, r5, r1, r2
1a002b4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002b52:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002b56:	f04f 0600 	mov.w	r6, #0
1a002b5a:	fbe1 5603 	umlal	r5, r6, r1, r3
1a002b5e:	f09c 0f00 	teq	ip, #0
1a002b62:	bf18      	it	ne
1a002b64:	f04e 0e01 	orrne.w	lr, lr, #1
1a002b68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a002b6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002b70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002b74:	d204      	bcs.n	1a002b80 <__aeabi_dmul+0x80>
1a002b76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a002b7a:	416d      	adcs	r5, r5
1a002b7c:	eb46 0606 	adc.w	r6, r6, r6
1a002b80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002b84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a002b88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a002b8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002b90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a002b94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002b98:	bf88      	it	hi
1a002b9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002b9e:	d81e      	bhi.n	1a002bde <__aeabi_dmul+0xde>
1a002ba0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002ba4:	bf08      	it	eq
1a002ba6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a002baa:	f150 0000 	adcs.w	r0, r0, #0
1a002bae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002bb2:	bd70      	pop	{r4, r5, r6, pc}
1a002bb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a002bb8:	ea46 0101 	orr.w	r1, r6, r1
1a002bbc:	ea40 0002 	orr.w	r0, r0, r2
1a002bc0:	ea81 0103 	eor.w	r1, r1, r3
1a002bc4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a002bc8:	bfc2      	ittt	gt
1a002bca:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002bce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002bd2:	bd70      	popgt	{r4, r5, r6, pc}
1a002bd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002bd8:	f04f 0e00 	mov.w	lr, #0
1a002bdc:	3c01      	subs	r4, #1
1a002bde:	f300 80ab 	bgt.w	1a002d38 <__aeabi_dmul+0x238>
1a002be2:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a002be6:	bfde      	ittt	le
1a002be8:	2000      	movle	r0, #0
1a002bea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a002bee:	bd70      	pople	{r4, r5, r6, pc}
1a002bf0:	f1c4 0400 	rsb	r4, r4, #0
1a002bf4:	3c20      	subs	r4, #32
1a002bf6:	da35      	bge.n	1a002c64 <__aeabi_dmul+0x164>
1a002bf8:	340c      	adds	r4, #12
1a002bfa:	dc1b      	bgt.n	1a002c34 <__aeabi_dmul+0x134>
1a002bfc:	f104 0414 	add.w	r4, r4, #20
1a002c00:	f1c4 0520 	rsb	r5, r4, #32
1a002c04:	fa00 f305 	lsl.w	r3, r0, r5
1a002c08:	fa20 f004 	lsr.w	r0, r0, r4
1a002c0c:	fa01 f205 	lsl.w	r2, r1, r5
1a002c10:	ea40 0002 	orr.w	r0, r0, r2
1a002c14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002c18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002c1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002c20:	fa21 f604 	lsr.w	r6, r1, r4
1a002c24:	eb42 0106 	adc.w	r1, r2, r6
1a002c28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002c2c:	bf08      	it	eq
1a002c2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002c32:	bd70      	pop	{r4, r5, r6, pc}
1a002c34:	f1c4 040c 	rsb	r4, r4, #12
1a002c38:	f1c4 0520 	rsb	r5, r4, #32
1a002c3c:	fa00 f304 	lsl.w	r3, r0, r4
1a002c40:	fa20 f005 	lsr.w	r0, r0, r5
1a002c44:	fa01 f204 	lsl.w	r2, r1, r4
1a002c48:	ea40 0002 	orr.w	r0, r0, r2
1a002c4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002c50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002c54:	f141 0100 	adc.w	r1, r1, #0
1a002c58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002c5c:	bf08      	it	eq
1a002c5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002c62:	bd70      	pop	{r4, r5, r6, pc}
1a002c64:	f1c4 0520 	rsb	r5, r4, #32
1a002c68:	fa00 f205 	lsl.w	r2, r0, r5
1a002c6c:	ea4e 0e02 	orr.w	lr, lr, r2
1a002c70:	fa20 f304 	lsr.w	r3, r0, r4
1a002c74:	fa01 f205 	lsl.w	r2, r1, r5
1a002c78:	ea43 0302 	orr.w	r3, r3, r2
1a002c7c:	fa21 f004 	lsr.w	r0, r1, r4
1a002c80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002c84:	fa21 f204 	lsr.w	r2, r1, r4
1a002c88:	ea20 0002 	bic.w	r0, r0, r2
1a002c8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002c90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002c94:	bf08      	it	eq
1a002c96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002c9a:	bd70      	pop	{r4, r5, r6, pc}
1a002c9c:	f094 0f00 	teq	r4, #0
1a002ca0:	d10f      	bne.n	1a002cc2 <__aeabi_dmul+0x1c2>
1a002ca2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a002ca6:	0040      	lsls	r0, r0, #1
1a002ca8:	eb41 0101 	adc.w	r1, r1, r1
1a002cac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002cb0:	bf08      	it	eq
1a002cb2:	3c01      	subeq	r4, #1
1a002cb4:	d0f7      	beq.n	1a002ca6 <__aeabi_dmul+0x1a6>
1a002cb6:	ea41 0106 	orr.w	r1, r1, r6
1a002cba:	f095 0f00 	teq	r5, #0
1a002cbe:	bf18      	it	ne
1a002cc0:	4770      	bxne	lr
1a002cc2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a002cc6:	0052      	lsls	r2, r2, #1
1a002cc8:	eb43 0303 	adc.w	r3, r3, r3
1a002ccc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a002cd0:	bf08      	it	eq
1a002cd2:	3d01      	subeq	r5, #1
1a002cd4:	d0f7      	beq.n	1a002cc6 <__aeabi_dmul+0x1c6>
1a002cd6:	ea43 0306 	orr.w	r3, r3, r6
1a002cda:	4770      	bx	lr
1a002cdc:	ea94 0f0c 	teq	r4, ip
1a002ce0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002ce4:	bf18      	it	ne
1a002ce6:	ea95 0f0c 	teqne	r5, ip
1a002cea:	d00c      	beq.n	1a002d06 <__aeabi_dmul+0x206>
1a002cec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002cf0:	bf18      	it	ne
1a002cf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002cf6:	d1d1      	bne.n	1a002c9c <__aeabi_dmul+0x19c>
1a002cf8:	ea81 0103 	eor.w	r1, r1, r3
1a002cfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002d00:	f04f 0000 	mov.w	r0, #0
1a002d04:	bd70      	pop	{r4, r5, r6, pc}
1a002d06:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002d0a:	bf06      	itte	eq
1a002d0c:	4610      	moveq	r0, r2
1a002d0e:	4619      	moveq	r1, r3
1a002d10:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002d14:	d019      	beq.n	1a002d4a <__aeabi_dmul+0x24a>
1a002d16:	ea94 0f0c 	teq	r4, ip
1a002d1a:	d102      	bne.n	1a002d22 <__aeabi_dmul+0x222>
1a002d1c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002d20:	d113      	bne.n	1a002d4a <__aeabi_dmul+0x24a>
1a002d22:	ea95 0f0c 	teq	r5, ip
1a002d26:	d105      	bne.n	1a002d34 <__aeabi_dmul+0x234>
1a002d28:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a002d2c:	bf1c      	itt	ne
1a002d2e:	4610      	movne	r0, r2
1a002d30:	4619      	movne	r1, r3
1a002d32:	d10a      	bne.n	1a002d4a <__aeabi_dmul+0x24a>
1a002d34:	ea81 0103 	eor.w	r1, r1, r3
1a002d38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002d3c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002d40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002d44:	f04f 0000 	mov.w	r0, #0
1a002d48:	bd70      	pop	{r4, r5, r6, pc}
1a002d4a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002d4e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002d52:	bd70      	pop	{r4, r5, r6, pc}

1a002d54 <__aeabi_ddiv>:
1a002d54:	b570      	push	{r4, r5, r6, lr}
1a002d56:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002d5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002d5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002d62:	bf1d      	ittte	ne
1a002d64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002d68:	ea94 0f0c 	teqne	r4, ip
1a002d6c:	ea95 0f0c 	teqne	r5, ip
1a002d70:	f000 f8a7 	bleq	1a002ec2 <__aeabi_ddiv+0x16e>
1a002d74:	eba4 0405 	sub.w	r4, r4, r5
1a002d78:	ea81 0e03 	eor.w	lr, r1, r3
1a002d7c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002d80:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002d84:	f000 8088 	beq.w	1a002e98 <__aeabi_ddiv+0x144>
1a002d88:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002d8c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002d90:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a002d94:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a002d98:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a002d9c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002da0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a002da4:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a002da8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a002dac:	429d      	cmp	r5, r3
1a002dae:	bf08      	it	eq
1a002db0:	4296      	cmpeq	r6, r2
1a002db2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a002db6:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a002dba:	d202      	bcs.n	1a002dc2 <__aeabi_ddiv+0x6e>
1a002dbc:	085b      	lsrs	r3, r3, #1
1a002dbe:	ea4f 0232 	mov.w	r2, r2, rrx
1a002dc2:	1ab6      	subs	r6, r6, r2
1a002dc4:	eb65 0503 	sbc.w	r5, r5, r3
1a002dc8:	085b      	lsrs	r3, r3, #1
1a002dca:	ea4f 0232 	mov.w	r2, r2, rrx
1a002dce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a002dd2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a002dd6:	ebb6 0e02 	subs.w	lr, r6, r2
1a002dda:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002dde:	bf22      	ittt	cs
1a002de0:	1ab6      	subcs	r6, r6, r2
1a002de2:	4675      	movcs	r5, lr
1a002de4:	ea40 000c 	orrcs.w	r0, r0, ip
1a002de8:	085b      	lsrs	r3, r3, #1
1a002dea:	ea4f 0232 	mov.w	r2, r2, rrx
1a002dee:	ebb6 0e02 	subs.w	lr, r6, r2
1a002df2:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002df6:	bf22      	ittt	cs
1a002df8:	1ab6      	subcs	r6, r6, r2
1a002dfa:	4675      	movcs	r5, lr
1a002dfc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002e00:	085b      	lsrs	r3, r3, #1
1a002e02:	ea4f 0232 	mov.w	r2, r2, rrx
1a002e06:	ebb6 0e02 	subs.w	lr, r6, r2
1a002e0a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002e0e:	bf22      	ittt	cs
1a002e10:	1ab6      	subcs	r6, r6, r2
1a002e12:	4675      	movcs	r5, lr
1a002e14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a002e18:	085b      	lsrs	r3, r3, #1
1a002e1a:	ea4f 0232 	mov.w	r2, r2, rrx
1a002e1e:	ebb6 0e02 	subs.w	lr, r6, r2
1a002e22:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002e26:	bf22      	ittt	cs
1a002e28:	1ab6      	subcs	r6, r6, r2
1a002e2a:	4675      	movcs	r5, lr
1a002e2c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002e30:	ea55 0e06 	orrs.w	lr, r5, r6
1a002e34:	d018      	beq.n	1a002e68 <__aeabi_ddiv+0x114>
1a002e36:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a002e3a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a002e3e:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002e42:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002e46:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a002e4a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a002e4e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002e52:	d1c0      	bne.n	1a002dd6 <__aeabi_ddiv+0x82>
1a002e54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002e58:	d10b      	bne.n	1a002e72 <__aeabi_ddiv+0x11e>
1a002e5a:	ea41 0100 	orr.w	r1, r1, r0
1a002e5e:	f04f 0000 	mov.w	r0, #0
1a002e62:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002e66:	e7b6      	b.n	1a002dd6 <__aeabi_ddiv+0x82>
1a002e68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002e6c:	bf04      	itt	eq
1a002e6e:	4301      	orreq	r1, r0
1a002e70:	2000      	moveq	r0, #0
1a002e72:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002e76:	bf88      	it	hi
1a002e78:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002e7c:	f63f aeaf 	bhi.w	1a002bde <__aeabi_dmul+0xde>
1a002e80:	ebb5 0c03 	subs.w	ip, r5, r3
1a002e84:	bf04      	itt	eq
1a002e86:	ebb6 0c02 	subseq.w	ip, r6, r2
1a002e8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002e8e:	f150 0000 	adcs.w	r0, r0, #0
1a002e92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002e96:	bd70      	pop	{r4, r5, r6, pc}
1a002e98:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a002e9c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002ea0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a002ea4:	bfc2      	ittt	gt
1a002ea6:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002eaa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002eae:	bd70      	popgt	{r4, r5, r6, pc}
1a002eb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002eb4:	f04f 0e00 	mov.w	lr, #0
1a002eb8:	3c01      	subs	r4, #1
1a002eba:	e690      	b.n	1a002bde <__aeabi_dmul+0xde>
1a002ebc:	ea45 0e06 	orr.w	lr, r5, r6
1a002ec0:	e68d      	b.n	1a002bde <__aeabi_dmul+0xde>
1a002ec2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002ec6:	ea94 0f0c 	teq	r4, ip
1a002eca:	bf08      	it	eq
1a002ecc:	ea95 0f0c 	teqeq	r5, ip
1a002ed0:	f43f af3b 	beq.w	1a002d4a <__aeabi_dmul+0x24a>
1a002ed4:	ea94 0f0c 	teq	r4, ip
1a002ed8:	d10a      	bne.n	1a002ef0 <__aeabi_ddiv+0x19c>
1a002eda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002ede:	f47f af34 	bne.w	1a002d4a <__aeabi_dmul+0x24a>
1a002ee2:	ea95 0f0c 	teq	r5, ip
1a002ee6:	f47f af25 	bne.w	1a002d34 <__aeabi_dmul+0x234>
1a002eea:	4610      	mov	r0, r2
1a002eec:	4619      	mov	r1, r3
1a002eee:	e72c      	b.n	1a002d4a <__aeabi_dmul+0x24a>
1a002ef0:	ea95 0f0c 	teq	r5, ip
1a002ef4:	d106      	bne.n	1a002f04 <__aeabi_ddiv+0x1b0>
1a002ef6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002efa:	f43f aefd 	beq.w	1a002cf8 <__aeabi_dmul+0x1f8>
1a002efe:	4610      	mov	r0, r2
1a002f00:	4619      	mov	r1, r3
1a002f02:	e722      	b.n	1a002d4a <__aeabi_dmul+0x24a>
1a002f04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002f08:	bf18      	it	ne
1a002f0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002f0e:	f47f aec5 	bne.w	1a002c9c <__aeabi_dmul+0x19c>
1a002f12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a002f16:	f47f af0d 	bne.w	1a002d34 <__aeabi_dmul+0x234>
1a002f1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a002f1e:	f47f aeeb 	bne.w	1a002cf8 <__aeabi_dmul+0x1f8>
1a002f22:	e712      	b.n	1a002d4a <__aeabi_dmul+0x24a>

1a002f24 <__gedf2>:
1a002f24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a002f28:	e006      	b.n	1a002f38 <__cmpdf2+0x4>
1a002f2a:	bf00      	nop

1a002f2c <__ledf2>:
1a002f2c:	f04f 0c01 	mov.w	ip, #1
1a002f30:	e002      	b.n	1a002f38 <__cmpdf2+0x4>
1a002f32:	bf00      	nop

1a002f34 <__cmpdf2>:
1a002f34:	f04f 0c01 	mov.w	ip, #1
1a002f38:	f84d cd04 	str.w	ip, [sp, #-4]!
1a002f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002f48:	bf18      	it	ne
1a002f4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a002f4e:	d01b      	beq.n	1a002f88 <__cmpdf2+0x54>
1a002f50:	b001      	add	sp, #4
1a002f52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a002f56:	bf0c      	ite	eq
1a002f58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a002f5c:	ea91 0f03 	teqne	r1, r3
1a002f60:	bf02      	ittt	eq
1a002f62:	ea90 0f02 	teqeq	r0, r2
1a002f66:	2000      	moveq	r0, #0
1a002f68:	4770      	bxeq	lr
1a002f6a:	f110 0f00 	cmn.w	r0, #0
1a002f6e:	ea91 0f03 	teq	r1, r3
1a002f72:	bf58      	it	pl
1a002f74:	4299      	cmppl	r1, r3
1a002f76:	bf08      	it	eq
1a002f78:	4290      	cmpeq	r0, r2
1a002f7a:	bf2c      	ite	cs
1a002f7c:	17d8      	asrcs	r0, r3, #31
1a002f7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a002f82:	f040 0001 	orr.w	r0, r0, #1
1a002f86:	4770      	bx	lr
1a002f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002f90:	d102      	bne.n	1a002f98 <__cmpdf2+0x64>
1a002f92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a002f96:	d107      	bne.n	1a002fa8 <__cmpdf2+0x74>
1a002f98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002fa0:	d1d6      	bne.n	1a002f50 <__cmpdf2+0x1c>
1a002fa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a002fa6:	d0d3      	beq.n	1a002f50 <__cmpdf2+0x1c>
1a002fa8:	f85d 0b04 	ldr.w	r0, [sp], #4
1a002fac:	4770      	bx	lr
1a002fae:	bf00      	nop

1a002fb0 <__aeabi_cdrcmple>:
1a002fb0:	4684      	mov	ip, r0
1a002fb2:	4610      	mov	r0, r2
1a002fb4:	4662      	mov	r2, ip
1a002fb6:	468c      	mov	ip, r1
1a002fb8:	4619      	mov	r1, r3
1a002fba:	4663      	mov	r3, ip
1a002fbc:	e000      	b.n	1a002fc0 <__aeabi_cdcmpeq>
1a002fbe:	bf00      	nop

1a002fc0 <__aeabi_cdcmpeq>:
1a002fc0:	b501      	push	{r0, lr}
1a002fc2:	f7ff ffb7 	bl	1a002f34 <__cmpdf2>
1a002fc6:	2800      	cmp	r0, #0
1a002fc8:	bf48      	it	mi
1a002fca:	f110 0f00 	cmnmi.w	r0, #0
1a002fce:	bd01      	pop	{r0, pc}

1a002fd0 <__aeabi_dcmpeq>:
1a002fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002fd4:	f7ff fff4 	bl	1a002fc0 <__aeabi_cdcmpeq>
1a002fd8:	bf0c      	ite	eq
1a002fda:	2001      	moveq	r0, #1
1a002fdc:	2000      	movne	r0, #0
1a002fde:	f85d fb08 	ldr.w	pc, [sp], #8
1a002fe2:	bf00      	nop

1a002fe4 <__aeabi_dcmplt>:
1a002fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002fe8:	f7ff ffea 	bl	1a002fc0 <__aeabi_cdcmpeq>
1a002fec:	bf34      	ite	cc
1a002fee:	2001      	movcc	r0, #1
1a002ff0:	2000      	movcs	r0, #0
1a002ff2:	f85d fb08 	ldr.w	pc, [sp], #8
1a002ff6:	bf00      	nop

1a002ff8 <__aeabi_dcmple>:
1a002ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002ffc:	f7ff ffe0 	bl	1a002fc0 <__aeabi_cdcmpeq>
1a003000:	bf94      	ite	ls
1a003002:	2001      	movls	r0, #1
1a003004:	2000      	movhi	r0, #0
1a003006:	f85d fb08 	ldr.w	pc, [sp], #8
1a00300a:	bf00      	nop

1a00300c <__aeabi_dcmpge>:
1a00300c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003010:	f7ff ffce 	bl	1a002fb0 <__aeabi_cdrcmple>
1a003014:	bf94      	ite	ls
1a003016:	2001      	movls	r0, #1
1a003018:	2000      	movhi	r0, #0
1a00301a:	f85d fb08 	ldr.w	pc, [sp], #8
1a00301e:	bf00      	nop

1a003020 <__aeabi_dcmpgt>:
1a003020:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003024:	f7ff ffc4 	bl	1a002fb0 <__aeabi_cdrcmple>
1a003028:	bf34      	ite	cc
1a00302a:	2001      	movcc	r0, #1
1a00302c:	2000      	movcs	r0, #0
1a00302e:	f85d fb08 	ldr.w	pc, [sp], #8
1a003032:	bf00      	nop

1a003034 <__aeabi_d2iz>:
1a003034:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a003038:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a00303c:	d215      	bcs.n	1a00306a <__aeabi_d2iz+0x36>
1a00303e:	d511      	bpl.n	1a003064 <__aeabi_d2iz+0x30>
1a003040:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a003044:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a003048:	d912      	bls.n	1a003070 <__aeabi_d2iz+0x3c>
1a00304a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00304e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a003052:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a003056:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00305a:	fa23 f002 	lsr.w	r0, r3, r2
1a00305e:	bf18      	it	ne
1a003060:	4240      	negne	r0, r0
1a003062:	4770      	bx	lr
1a003064:	f04f 0000 	mov.w	r0, #0
1a003068:	4770      	bx	lr
1a00306a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a00306e:	d105      	bne.n	1a00307c <__aeabi_d2iz+0x48>
1a003070:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a003074:	bf08      	it	eq
1a003076:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a00307a:	4770      	bx	lr
1a00307c:	f04f 0000 	mov.w	r0, #0
1a003080:	4770      	bx	lr
1a003082:	bf00      	nop

1a003084 <__aeabi_d2uiz>:
1a003084:	004a      	lsls	r2, r1, #1
1a003086:	d211      	bcs.n	1a0030ac <__aeabi_d2uiz+0x28>
1a003088:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a00308c:	d211      	bcs.n	1a0030b2 <__aeabi_d2uiz+0x2e>
1a00308e:	d50d      	bpl.n	1a0030ac <__aeabi_d2uiz+0x28>
1a003090:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a003094:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a003098:	d40e      	bmi.n	1a0030b8 <__aeabi_d2uiz+0x34>
1a00309a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00309e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a0030a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a0030a6:	fa23 f002 	lsr.w	r0, r3, r2
1a0030aa:	4770      	bx	lr
1a0030ac:	f04f 0000 	mov.w	r0, #0
1a0030b0:	4770      	bx	lr
1a0030b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a0030b6:	d102      	bne.n	1a0030be <__aeabi_d2uiz+0x3a>
1a0030b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0030bc:	4770      	bx	lr
1a0030be:	f04f 0000 	mov.w	r0, #0
1a0030c2:	4770      	bx	lr

1a0030c4 <__aeabi_uldivmod>:
1a0030c4:	b953      	cbnz	r3, 1a0030dc <__aeabi_uldivmod+0x18>
1a0030c6:	b94a      	cbnz	r2, 1a0030dc <__aeabi_uldivmod+0x18>
1a0030c8:	2900      	cmp	r1, #0
1a0030ca:	bf08      	it	eq
1a0030cc:	2800      	cmpeq	r0, #0
1a0030ce:	bf1c      	itt	ne
1a0030d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0030d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0030d8:	f000 b97a 	b.w	1a0033d0 <__aeabi_idiv0>
1a0030dc:	f1ad 0c08 	sub.w	ip, sp, #8
1a0030e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0030e4:	f000 f806 	bl	1a0030f4 <__udivmoddi4>
1a0030e8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0030ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0030f0:	b004      	add	sp, #16
1a0030f2:	4770      	bx	lr

1a0030f4 <__udivmoddi4>:
1a0030f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0030f8:	468c      	mov	ip, r1
1a0030fa:	460d      	mov	r5, r1
1a0030fc:	4604      	mov	r4, r0
1a0030fe:	9e08      	ldr	r6, [sp, #32]
1a003100:	2b00      	cmp	r3, #0
1a003102:	d151      	bne.n	1a0031a8 <__udivmoddi4+0xb4>
1a003104:	428a      	cmp	r2, r1
1a003106:	4617      	mov	r7, r2
1a003108:	d96d      	bls.n	1a0031e6 <__udivmoddi4+0xf2>
1a00310a:	fab2 fe82 	clz	lr, r2
1a00310e:	f1be 0f00 	cmp.w	lr, #0
1a003112:	d00b      	beq.n	1a00312c <__udivmoddi4+0x38>
1a003114:	f1ce 0c20 	rsb	ip, lr, #32
1a003118:	fa01 f50e 	lsl.w	r5, r1, lr
1a00311c:	fa20 fc0c 	lsr.w	ip, r0, ip
1a003120:	fa02 f70e 	lsl.w	r7, r2, lr
1a003124:	ea4c 0c05 	orr.w	ip, ip, r5
1a003128:	fa00 f40e 	lsl.w	r4, r0, lr
1a00312c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a003130:	0c25      	lsrs	r5, r4, #16
1a003132:	fbbc f8fa 	udiv	r8, ip, sl
1a003136:	fa1f f987 	uxth.w	r9, r7
1a00313a:	fb0a cc18 	mls	ip, sl, r8, ip
1a00313e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a003142:	fb08 f309 	mul.w	r3, r8, r9
1a003146:	42ab      	cmp	r3, r5
1a003148:	d90a      	bls.n	1a003160 <__udivmoddi4+0x6c>
1a00314a:	19ed      	adds	r5, r5, r7
1a00314c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a003150:	f080 8123 	bcs.w	1a00339a <__udivmoddi4+0x2a6>
1a003154:	42ab      	cmp	r3, r5
1a003156:	f240 8120 	bls.w	1a00339a <__udivmoddi4+0x2a6>
1a00315a:	f1a8 0802 	sub.w	r8, r8, #2
1a00315e:	443d      	add	r5, r7
1a003160:	1aed      	subs	r5, r5, r3
1a003162:	b2a4      	uxth	r4, r4
1a003164:	fbb5 f0fa 	udiv	r0, r5, sl
1a003168:	fb0a 5510 	mls	r5, sl, r0, r5
1a00316c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a003170:	fb00 f909 	mul.w	r9, r0, r9
1a003174:	45a1      	cmp	r9, r4
1a003176:	d909      	bls.n	1a00318c <__udivmoddi4+0x98>
1a003178:	19e4      	adds	r4, r4, r7
1a00317a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00317e:	f080 810a 	bcs.w	1a003396 <__udivmoddi4+0x2a2>
1a003182:	45a1      	cmp	r9, r4
1a003184:	f240 8107 	bls.w	1a003396 <__udivmoddi4+0x2a2>
1a003188:	3802      	subs	r0, #2
1a00318a:	443c      	add	r4, r7
1a00318c:	eba4 0409 	sub.w	r4, r4, r9
1a003190:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a003194:	2100      	movs	r1, #0
1a003196:	2e00      	cmp	r6, #0
1a003198:	d061      	beq.n	1a00325e <__udivmoddi4+0x16a>
1a00319a:	fa24 f40e 	lsr.w	r4, r4, lr
1a00319e:	2300      	movs	r3, #0
1a0031a0:	6034      	str	r4, [r6, #0]
1a0031a2:	6073      	str	r3, [r6, #4]
1a0031a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0031a8:	428b      	cmp	r3, r1
1a0031aa:	d907      	bls.n	1a0031bc <__udivmoddi4+0xc8>
1a0031ac:	2e00      	cmp	r6, #0
1a0031ae:	d054      	beq.n	1a00325a <__udivmoddi4+0x166>
1a0031b0:	2100      	movs	r1, #0
1a0031b2:	e886 0021 	stmia.w	r6, {r0, r5}
1a0031b6:	4608      	mov	r0, r1
1a0031b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0031bc:	fab3 f183 	clz	r1, r3
1a0031c0:	2900      	cmp	r1, #0
1a0031c2:	f040 808e 	bne.w	1a0032e2 <__udivmoddi4+0x1ee>
1a0031c6:	42ab      	cmp	r3, r5
1a0031c8:	d302      	bcc.n	1a0031d0 <__udivmoddi4+0xdc>
1a0031ca:	4282      	cmp	r2, r0
1a0031cc:	f200 80fa 	bhi.w	1a0033c4 <__udivmoddi4+0x2d0>
1a0031d0:	1a84      	subs	r4, r0, r2
1a0031d2:	eb65 0503 	sbc.w	r5, r5, r3
1a0031d6:	2001      	movs	r0, #1
1a0031d8:	46ac      	mov	ip, r5
1a0031da:	2e00      	cmp	r6, #0
1a0031dc:	d03f      	beq.n	1a00325e <__udivmoddi4+0x16a>
1a0031de:	e886 1010 	stmia.w	r6, {r4, ip}
1a0031e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0031e6:	b912      	cbnz	r2, 1a0031ee <__udivmoddi4+0xfa>
1a0031e8:	2701      	movs	r7, #1
1a0031ea:	fbb7 f7f2 	udiv	r7, r7, r2
1a0031ee:	fab7 fe87 	clz	lr, r7
1a0031f2:	f1be 0f00 	cmp.w	lr, #0
1a0031f6:	d134      	bne.n	1a003262 <__udivmoddi4+0x16e>
1a0031f8:	1beb      	subs	r3, r5, r7
1a0031fa:	0c3a      	lsrs	r2, r7, #16
1a0031fc:	fa1f fc87 	uxth.w	ip, r7
1a003200:	2101      	movs	r1, #1
1a003202:	fbb3 f8f2 	udiv	r8, r3, r2
1a003206:	0c25      	lsrs	r5, r4, #16
1a003208:	fb02 3318 	mls	r3, r2, r8, r3
1a00320c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a003210:	fb0c f308 	mul.w	r3, ip, r8
1a003214:	42ab      	cmp	r3, r5
1a003216:	d907      	bls.n	1a003228 <__udivmoddi4+0x134>
1a003218:	19ed      	adds	r5, r5, r7
1a00321a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a00321e:	d202      	bcs.n	1a003226 <__udivmoddi4+0x132>
1a003220:	42ab      	cmp	r3, r5
1a003222:	f200 80d1 	bhi.w	1a0033c8 <__udivmoddi4+0x2d4>
1a003226:	4680      	mov	r8, r0
1a003228:	1aed      	subs	r5, r5, r3
1a00322a:	b2a3      	uxth	r3, r4
1a00322c:	fbb5 f0f2 	udiv	r0, r5, r2
1a003230:	fb02 5510 	mls	r5, r2, r0, r5
1a003234:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a003238:	fb0c fc00 	mul.w	ip, ip, r0
1a00323c:	45a4      	cmp	ip, r4
1a00323e:	d907      	bls.n	1a003250 <__udivmoddi4+0x15c>
1a003240:	19e4      	adds	r4, r4, r7
1a003242:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003246:	d202      	bcs.n	1a00324e <__udivmoddi4+0x15a>
1a003248:	45a4      	cmp	ip, r4
1a00324a:	f200 80b8 	bhi.w	1a0033be <__udivmoddi4+0x2ca>
1a00324e:	4618      	mov	r0, r3
1a003250:	eba4 040c 	sub.w	r4, r4, ip
1a003254:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a003258:	e79d      	b.n	1a003196 <__udivmoddi4+0xa2>
1a00325a:	4631      	mov	r1, r6
1a00325c:	4630      	mov	r0, r6
1a00325e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003262:	f1ce 0420 	rsb	r4, lr, #32
1a003266:	fa05 f30e 	lsl.w	r3, r5, lr
1a00326a:	fa07 f70e 	lsl.w	r7, r7, lr
1a00326e:	fa20 f804 	lsr.w	r8, r0, r4
1a003272:	0c3a      	lsrs	r2, r7, #16
1a003274:	fa25 f404 	lsr.w	r4, r5, r4
1a003278:	ea48 0803 	orr.w	r8, r8, r3
1a00327c:	fbb4 f1f2 	udiv	r1, r4, r2
1a003280:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a003284:	fb02 4411 	mls	r4, r2, r1, r4
1a003288:	fa1f fc87 	uxth.w	ip, r7
1a00328c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a003290:	fb01 f30c 	mul.w	r3, r1, ip
1a003294:	42ab      	cmp	r3, r5
1a003296:	fa00 f40e 	lsl.w	r4, r0, lr
1a00329a:	d909      	bls.n	1a0032b0 <__udivmoddi4+0x1bc>
1a00329c:	19ed      	adds	r5, r5, r7
1a00329e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
1a0032a2:	f080 808a 	bcs.w	1a0033ba <__udivmoddi4+0x2c6>
1a0032a6:	42ab      	cmp	r3, r5
1a0032a8:	f240 8087 	bls.w	1a0033ba <__udivmoddi4+0x2c6>
1a0032ac:	3902      	subs	r1, #2
1a0032ae:	443d      	add	r5, r7
1a0032b0:	1aeb      	subs	r3, r5, r3
1a0032b2:	fa1f f588 	uxth.w	r5, r8
1a0032b6:	fbb3 f0f2 	udiv	r0, r3, r2
1a0032ba:	fb02 3310 	mls	r3, r2, r0, r3
1a0032be:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a0032c2:	fb00 f30c 	mul.w	r3, r0, ip
1a0032c6:	42ab      	cmp	r3, r5
1a0032c8:	d907      	bls.n	1a0032da <__udivmoddi4+0x1e6>
1a0032ca:	19ed      	adds	r5, r5, r7
1a0032cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
1a0032d0:	d26f      	bcs.n	1a0033b2 <__udivmoddi4+0x2be>
1a0032d2:	42ab      	cmp	r3, r5
1a0032d4:	d96d      	bls.n	1a0033b2 <__udivmoddi4+0x2be>
1a0032d6:	3802      	subs	r0, #2
1a0032d8:	443d      	add	r5, r7
1a0032da:	1aeb      	subs	r3, r5, r3
1a0032dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a0032e0:	e78f      	b.n	1a003202 <__udivmoddi4+0x10e>
1a0032e2:	f1c1 0720 	rsb	r7, r1, #32
1a0032e6:	fa22 f807 	lsr.w	r8, r2, r7
1a0032ea:	408b      	lsls	r3, r1
1a0032ec:	fa05 f401 	lsl.w	r4, r5, r1
1a0032f0:	ea48 0303 	orr.w	r3, r8, r3
1a0032f4:	fa20 fe07 	lsr.w	lr, r0, r7
1a0032f8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a0032fc:	40fd      	lsrs	r5, r7
1a0032fe:	ea4e 0e04 	orr.w	lr, lr, r4
1a003302:	fbb5 f9fc 	udiv	r9, r5, ip
1a003306:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a00330a:	fb0c 5519 	mls	r5, ip, r9, r5
1a00330e:	fa1f f883 	uxth.w	r8, r3
1a003312:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a003316:	fb09 f408 	mul.w	r4, r9, r8
1a00331a:	42ac      	cmp	r4, r5
1a00331c:	fa02 f201 	lsl.w	r2, r2, r1
1a003320:	fa00 fa01 	lsl.w	sl, r0, r1
1a003324:	d908      	bls.n	1a003338 <__udivmoddi4+0x244>
1a003326:	18ed      	adds	r5, r5, r3
1a003328:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00332c:	d243      	bcs.n	1a0033b6 <__udivmoddi4+0x2c2>
1a00332e:	42ac      	cmp	r4, r5
1a003330:	d941      	bls.n	1a0033b6 <__udivmoddi4+0x2c2>
1a003332:	f1a9 0902 	sub.w	r9, r9, #2
1a003336:	441d      	add	r5, r3
1a003338:	1b2d      	subs	r5, r5, r4
1a00333a:	fa1f fe8e 	uxth.w	lr, lr
1a00333e:	fbb5 f0fc 	udiv	r0, r5, ip
1a003342:	fb0c 5510 	mls	r5, ip, r0, r5
1a003346:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a00334a:	fb00 f808 	mul.w	r8, r0, r8
1a00334e:	45a0      	cmp	r8, r4
1a003350:	d907      	bls.n	1a003362 <__udivmoddi4+0x26e>
1a003352:	18e4      	adds	r4, r4, r3
1a003354:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
1a003358:	d229      	bcs.n	1a0033ae <__udivmoddi4+0x2ba>
1a00335a:	45a0      	cmp	r8, r4
1a00335c:	d927      	bls.n	1a0033ae <__udivmoddi4+0x2ba>
1a00335e:	3802      	subs	r0, #2
1a003360:	441c      	add	r4, r3
1a003362:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003366:	eba4 0408 	sub.w	r4, r4, r8
1a00336a:	fba0 8902 	umull	r8, r9, r0, r2
1a00336e:	454c      	cmp	r4, r9
1a003370:	46c6      	mov	lr, r8
1a003372:	464d      	mov	r5, r9
1a003374:	d315      	bcc.n	1a0033a2 <__udivmoddi4+0x2ae>
1a003376:	d012      	beq.n	1a00339e <__udivmoddi4+0x2aa>
1a003378:	b156      	cbz	r6, 1a003390 <__udivmoddi4+0x29c>
1a00337a:	ebba 030e 	subs.w	r3, sl, lr
1a00337e:	eb64 0405 	sbc.w	r4, r4, r5
1a003382:	fa04 f707 	lsl.w	r7, r4, r7
1a003386:	40cb      	lsrs	r3, r1
1a003388:	431f      	orrs	r7, r3
1a00338a:	40cc      	lsrs	r4, r1
1a00338c:	6037      	str	r7, [r6, #0]
1a00338e:	6074      	str	r4, [r6, #4]
1a003390:	2100      	movs	r1, #0
1a003392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003396:	4618      	mov	r0, r3
1a003398:	e6f8      	b.n	1a00318c <__udivmoddi4+0x98>
1a00339a:	4690      	mov	r8, r2
1a00339c:	e6e0      	b.n	1a003160 <__udivmoddi4+0x6c>
1a00339e:	45c2      	cmp	sl, r8
1a0033a0:	d2ea      	bcs.n	1a003378 <__udivmoddi4+0x284>
1a0033a2:	ebb8 0e02 	subs.w	lr, r8, r2
1a0033a6:	eb69 0503 	sbc.w	r5, r9, r3
1a0033aa:	3801      	subs	r0, #1
1a0033ac:	e7e4      	b.n	1a003378 <__udivmoddi4+0x284>
1a0033ae:	4628      	mov	r0, r5
1a0033b0:	e7d7      	b.n	1a003362 <__udivmoddi4+0x26e>
1a0033b2:	4640      	mov	r0, r8
1a0033b4:	e791      	b.n	1a0032da <__udivmoddi4+0x1e6>
1a0033b6:	4681      	mov	r9, r0
1a0033b8:	e7be      	b.n	1a003338 <__udivmoddi4+0x244>
1a0033ba:	4601      	mov	r1, r0
1a0033bc:	e778      	b.n	1a0032b0 <__udivmoddi4+0x1bc>
1a0033be:	3802      	subs	r0, #2
1a0033c0:	443c      	add	r4, r7
1a0033c2:	e745      	b.n	1a003250 <__udivmoddi4+0x15c>
1a0033c4:	4608      	mov	r0, r1
1a0033c6:	e708      	b.n	1a0031da <__udivmoddi4+0xe6>
1a0033c8:	f1a8 0802 	sub.w	r8, r8, #2
1a0033cc:	443d      	add	r5, r7
1a0033ce:	e72b      	b.n	1a003228 <__udivmoddi4+0x134>

1a0033d0 <__aeabi_idiv0>:
1a0033d0:	4770      	bx	lr
1a0033d2:	bf00      	nop

1a0033d4 <__libc_init_array>:
1a0033d4:	b570      	push	{r4, r5, r6, lr}
1a0033d6:	4e0f      	ldr	r6, [pc, #60]	; (1a003414 <__libc_init_array+0x40>)
1a0033d8:	4d0f      	ldr	r5, [pc, #60]	; (1a003418 <__libc_init_array+0x44>)
1a0033da:	1b76      	subs	r6, r6, r5
1a0033dc:	10b6      	asrs	r6, r6, #2
1a0033de:	bf18      	it	ne
1a0033e0:	2400      	movne	r4, #0
1a0033e2:	d005      	beq.n	1a0033f0 <__libc_init_array+0x1c>
1a0033e4:	3401      	adds	r4, #1
1a0033e6:	f855 3b04 	ldr.w	r3, [r5], #4
1a0033ea:	4798      	blx	r3
1a0033ec:	42a6      	cmp	r6, r4
1a0033ee:	d1f9      	bne.n	1a0033e4 <__libc_init_array+0x10>
1a0033f0:	4e0a      	ldr	r6, [pc, #40]	; (1a00341c <__libc_init_array+0x48>)
1a0033f2:	4d0b      	ldr	r5, [pc, #44]	; (1a003420 <__libc_init_array+0x4c>)
1a0033f4:	1b76      	subs	r6, r6, r5
1a0033f6:	f7fd f8c6 	bl	1a000586 <_init>
1a0033fa:	10b6      	asrs	r6, r6, #2
1a0033fc:	bf18      	it	ne
1a0033fe:	2400      	movne	r4, #0
1a003400:	d006      	beq.n	1a003410 <__libc_init_array+0x3c>
1a003402:	3401      	adds	r4, #1
1a003404:	f855 3b04 	ldr.w	r3, [r5], #4
1a003408:	4798      	blx	r3
1a00340a:	42a6      	cmp	r6, r4
1a00340c:	d1f9      	bne.n	1a003402 <__libc_init_array+0x2e>
1a00340e:	bd70      	pop	{r4, r5, r6, pc}
1a003410:	bd70      	pop	{r4, r5, r6, pc}
1a003412:	bf00      	nop
1a003414:	1a003810 	.word	0x1a003810
1a003418:	1a003810 	.word	0x1a003810
1a00341c:	1a003814 	.word	0x1a003814
1a003420:	1a003810 	.word	0x1a003810

1a003424 <memset>:
1a003424:	b470      	push	{r4, r5, r6}
1a003426:	0786      	lsls	r6, r0, #30
1a003428:	d046      	beq.n	1a0034b8 <memset+0x94>
1a00342a:	1e54      	subs	r4, r2, #1
1a00342c:	2a00      	cmp	r2, #0
1a00342e:	d041      	beq.n	1a0034b4 <memset+0x90>
1a003430:	b2ca      	uxtb	r2, r1
1a003432:	4603      	mov	r3, r0
1a003434:	e002      	b.n	1a00343c <memset+0x18>
1a003436:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a00343a:	d33b      	bcc.n	1a0034b4 <memset+0x90>
1a00343c:	f803 2b01 	strb.w	r2, [r3], #1
1a003440:	079d      	lsls	r5, r3, #30
1a003442:	d1f8      	bne.n	1a003436 <memset+0x12>
1a003444:	2c03      	cmp	r4, #3
1a003446:	d92e      	bls.n	1a0034a6 <memset+0x82>
1a003448:	b2cd      	uxtb	r5, r1
1a00344a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a00344e:	2c0f      	cmp	r4, #15
1a003450:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003454:	d919      	bls.n	1a00348a <memset+0x66>
1a003456:	f103 0210 	add.w	r2, r3, #16
1a00345a:	4626      	mov	r6, r4
1a00345c:	3e10      	subs	r6, #16
1a00345e:	2e0f      	cmp	r6, #15
1a003460:	f842 5c10 	str.w	r5, [r2, #-16]
1a003464:	f842 5c0c 	str.w	r5, [r2, #-12]
1a003468:	f842 5c08 	str.w	r5, [r2, #-8]
1a00346c:	f842 5c04 	str.w	r5, [r2, #-4]
1a003470:	f102 0210 	add.w	r2, r2, #16
1a003474:	d8f2      	bhi.n	1a00345c <memset+0x38>
1a003476:	f1a4 0210 	sub.w	r2, r4, #16
1a00347a:	f022 020f 	bic.w	r2, r2, #15
1a00347e:	f004 040f 	and.w	r4, r4, #15
1a003482:	3210      	adds	r2, #16
1a003484:	2c03      	cmp	r4, #3
1a003486:	4413      	add	r3, r2
1a003488:	d90d      	bls.n	1a0034a6 <memset+0x82>
1a00348a:	461e      	mov	r6, r3
1a00348c:	4622      	mov	r2, r4
1a00348e:	3a04      	subs	r2, #4
1a003490:	2a03      	cmp	r2, #3
1a003492:	f846 5b04 	str.w	r5, [r6], #4
1a003496:	d8fa      	bhi.n	1a00348e <memset+0x6a>
1a003498:	1f22      	subs	r2, r4, #4
1a00349a:	f022 0203 	bic.w	r2, r2, #3
1a00349e:	3204      	adds	r2, #4
1a0034a0:	4413      	add	r3, r2
1a0034a2:	f004 0403 	and.w	r4, r4, #3
1a0034a6:	b12c      	cbz	r4, 1a0034b4 <memset+0x90>
1a0034a8:	b2c9      	uxtb	r1, r1
1a0034aa:	441c      	add	r4, r3
1a0034ac:	f803 1b01 	strb.w	r1, [r3], #1
1a0034b0:	429c      	cmp	r4, r3
1a0034b2:	d1fb      	bne.n	1a0034ac <memset+0x88>
1a0034b4:	bc70      	pop	{r4, r5, r6}
1a0034b6:	4770      	bx	lr
1a0034b8:	4614      	mov	r4, r2
1a0034ba:	4603      	mov	r3, r0
1a0034bc:	e7c2      	b.n	1a003444 <memset+0x20>
1a0034be:	bf00      	nop

1a0034c0 <ExtRateIn>:
1a0034c0:	0000 0000                                   ....

1a0034c4 <GpioButtons>:
1a0034c4:	0400 0800 0900 0901                         ........

1a0034cc <GpioLeds>:
1a0034cc:	0005 0105 0205 0e00 0b01 0c01               ............

1a0034d8 <GpioPorts>:
1a0034d8:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a0034e8:	0802 ffff                                   ....

1a0034ec <OscRateIn>:
1a0034ec:	1b00 00b7                                   ....

1a0034f0 <InitClkStates>:
1a0034f0:	0f01 0101                                   ....

1a0034f4 <pinmuxing>:
1a0034f4:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a003504:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a003514:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a003524:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a003534:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a003544:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a003554:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a003564:	0206 0057                                   ..W.

1a003568 <UART_BClock>:
1a003568:	01c2 01a2 0182 0162                         ......b.

1a003570 <UART_PClock>:
1a003570:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a003580:	00ff 0000                                   ....

1a003584 <periph_to_base>:
1a003584:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a003594:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a0035a4:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a0035b4:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a0035c4:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a0035d4:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a0035e4:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a0035f0 <InitClkStates>:
1a0035f0:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a003600:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a003610:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a003620:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a003630:	111a 0001 111b 0001                         ........

1a003638 <npio2_hw>:
1a003638:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
1a003648:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
1a003658:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
1a003668:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
1a003678:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
1a003688:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
1a003698:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
1a0036a8:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

1a0036b8 <two_over_pi>:
1a0036b8:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
1a0036c8:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
1a0036d8:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
1a0036e8:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
1a0036f8:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
1a003708:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
1a003718:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
1a003728:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
1a003738:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
1a003748:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
1a003758:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
1a003768:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
1a003778:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
1a003788:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
1a003798:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
1a0037a8:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
1a0037b8:	e27b 0060 8c6b 00c0                         {.`.k...

1a0037c0 <init_jk>:
1a0037c0:	0002 0000 0003 0000 0004 0000 0006 0000     ................

1a0037d0 <PIo2>:
1a0037d0:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
1a0037e0:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
1a0037f0:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
1a003800:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5
