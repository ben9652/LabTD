
projects/lab0/out/lab0.elf:     file format elf32-littlearm
projects/lab0/out/lab0.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00047d

Program Header:
0x70000001 off    0x00011904 vaddr 0x1a001904 paddr 0x1a001904 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010038 vaddr 0x10000038 paddr 0x10000038 align 2**16
         filesz 0x00000000 memsz 0x00000010 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000190c memsz 0x0000190c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00190c align 2**16
         filesz 0x00000038 memsz 0x00000038 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001900  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  10000000  1a00190c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020038  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
  6 .bss          00000010  10000038  10000038  00010038  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 11 .init_array   00000004  1a001900  1a001900  00011900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a001904  1a001904  00011904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020038  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020038  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020038  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 18 .noinit       00000000  10000048  10000048  00020038  2**2
                  CONTENTS
 19 .debug_info   00010f62  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00002d19  00000000  00000000  00030f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000743d  00000000  00000000  00033cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000878  00000000  00000000  0003b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000008c0  00000000  00000000  0003b968  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000916f  00000000  00000000  0003c228  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00007f3f  00000000  00000000  00045397  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0001e767  00000000  00000000  0004d2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000031  00000000  00000000  0006ba3d  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  0006ba6e  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000012e4  00000000  00000000  0006baa8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000038 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001900 l    d  .init_array	00000000 .init_array
1a001904 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000048 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 configuracion.c
00000000 l    df *ABS*	00000000 lab0.c
10000038 l     O .bss	00000004 contador.10490
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 switch.c
00000000 l    df *ABS*	00000000 board.c
1a00069c l     F .text	00000044 Board_LED_Init
1a0006e0 l     F .text	00000040 Board_TEC_Init
1a000720 l     F .text	00000040 Board_GPIO_Init
1a000760 l     F .text	00000030 Board_ADC_Init
1a000790 l     F .text	00000038 Board_SPI_Init
1a0007c8 l     F .text	00000024 Board_I2C_Init
1a00178c l     O .text	00000008 GpioButtons
1a001794 l     O .text	0000000c GpioLeds
1a0017a0 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0017b8 l     O .text	00000004 InitClkStates
1a0017bc l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0008f4 l     F .text	0000002c Chip_UART_GetIndex
1a001830 l     O .text	00000008 UART_BClock
1a001838 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000a5c l     F .text	00000014 Chip_ADC_GetClockIndex
1a000a70 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000b24 l     F .text	000000a0 pll_calc_divs
1a000bc4 l     F .text	0000010c pll_get_frac
1a000cd0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000f44 l     F .text	00000022 Chip_Clock_GetDivRate
1000003c l     O .bss	00000008 audio_usb_pll_freq
1a00184c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0018b8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00121c l     F .text	00000014 Chip_SSP_GetClockIndex
1a001230 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a001904 l       .init_array	00000000 __init_array_end
1a001900 l       .bss_RAM5	00000000 __preinit_array_end
1a001900 l       .init_array	00000000 __init_array_start
1a001900 l       .bss_RAM5	00000000 __preinit_array_start
1a000d68 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a00083c g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000b16 g     F .text	0000000c Chip_ADC_SetResolution
1a0003e0 g     F .text	00000054 SysTick_Handler
1a000478  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a00190c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff7412 g       *ABS*	00000000 __valid_user_code_checksum
1a00190c g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a000fe6 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0005f8 g     F .text	00000078 Led_Toggle
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00138c g     F .text	00000000 .hidden __aeabi_uldivmod
10000048 g       .noinit	00000000 _noinit
10000044 g     O .bss	00000004 SystemCoreClock
1a000920 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a001064 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00087c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0013bc g     F .text	000002dc .hidden __udivmoddi4
1a001788 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000580 g     F .text	00000078 Led_Off
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a00034c g     F .text	00000094 ConfigurarPuertosLaboratorio
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001904 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00169c g     F .text	00000050 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000810 g     F .text	0000002c Board_Init
1a000506  w    F .text	00000002 _init
1a000508 g     F .text	00000078 Led_On
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000048 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00047c g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001314 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000d1c g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0012f0 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000ed8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001248 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a000fc0 g     F .text	00000026 Chip_Clock_GetBaseClock
10000038 g       .bss	00000000 _bss
1a000ae4 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00125a g     F .text	0000003e Chip_SSP_SetBitRate
1a001218 g     F .text	00000002 Chip_GPIO_Init
1a0017b4 g     O .text	00000004 OscRateIn
10000048 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001698  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0001ba  w    F .text	00000002 USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000300 g     F .text	0000004c ConfigurarInterrupcion
1a000d84 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0016ec g     F .text	0000009a memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000434 g     F .text	00000044 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a000ff4 g     F .text	0000003c Chip_Clock_EnableOpts
1a000da0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000e58 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00134c g     F .text	00000040 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000504  w    F .text	00000002 _fini
1a000aa4 g     F .text	00000040 Chip_ADC_Init
1a000844 g     F .text	00000038 Board_SetupMuxing
1a000974 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000048 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001298 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0007ec g     F .text	00000024 Board_Debug_Init
10000038 g       .data	00000000 _edata
1a0012d0 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0010c4 g     F .text	00000154 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a0010b0 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001698  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001030 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000670 g     F .text	0000002c Read_Switches
1a000f68 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0008e8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 7d 04 00 1a 79 01 00 1a 7b 01 00 1a     ....}...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 12 74 ff 53     }............t.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	e1 03 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00190c 	.word	0x1a00190c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000038 	.word	0x00000038
1a000120:	1a00190c 	.word	0x1a00190c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00190c 	.word	0x1a00190c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00190c 	.word	0x1a00190c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00190c 	.word	0x1a00190c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000038 	.word	0x10000038
1a000154:	00000010 	.word	0x00000010
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ConfigurarInterrupcion>:
#include "configuracion.h"


void ConfigurarInterrupcion(void) {
1a000300:	b508      	push	{r3, lr}
   __asm__ volatile ("cpsid i");
1a000302:	b672      	cpsid	i

   /* Activate SysTick */
   SystemCoreClockUpdate();
1a000304:	f000 fed4 	bl	1a0010b0 <SystemCoreClockUpdate>
   SysTick_Config(SystemCoreClock/1000);
1a000308:	4b0c      	ldr	r3, [pc, #48]	; (1a00033c <ConfigurarInterrupcion+0x3c>)
1a00030a:	681b      	ldr	r3, [r3, #0]
1a00030c:	4a0c      	ldr	r2, [pc, #48]	; (1a000340 <ConfigurarInterrupcion+0x40>)
1a00030e:	fba2 2303 	umull	r2, r3, r2, r3
1a000312:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a000314:	3b01      	subs	r3, #1
1a000316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a00031a:	d209      	bcs.n	1a000330 <ConfigurarInterrupcion+0x30>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a00031c:	4a09      	ldr	r2, [pc, #36]	; (1a000344 <ConfigurarInterrupcion+0x44>)
1a00031e:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000320:	21e0      	movs	r1, #224	; 0xe0
1a000322:	4b09      	ldr	r3, [pc, #36]	; (1a000348 <ConfigurarInterrupcion+0x48>)
1a000324:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a000328:	2300      	movs	r3, #0
1a00032a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00032c:	2307      	movs	r3, #7
1a00032e:	6013      	str	r3, [r2, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000330:	22e0      	movs	r2, #224	; 0xe0
1a000332:	4b05      	ldr	r3, [pc, #20]	; (1a000348 <ConfigurarInterrupcion+0x48>)
1a000334:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

   /* Update priority set by SysTick_Config */
   NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);

   __asm__ volatile ("cpsie i");
1a000338:	b662      	cpsie	i
1a00033a:	bd08      	pop	{r3, pc}
1a00033c:	10000044 	.word	0x10000044
1a000340:	10624dd3 	.word	0x10624dd3
1a000344:	e000e010 	.word	0xe000e010
1a000348:	e000ed00 	.word	0xe000ed00

1a00034c <ConfigurarPuertosLaboratorio>:
}

void ConfigurarPuertosLaboratorio(void) {
1a00034c:	b410      	push	{r4}
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00034e:	4a22      	ldr	r2, [pc, #136]	; (1a0003d8 <ConfigurarPuertosLaboratorio+0x8c>)
1a000350:	23d4      	movs	r3, #212	; 0xd4
1a000352:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
1a000356:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
1a00035a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_ClearValue(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue)
{
	pGPIO->CLR[portNum] = bitValue;
1a00035e:	4b1f      	ldr	r3, [pc, #124]	; (1a0003dc <ConfigurarPuertosLaboratorio+0x90>)
1a000360:	2007      	movs	r0, #7
1a000362:	f242 2194 	movw	r1, #8852	; 0x2294
1a000366:	5058      	str	r0, [r3, r1]
		pGPIO->DIR[portNum] |= bitValue;
1a000368:	f242 0014 	movw	r0, #8212	; 0x2014
1a00036c:	5819      	ldr	r1, [r3, r0]
1a00036e:	f041 0107 	orr.w	r1, r1, #7
1a000372:	5019      	str	r1, [r3, r0]
1a000374:	21d0      	movs	r1, #208	; 0xd0
1a000376:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
1a00037a:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
1a00037e:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	pGPIO->CLR[portNum] = bitValue;
1a000382:	f503 510a 	add.w	r1, r3, #8832	; 0x2280
1a000386:	f44f 4080 	mov.w	r0, #16384	; 0x4000
1a00038a:	6008      	str	r0, [r1, #0]
1a00038c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
1a000390:	f242 2184 	movw	r1, #8836	; 0x2284
1a000394:	5058      	str	r0, [r3, r1]
		pGPIO->DIR[portNum] |= bitValue;
1a000396:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
1a00039a:	6801      	ldr	r1, [r0, #0]
1a00039c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
1a0003a0:	6001      	str	r1, [r0, #0]
1a0003a2:	f242 0104 	movw	r1, #8196	; 0x2004
1a0003a6:	585c      	ldr	r4, [r3, r1]
1a0003a8:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
1a0003ac:	505c      	str	r4, [r3, r1]
1a0003ae:	2440      	movs	r4, #64	; 0x40
1a0003b0:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
1a0003b4:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
1a0003b8:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
1a0003bc:	f8c2 4098 	str.w	r4, [r2, #152]	; 0x98
		pGPIO->DIR[portNum] &= ~bitValue;
1a0003c0:	6802      	ldr	r2, [r0, #0]
1a0003c2:	f422 7244 	bic.w	r2, r2, #784	; 0x310
1a0003c6:	6002      	str	r2, [r0, #0]
1a0003c8:	585a      	ldr	r2, [r3, r1]
1a0003ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
1a0003ce:	505a      	str	r2, [r3, r1]
   Chip_SCU_PinMux(1, 1, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_SCU_PinMux(1, 2, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_SCU_PinMux(1, 6, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_GPIO_SetDir(LPC_GPIO_PORT, 0, (1 << 4) | (1 << 8) | (1 << 9), false);
   Chip_GPIO_SetDir(LPC_GPIO_PORT, 1, (1 << 9), false);
}
1a0003d0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0003d4:	4770      	bx	lr
1a0003d6:	bf00      	nop
1a0003d8:	40086000 	.word	0x40086000
1a0003dc:	400f4000 	.word	0x400f4000

1a0003e0 <SysTick_Handler>:
#include "switch.h"

static uint8_t actualizar = 0;


void SysTick_Handler(void) {
1a0003e0:	b508      	push	{r3, lr}
   static int contador = 0;

   contador++;
1a0003e2:	4a12      	ldr	r2, [pc, #72]	; (1a00042c <SysTick_Handler+0x4c>)
1a0003e4:	6813      	ldr	r3, [r2, #0]
1a0003e6:	3301      	adds	r3, #1
1a0003e8:	6013      	str	r3, [r2, #0]
   if (contador%500 == 0) {
1a0003ea:	4911      	ldr	r1, [pc, #68]	; (1a000430 <SysTick_Handler+0x50>)
1a0003ec:	fb81 2103 	smull	r2, r1, r1, r3
1a0003f0:	17da      	asrs	r2, r3, #31
1a0003f2:	ebc2 1261 	rsb	r2, r2, r1, asr #5
1a0003f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a0003fa:	fb01 3212 	mls	r2, r1, r2, r3
1a0003fe:	b182      	cbz	r2, 1a000422 <SysTick_Handler+0x42>
      Led_Toggle(RED_LED);
   }
   if(contador %1000 == 0) {
1a000400:	4b0a      	ldr	r3, [pc, #40]	; (1a00042c <SysTick_Handler+0x4c>)
1a000402:	681a      	ldr	r2, [r3, #0]
1a000404:	490a      	ldr	r1, [pc, #40]	; (1a000430 <SysTick_Handler+0x50>)
1a000406:	fb81 3102 	smull	r3, r1, r1, r2
1a00040a:	17d3      	asrs	r3, r2, #31
1a00040c:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
1a000410:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000414:	fb01 2313 	mls	r3, r1, r3, r2
1a000418:	b913      	cbnz	r3, 1a000420 <SysTick_Handler+0x40>
       contador = 0;
1a00041a:	2200      	movs	r2, #0
1a00041c:	4b03      	ldr	r3, [pc, #12]	; (1a00042c <SysTick_Handler+0x4c>)
1a00041e:	601a      	str	r2, [r3, #0]
1a000420:	bd08      	pop	{r3, pc}
      Led_Toggle(RED_LED);
1a000422:	2003      	movs	r0, #3
1a000424:	f000 f8e8 	bl	1a0005f8 <Led_Toggle>
1a000428:	e7ea      	b.n	1a000400 <SysTick_Handler+0x20>
1a00042a:	bf00      	nop
1a00042c:	10000038 	.word	0x10000038
1a000430:	10624dd3 	.word	0x10624dd3

1a000434 <main>:
   }
}


int main(void)
{
1a000434:	b538      	push	{r3, r4, r5, lr}
   uint8_t actual = 0;
   uint8_t anterior = 0;

   ConfigurarPuertosLaboratorio();
1a000436:	f7ff ff89 	bl	1a00034c <ConfigurarPuertosLaboratorio>
   ConfigurarInterrupcion();
1a00043a:	f7ff ff61 	bl	1a000300 <ConfigurarInterrupcion>
   uint8_t anterior = 0;
1a00043e:	2500      	movs	r5, #0
1a000440:	e003      	b.n	1a00044a <main+0x16>
   while (1) {
       actual = Read_Switches();
       if (actual != anterior) {
           switch(actual) {
               case TEC1:
                   Led_On(GREEN_LED);
1a000442:	2005      	movs	r0, #5
1a000444:	f000 f860 	bl	1a000508 <Led_On>
               case TEC4:
                   break;
               default:
                   break;
           }
           anterior = actual;
1a000448:	4625      	mov	r5, r4
       actual = Read_Switches();
1a00044a:	f000 f911 	bl	1a000670 <Read_Switches>
1a00044e:	4604      	mov	r4, r0
       if (actual != anterior) {
1a000450:	4285      	cmp	r5, r0
1a000452:	d0fa      	beq.n	1a00044a <main+0x16>
           switch(actual) {
1a000454:	2802      	cmp	r0, #2
1a000456:	d005      	beq.n	1a000464 <main+0x30>
1a000458:	2803      	cmp	r0, #3
1a00045a:	d008      	beq.n	1a00046e <main+0x3a>
1a00045c:	2801      	cmp	r0, #1
1a00045e:	d0f0      	beq.n	1a000442 <main+0xe>
           anterior = actual;
1a000460:	4625      	mov	r5, r4
1a000462:	e7f2      	b.n	1a00044a <main+0x16>
                   Led_Off(GREEN_LED);
1a000464:	2005      	movs	r0, #5
1a000466:	f000 f88b 	bl	1a000580 <Led_Off>
           anterior = actual;
1a00046a:	4625      	mov	r5, r4
                   break;
1a00046c:	e7ed      	b.n	1a00044a <main+0x16>
                   Led_Toggle(YELLOW_LED);
1a00046e:	2004      	movs	r0, #4
1a000470:	f000 f8c2 	bl	1a0005f8 <Led_Toggle>
           anterior = actual;
1a000474:	4625      	mov	r5, r4
                   break;
1a000476:	e7e8      	b.n	1a00044a <main+0x16>

1a000478 <initialise_monitor_handles>:
{
1a000478:	4770      	bx	lr
1a00047a:	Address 0x000000001a00047a is out of bounds.


1a00047c <Reset_Handler>:
void Reset_Handler(void) {
1a00047c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00047e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000480:	4a19      	ldr	r2, [pc, #100]	; (1a0004e8 <Reset_Handler+0x6c>)
1a000482:	4b1a      	ldr	r3, [pc, #104]	; (1a0004ec <Reset_Handler+0x70>)
1a000484:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000486:	4a1a      	ldr	r2, [pc, #104]	; (1a0004f0 <Reset_Handler+0x74>)
1a000488:	3304      	adds	r3, #4
1a00048a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00048c:	2300      	movs	r3, #0
1a00048e:	e005      	b.n	1a00049c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000490:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000494:	4a17      	ldr	r2, [pc, #92]	; (1a0004f4 <Reset_Handler+0x78>)
1a000496:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00049a:	3301      	adds	r3, #1
1a00049c:	2b07      	cmp	r3, #7
1a00049e:	d9f7      	bls.n	1a000490 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0004a0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0004a2:	4b15      	ldr	r3, [pc, #84]	; (1a0004f8 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0004a4:	e007      	b.n	1a0004b6 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0004a6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0004aa:	689a      	ldr	r2, [r3, #8]
1a0004ac:	6859      	ldr	r1, [r3, #4]
1a0004ae:	6818      	ldr	r0, [r3, #0]
1a0004b0:	f7ff fe6b 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0004b4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0004b6:	4a11      	ldr	r2, [pc, #68]	; (1a0004fc <Reset_Handler+0x80>)
1a0004b8:	4293      	cmp	r3, r2
1a0004ba:	d3f4      	bcc.n	1a0004a6 <Reset_Handler+0x2a>
1a0004bc:	e006      	b.n	1a0004cc <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0004be:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0004c0:	6859      	ldr	r1, [r3, #4]
1a0004c2:	f854 0b08 	ldr.w	r0, [r4], #8
1a0004c6:	f7ff fe6f 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0004ca:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0004cc:	4a0c      	ldr	r2, [pc, #48]	; (1a000500 <Reset_Handler+0x84>)
1a0004ce:	4293      	cmp	r3, r2
1a0004d0:	d3f5      	bcc.n	1a0004be <Reset_Handler+0x42>
    SystemInit();
1a0004d2:	f000 ff3b 	bl	1a00134c <SystemInit>
    __libc_init_array();
1a0004d6:	f001 f8e1 	bl	1a00169c <__libc_init_array>
    initialise_monitor_handles();
1a0004da:	f7ff ffcd 	bl	1a000478 <initialise_monitor_handles>
    main();
1a0004de:	f7ff ffa9 	bl	1a000434 <main>
        __asm__ volatile("wfi");
1a0004e2:	bf30      	wfi
1a0004e4:	e7fd      	b.n	1a0004e2 <Reset_Handler+0x66>
1a0004e6:	bf00      	nop
1a0004e8:	10df1000 	.word	0x10df1000
1a0004ec:	40053100 	.word	0x40053100
1a0004f0:	01dff7ff 	.word	0x01dff7ff
1a0004f4:	e000e280 	.word	0xe000e280
1a0004f8:	1a000114 	.word	0x1a000114
1a0004fc:	1a000150 	.word	0x1a000150
1a000500:	1a000178 	.word	0x1a000178

1a000504 <_fini>:
void _fini(void) {}
1a000504:	4770      	bx	lr

1a000506 <_init>:
void _init(void) {}
1a000506:	4770      	bx	lr

1a000508 <Led_On>:
	return TRUE;
}

/** \brief Function to turn on a specific led */
uint8_t Led_On(uint8_t led)
{
1a000508:	4603      	mov	r3, r0
	/** \details Function to turn on a specific led at the EDU-CIAA board.
	 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
	 * */
	uint8_t result = FALSE;

	if (led == RED_LED)
1a00050a:	2803      	cmp	r0, #3
1a00050c:	d00f      	beq.n	1a00052e <Led_On+0x26>
	uint8_t result = FALSE;
1a00050e:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == YELLOW_LED)
1a000510:	2b04      	cmp	r3, #4
1a000512:	d012      	beq.n	1a00053a <Led_On+0x32>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a000514:	2b05      	cmp	r3, #5
1a000516:	d018      	beq.n	1a00054a <Led_On+0x42>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
    if (led == RGB_R_LED)
1a000518:	b923      	cbnz	r3, 1a000524 <Led_On+0x1c>
	pGPIO->SET[port] = (1 << pin);
1a00051a:	2001      	movs	r0, #1
1a00051c:	f242 2214 	movw	r2, #8724	; 0x2214
1a000520:	4915      	ldr	r1, [pc, #84]	; (1a000578 <Led_On+0x70>)
1a000522:	5088      	str	r0, [r1, r2]
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a000524:	2b01      	cmp	r3, #1
1a000526:	d018      	beq.n	1a00055a <Led_On+0x52>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a000528:	2b02      	cmp	r3, #2
1a00052a:	d01d      	beq.n	1a000568 <Led_On+0x60>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
}
1a00052c:	4770      	bx	lr
1a00052e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a000532:	4a12      	ldr	r2, [pc, #72]	; (1a00057c <Led_On+0x74>)
1a000534:	6011      	str	r1, [r2, #0]
		result = TRUE;
1a000536:	2001      	movs	r0, #1
1a000538:	e7ea      	b.n	1a000510 <Led_On+0x8>
1a00053a:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a00053e:	f242 2204 	movw	r2, #8708	; 0x2204
1a000542:	490d      	ldr	r1, [pc, #52]	; (1a000578 <Led_On+0x70>)
1a000544:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000546:	2001      	movs	r0, #1
1a000548:	e7e4      	b.n	1a000514 <Led_On+0xc>
1a00054a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
1a00054e:	f242 2204 	movw	r2, #8708	; 0x2204
1a000552:	4909      	ldr	r1, [pc, #36]	; (1a000578 <Led_On+0x70>)
1a000554:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000556:	2001      	movs	r0, #1
1a000558:	e7de      	b.n	1a000518 <Led_On+0x10>
1a00055a:	2002      	movs	r0, #2
1a00055c:	f242 2214 	movw	r2, #8724	; 0x2214
1a000560:	4905      	ldr	r1, [pc, #20]	; (1a000578 <Led_On+0x70>)
1a000562:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000564:	4618      	mov	r0, r3
1a000566:	e7df      	b.n	1a000528 <Led_On+0x20>
1a000568:	2104      	movs	r1, #4
1a00056a:	f242 2314 	movw	r3, #8724	; 0x2214
1a00056e:	4a02      	ldr	r2, [pc, #8]	; (1a000578 <Led_On+0x70>)
1a000570:	50d1      	str	r1, [r2, r3]
		result = TRUE;
1a000572:	2001      	movs	r0, #1
1a000574:	e7da      	b.n	1a00052c <Led_On+0x24>
1a000576:	bf00      	nop
1a000578:	400f4000 	.word	0x400f4000
1a00057c:	400f6200 	.word	0x400f6200

1a000580 <Led_Off>:

/** \brief Function to turn off a specific led */
uint8_t Led_Off(uint8_t led)
{
1a000580:	4603      	mov	r3, r0
	/** \details Function to turn off a specific led at the EDU-CIAA board.
		 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
		 * */
	uint8_t result = FALSE;

	if (led == RED_LED)
1a000582:	2803      	cmp	r0, #3
1a000584:	d00f      	beq.n	1a0005a6 <Led_Off+0x26>
	uint8_t result = FALSE;
1a000586:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == YELLOW_LED)
1a000588:	2b04      	cmp	r3, #4
1a00058a:	d012      	beq.n	1a0005b2 <Led_Off+0x32>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a00058c:	2b05      	cmp	r3, #5
1a00058e:	d018      	beq.n	1a0005c2 <Led_Off+0x42>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_R_LED)
1a000590:	b923      	cbnz	r3, 1a00059c <Led_Off+0x1c>
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a000592:	2001      	movs	r0, #1
1a000594:	f242 2294 	movw	r2, #8852	; 0x2294
1a000598:	4915      	ldr	r1, [pc, #84]	; (1a0005f0 <Led_Off+0x70>)
1a00059a:	5088      	str	r0, [r1, r2]
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a00059c:	2b01      	cmp	r3, #1
1a00059e:	d018      	beq.n	1a0005d2 <Led_Off+0x52>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a0005a0:	2b02      	cmp	r3, #2
1a0005a2:	d01d      	beq.n	1a0005e0 <Led_Off+0x60>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
}
1a0005a4:	4770      	bx	lr
1a0005a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a0005aa:	4a12      	ldr	r2, [pc, #72]	; (1a0005f4 <Led_Off+0x74>)
1a0005ac:	6011      	str	r1, [r2, #0]
		result = TRUE;
1a0005ae:	2001      	movs	r0, #1
1a0005b0:	e7ea      	b.n	1a000588 <Led_Off+0x8>
1a0005b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a0005b6:	f242 2284 	movw	r2, #8836	; 0x2284
1a0005ba:	490d      	ldr	r1, [pc, #52]	; (1a0005f0 <Led_Off+0x70>)
1a0005bc:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a0005be:	2001      	movs	r0, #1
1a0005c0:	e7e4      	b.n	1a00058c <Led_Off+0xc>
1a0005c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
1a0005c6:	f242 2284 	movw	r2, #8836	; 0x2284
1a0005ca:	4909      	ldr	r1, [pc, #36]	; (1a0005f0 <Led_Off+0x70>)
1a0005cc:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a0005ce:	2001      	movs	r0, #1
1a0005d0:	e7de      	b.n	1a000590 <Led_Off+0x10>
1a0005d2:	2002      	movs	r0, #2
1a0005d4:	f242 2294 	movw	r2, #8852	; 0x2294
1a0005d8:	4905      	ldr	r1, [pc, #20]	; (1a0005f0 <Led_Off+0x70>)
1a0005da:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a0005dc:	4618      	mov	r0, r3
1a0005de:	e7df      	b.n	1a0005a0 <Led_Off+0x20>
1a0005e0:	2104      	movs	r1, #4
1a0005e2:	f242 2394 	movw	r3, #8852	; 0x2294
1a0005e6:	4a02      	ldr	r2, [pc, #8]	; (1a0005f0 <Led_Off+0x70>)
1a0005e8:	50d1      	str	r1, [r2, r3]
		result = TRUE;
1a0005ea:	2001      	movs	r0, #1
1a0005ec:	e7da      	b.n	1a0005a4 <Led_Off+0x24>
1a0005ee:	bf00      	nop
1a0005f0:	400f4000 	.word	0x400f4000
1a0005f4:	400f6280 	.word	0x400f6280

1a0005f8 <Led_Toggle>:

/** \brief Function to turn off a specific led */
uint8_t Led_Toggle(uint8_t led)
{
1a0005f8:	4603      	mov	r3, r0
	/** \details Function to toogle a specific led at the EDU-CIAA board.
	 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
	 * */
uint8_t result = FALSE;

	if (led == RED_LED)
1a0005fa:	2803      	cmp	r0, #3
1a0005fc:	d00f      	beq.n	1a00061e <Led_Toggle+0x26>
uint8_t result = FALSE;
1a0005fe:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == YELLOW_LED)
1a000600:	2b04      	cmp	r3, #4
1a000602:	d012      	beq.n	1a00062a <Led_Toggle+0x32>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a000604:	2b05      	cmp	r3, #5
1a000606:	d018      	beq.n	1a00063a <Led_Toggle+0x42>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_R_LED)
1a000608:	b923      	cbnz	r3, 1a000614 <Led_Toggle+0x1c>
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinToggle(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->NOT[port] = (1 << pin);
1a00060a:	2001      	movs	r0, #1
1a00060c:	f242 3214 	movw	r2, #8980	; 0x2314
1a000610:	4915      	ldr	r1, [pc, #84]	; (1a000668 <Led_Toggle+0x70>)
1a000612:	5088      	str	r0, [r1, r2]
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a000614:	2b01      	cmp	r3, #1
1a000616:	d018      	beq.n	1a00064a <Led_Toggle+0x52>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a000618:	2b02      	cmp	r3, #2
1a00061a:	d01d      	beq.n	1a000658 <Led_Toggle+0x60>
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
	
}
1a00061c:	4770      	bx	lr
1a00061e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a000622:	4a12      	ldr	r2, [pc, #72]	; (1a00066c <Led_Toggle+0x74>)
1a000624:	6011      	str	r1, [r2, #0]
		result = TRUE;
1a000626:	2001      	movs	r0, #1
1a000628:	e7ea      	b.n	1a000600 <Led_Toggle+0x8>
1a00062a:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a00062e:	f242 3204 	movw	r2, #8964	; 0x2304
1a000632:	490d      	ldr	r1, [pc, #52]	; (1a000668 <Led_Toggle+0x70>)
1a000634:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000636:	2001      	movs	r0, #1
1a000638:	e7e4      	b.n	1a000604 <Led_Toggle+0xc>
1a00063a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
1a00063e:	f242 3204 	movw	r2, #8964	; 0x2304
1a000642:	4909      	ldr	r1, [pc, #36]	; (1a000668 <Led_Toggle+0x70>)
1a000644:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000646:	2001      	movs	r0, #1
1a000648:	e7de      	b.n	1a000608 <Led_Toggle+0x10>
1a00064a:	2002      	movs	r0, #2
1a00064c:	f242 3214 	movw	r2, #8980	; 0x2314
1a000650:	4905      	ldr	r1, [pc, #20]	; (1a000668 <Led_Toggle+0x70>)
1a000652:	5088      	str	r0, [r1, r2]
		result = TRUE;
1a000654:	4618      	mov	r0, r3
1a000656:	e7df      	b.n	1a000618 <Led_Toggle+0x20>
1a000658:	2104      	movs	r1, #4
1a00065a:	f242 3314 	movw	r3, #8980	; 0x2314
1a00065e:	4a02      	ldr	r2, [pc, #8]	; (1a000668 <Led_Toggle+0x70>)
1a000660:	50d1      	str	r1, [r2, r3]
		result = TRUE;
1a000662:	2001      	movs	r0, #1
1a000664:	e7da      	b.n	1a00061c <Led_Toggle+0x24>
1a000666:	bf00      	nop
1a000668:	400f4000 	.word	0x400f4000
1a00066c:	400f6300 	.word	0x400f6300

1a000670 <Read_Switches>:
	return (bool) pGPIO->B[port][pin];
1a000670:	4b09      	ldr	r3, [pc, #36]	; (1a000698 <Read_Switches+0x28>)
1a000672:	791b      	ldrb	r3, [r3, #4]

uint8_t Read_Switches(void)
{
	uint8_t switchPressed = NO_KEY;

	if (!Chip_GPIO_ReadPortBit(LPC_GPIO_PORT,SW1_GPIO_PORT,SW1_GPIO_PIN))
1a000674:	b173      	cbz	r3, 1a000694 <Read_Switches+0x24>
	uint8_t switchPressed = NO_KEY;
1a000676:	2000      	movs	r0, #0
1a000678:	4b07      	ldr	r3, [pc, #28]	; (1a000698 <Read_Switches+0x28>)
1a00067a:	7a1b      	ldrb	r3, [r3, #8]
		switchPressed = TEC1;

	if (!Chip_GPIO_ReadPortBit(LPC_GPIO_PORT,SW2_GPIO_PORT,SW2_GPIO_PIN))
1a00067c:	b903      	cbnz	r3, 1a000680 <Read_Switches+0x10>
		switchPressed = TEC2;
1a00067e:	2002      	movs	r0, #2
1a000680:	4b05      	ldr	r3, [pc, #20]	; (1a000698 <Read_Switches+0x28>)
1a000682:	7a5b      	ldrb	r3, [r3, #9]

	if (!Chip_GPIO_ReadPortBit(LPC_GPIO_PORT,SW3_GPIO_PORT,SW3_GPIO_PIN))
1a000684:	b903      	cbnz	r3, 1a000688 <Read_Switches+0x18>
		switchPressed = TEC3;
1a000686:	2003      	movs	r0, #3
1a000688:	4b03      	ldr	r3, [pc, #12]	; (1a000698 <Read_Switches+0x28>)
1a00068a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29

	if (!Chip_GPIO_ReadPortBit(LPC_GPIO_PORT,SW4_GPIO_PORT,SW4_GPIO_PIN))
1a00068e:	b903      	cbnz	r3, 1a000692 <Read_Switches+0x22>
		switchPressed = TEC4;
1a000690:	2004      	movs	r0, #4

	return switchPressed;
}
1a000692:	4770      	bx	lr
		switchPressed = TEC1;
1a000694:	2001      	movs	r0, #1
1a000696:	e7ef      	b.n	1a000678 <Read_Switches+0x8>
1a000698:	400f4000 	.word	0x400f4000

1a00069c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00069c:	2200      	movs	r2, #0
1a00069e:	2a05      	cmp	r2, #5
1a0006a0:	d819      	bhi.n	1a0006d6 <Board_LED_Init+0x3a>
{
1a0006a2:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0006a4:	490c      	ldr	r1, [pc, #48]	; (1a0006d8 <Board_LED_Init+0x3c>)
1a0006a6:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0006aa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0006ae:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a0006b0:	4b0a      	ldr	r3, [pc, #40]	; (1a0006dc <Board_LED_Init+0x40>)
1a0006b2:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0006b6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0006ba:	2001      	movs	r0, #1
1a0006bc:	40a0      	lsls	r0, r4
1a0006be:	4301      	orrs	r1, r0
1a0006c0:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0006c4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0006c8:	2100      	movs	r1, #0
1a0006ca:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0006cc:	3201      	adds	r2, #1
1a0006ce:	2a05      	cmp	r2, #5
1a0006d0:	d9e8      	bls.n	1a0006a4 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0006d2:	bc70      	pop	{r4, r5, r6}
1a0006d4:	4770      	bx	lr
1a0006d6:	4770      	bx	lr
1a0006d8:	1a001794 	.word	0x1a001794
1a0006dc:	400f4000 	.word	0x400f4000

1a0006e0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0006e0:	2300      	movs	r3, #0
1a0006e2:	2b03      	cmp	r3, #3
1a0006e4:	d816      	bhi.n	1a000714 <Board_TEC_Init+0x34>
{
1a0006e6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0006e8:	490b      	ldr	r1, [pc, #44]	; (1a000718 <Board_TEC_Init+0x38>)
1a0006ea:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0006ee:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0006f2:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0006f4:	4c09      	ldr	r4, [pc, #36]	; (1a00071c <Board_TEC_Init+0x3c>)
1a0006f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0006fa:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0006fe:	2001      	movs	r0, #1
1a000700:	40a8      	lsls	r0, r5
1a000702:	ea21 0100 	bic.w	r1, r1, r0
1a000706:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00070a:	3301      	adds	r3, #1
1a00070c:	2b03      	cmp	r3, #3
1a00070e:	d9eb      	bls.n	1a0006e8 <Board_TEC_Init+0x8>
    }
}
1a000710:	bc30      	pop	{r4, r5}
1a000712:	4770      	bx	lr
1a000714:	4770      	bx	lr
1a000716:	bf00      	nop
1a000718:	1a00178c 	.word	0x1a00178c
1a00071c:	400f4000 	.word	0x400f4000

1a000720 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000720:	2300      	movs	r3, #0
1a000722:	2b08      	cmp	r3, #8
1a000724:	d816      	bhi.n	1a000754 <Board_GPIO_Init+0x34>
{
1a000726:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000728:	490b      	ldr	r1, [pc, #44]	; (1a000758 <Board_GPIO_Init+0x38>)
1a00072a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00072e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000732:	784d      	ldrb	r5, [r1, #1]
1a000734:	4c09      	ldr	r4, [pc, #36]	; (1a00075c <Board_GPIO_Init+0x3c>)
1a000736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00073a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00073e:	2001      	movs	r0, #1
1a000740:	40a8      	lsls	r0, r5
1a000742:	ea21 0100 	bic.w	r1, r1, r0
1a000746:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00074a:	3301      	adds	r3, #1
1a00074c:	2b08      	cmp	r3, #8
1a00074e:	d9eb      	bls.n	1a000728 <Board_GPIO_Init+0x8>
    }
}
1a000750:	bc30      	pop	{r4, r5}
1a000752:	4770      	bx	lr
1a000754:	4770      	bx	lr
1a000756:	bf00      	nop
1a000758:	1a0017a0 	.word	0x1a0017a0
1a00075c:	400f4000 	.word	0x400f4000

1a000760 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000760:	b510      	push	{r4, lr}
1a000762:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a000764:	4c08      	ldr	r4, [pc, #32]	; (1a000788 <Board_ADC_Init+0x28>)
1a000766:	4669      	mov	r1, sp
1a000768:	4620      	mov	r0, r4
1a00076a:	f000 f99b 	bl	1a000aa4 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00076e:	4a07      	ldr	r2, [pc, #28]	; (1a00078c <Board_ADC_Init+0x2c>)
1a000770:	4669      	mov	r1, sp
1a000772:	4620      	mov	r0, r4
1a000774:	f000 f9b6 	bl	1a000ae4 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000778:	2200      	movs	r2, #0
1a00077a:	4669      	mov	r1, sp
1a00077c:	4620      	mov	r0, r4
1a00077e:	f000 f9ca 	bl	1a000b16 <Chip_ADC_SetResolution>
}
1a000782:	b002      	add	sp, #8
1a000784:	bd10      	pop	{r4, pc}
1a000786:	bf00      	nop
1a000788:	400e3000 	.word	0x400e3000
1a00078c:	00061a80 	.word	0x00061a80

1a000790 <Board_SPI_Init>:
{
1a000790:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a000792:	4c0b      	ldr	r4, [pc, #44]	; (1a0007c0 <Board_SPI_Init+0x30>)
1a000794:	4620      	mov	r0, r4
1a000796:	f000 fd7f 	bl	1a001298 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00079a:	6863      	ldr	r3, [r4, #4]
1a00079c:	f023 0304 	bic.w	r3, r3, #4
1a0007a0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0007a2:	6823      	ldr	r3, [r4, #0]
1a0007a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0007a8:	f043 0307 	orr.w	r3, r3, #7
1a0007ac:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0007ae:	4905      	ldr	r1, [pc, #20]	; (1a0007c4 <Board_SPI_Init+0x34>)
1a0007b0:	4620      	mov	r0, r4
1a0007b2:	f000 fd52 	bl	1a00125a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0007b6:	6863      	ldr	r3, [r4, #4]
1a0007b8:	f043 0302 	orr.w	r3, r3, #2
1a0007bc:	6063      	str	r3, [r4, #4]
1a0007be:	bd10      	pop	{r4, pc}
1a0007c0:	400c5000 	.word	0x400c5000
1a0007c4:	000186a0 	.word	0x000186a0

1a0007c8 <Board_I2C_Init>:
{
1a0007c8:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0007ca:	2000      	movs	r0, #0
1a0007cc:	f000 fd90 	bl	1a0012f0 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0007d0:	f640 0208 	movw	r2, #2056	; 0x808
1a0007d4:	4b03      	ldr	r3, [pc, #12]	; (1a0007e4 <Board_I2C_Init+0x1c>)
1a0007d6:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0007da:	4903      	ldr	r1, [pc, #12]	; (1a0007e8 <Board_I2C_Init+0x20>)
1a0007dc:	2000      	movs	r0, #0
1a0007de:	f000 fd99 	bl	1a001314 <Chip_I2C_SetClockRate>
1a0007e2:	bd08      	pop	{r3, pc}
1a0007e4:	40086000 	.word	0x40086000
1a0007e8:	000f4240 	.word	0x000f4240

1a0007ec <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0007ec:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0007ee:	4c07      	ldr	r4, [pc, #28]	; (1a00080c <Board_Debug_Init+0x20>)
1a0007f0:	4620      	mov	r0, r4
1a0007f2:	f000 f895 	bl	1a000920 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0007f6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0007fa:	4620      	mov	r0, r4
1a0007fc:	f000 f8ba 	bl	1a000974 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000800:	2303      	movs	r3, #3
1a000802:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000804:	2301      	movs	r3, #1
1a000806:	65e3      	str	r3, [r4, #92]	; 0x5c
1a000808:	bd10      	pop	{r4, pc}
1a00080a:	bf00      	nop
1a00080c:	400c1000 	.word	0x400c1000

1a000810 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000810:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000812:	f7ff ffeb 	bl	1a0007ec <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000816:	4808      	ldr	r0, [pc, #32]	; (1a000838 <Board_Init+0x28>)
1a000818:	f000 fcfe 	bl	1a001218 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a00081c:	f7ff ff80 	bl	1a000720 <Board_GPIO_Init>
   Board_ADC_Init();
1a000820:	f7ff ff9e 	bl	1a000760 <Board_ADC_Init>
   Board_SPI_Init();
1a000824:	f7ff ffb4 	bl	1a000790 <Board_SPI_Init>
   Board_I2C_Init();
1a000828:	f7ff ffce 	bl	1a0007c8 <Board_I2C_Init>

   Board_LED_Init();
1a00082c:	f7ff ff36 	bl	1a00069c <Board_LED_Init>
   Board_TEC_Init();
1a000830:	f7ff ff56 	bl	1a0006e0 <Board_TEC_Init>
1a000834:	bd08      	pop	{r3, pc}
1a000836:	bf00      	nop
1a000838:	400f4000 	.word	0x400f4000

1a00083c <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a00083c:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00083e:	f7ff ffd5 	bl	1a0007ec <Board_Debug_Init>
1a000842:	bd08      	pop	{r3, pc}

1a000844 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000844:	2300      	movs	r3, #0
1a000846:	2b1c      	cmp	r3, #28
1a000848:	d812      	bhi.n	1a000870 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00084a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00084c:	4a09      	ldr	r2, [pc, #36]	; (1a000874 <Board_SetupMuxing+0x30>)
1a00084e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000852:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000856:	784a      	ldrb	r2, [r1, #1]
1a000858:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00085a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00085e:	4906      	ldr	r1, [pc, #24]	; (1a000878 <Board_SetupMuxing+0x34>)
1a000860:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000864:	3301      	adds	r3, #1
1a000866:	2b1c      	cmp	r3, #28
1a000868:	d9f0      	bls.n	1a00084c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00086a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00086e:	4770      	bx	lr
1a000870:	4770      	bx	lr
1a000872:	bf00      	nop
1a000874:	1a0017bc 	.word	0x1a0017bc
1a000878:	40086000 	.word	0x40086000

1a00087c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00087c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00087e:	4a17      	ldr	r2, [pc, #92]	; (1a0008dc <Board_SetupClocking+0x60>)
1a000880:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000888:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00088c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000890:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000898:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00089c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0008a0:	2201      	movs	r2, #1
1a0008a2:	490f      	ldr	r1, [pc, #60]	; (1a0008e0 <Board_SetupClocking+0x64>)
1a0008a4:	2006      	movs	r0, #6
1a0008a6:	f000 fc0d 	bl	1a0010c4 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0008aa:	2400      	movs	r4, #0
1a0008ac:	b14c      	cbz	r4, 1a0008c2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0008ae:	4b0b      	ldr	r3, [pc, #44]	; (1a0008dc <Board_SetupClocking+0x60>)
1a0008b0:	685a      	ldr	r2, [r3, #4]
1a0008b2:	f022 020c 	bic.w	r2, r2, #12
1a0008b6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0008b8:	685a      	ldr	r2, [r3, #4]
1a0008ba:	f042 0203 	orr.w	r2, r2, #3
1a0008be:	605a      	str	r2, [r3, #4]
1a0008c0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0008c2:	4808      	ldr	r0, [pc, #32]	; (1a0008e4 <Board_SetupClocking+0x68>)
1a0008c4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0008c8:	2301      	movs	r3, #1
1a0008ca:	788a      	ldrb	r2, [r1, #2]
1a0008cc:	7849      	ldrb	r1, [r1, #1]
1a0008ce:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0008d2:	f000 fb49 	bl	1a000f68 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0008d6:	3401      	adds	r4, #1
1a0008d8:	e7e8      	b.n	1a0008ac <Board_SetupClocking+0x30>
1a0008da:	bf00      	nop
1a0008dc:	40043000 	.word	0x40043000
1a0008e0:	0c28cb00 	.word	0x0c28cb00
1a0008e4:	1a0017b8 	.word	0x1a0017b8

1a0008e8 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0008e8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0008ea:	f7ff ffab 	bl	1a000844 <Board_SetupMuxing>
    Board_SetupClocking();
1a0008ee:	f7ff ffc5 	bl	1a00087c <Board_SetupClocking>
1a0008f2:	bd08      	pop	{r3, pc}

1a0008f4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0008f4:	4b09      	ldr	r3, [pc, #36]	; (1a00091c <Chip_UART_GetIndex+0x28>)
1a0008f6:	4298      	cmp	r0, r3
1a0008f8:	d009      	beq.n	1a00090e <Chip_UART_GetIndex+0x1a>
1a0008fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0008fe:	4298      	cmp	r0, r3
1a000900:	d007      	beq.n	1a000912 <Chip_UART_GetIndex+0x1e>
1a000902:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000906:	4298      	cmp	r0, r3
1a000908:	d005      	beq.n	1a000916 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00090a:	2000      	movs	r0, #0
1a00090c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00090e:	2002      	movs	r0, #2
1a000910:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000912:	2003      	movs	r0, #3
1a000914:	4770      	bx	lr
			return 1;
1a000916:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000918:	4770      	bx	lr
1a00091a:	bf00      	nop
1a00091c:	400c1000 	.word	0x400c1000

1a000920 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000920:	b530      	push	{r4, r5, lr}
1a000922:	b083      	sub	sp, #12
1a000924:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000926:	f7ff ffe5 	bl	1a0008f4 <Chip_UART_GetIndex>
1a00092a:	2301      	movs	r3, #1
1a00092c:	461a      	mov	r2, r3
1a00092e:	4619      	mov	r1, r3
1a000930:	4d0e      	ldr	r5, [pc, #56]	; (1a00096c <Chip_UART_Init+0x4c>)
1a000932:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000936:	f000 fb5d 	bl	1a000ff4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00093a:	2307      	movs	r3, #7
1a00093c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00093e:	2300      	movs	r3, #0
1a000940:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000942:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000944:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000946:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000948:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00094a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00094c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00094e:	4b08      	ldr	r3, [pc, #32]	; (1a000970 <Chip_UART_Init+0x50>)
1a000950:	429c      	cmp	r4, r3
1a000952:	d006      	beq.n	1a000962 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000954:	2303      	movs	r3, #3
1a000956:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000958:	2310      	movs	r3, #16
1a00095a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00095c:	9b01      	ldr	r3, [sp, #4]
}
1a00095e:	b003      	add	sp, #12
1a000960:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000962:	2300      	movs	r3, #0
1a000964:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000966:	69a3      	ldr	r3, [r4, #24]
1a000968:	9301      	str	r3, [sp, #4]
1a00096a:	e7f3      	b.n	1a000954 <Chip_UART_Init+0x34>
1a00096c:	1a001838 	.word	0x1a001838
1a000970:	40082000 	.word	0x40082000

1a000974 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000978:	b083      	sub	sp, #12
1a00097a:	4683      	mov	fp, r0
1a00097c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00097e:	f7ff ffb9 	bl	1a0008f4 <Chip_UART_GetIndex>
1a000982:	4b35      	ldr	r3, [pc, #212]	; (1a000a58 <Chip_UART_SetBaudFDR+0xe4>)
1a000984:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000988:	f000 fb6c 	bl	1a001064 <Chip_Clock_GetRate>
1a00098c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00098e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000992:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000994:	2300      	movs	r3, #0
1a000996:	9301      	str	r3, [sp, #4]
1a000998:	46a2      	mov	sl, r4
1a00099a:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00099c:	e02a      	b.n	1a0009f4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00099e:	4243      	negs	r3, r0
				div ++;
1a0009a0:	1c4a      	adds	r2, r1, #1
1a0009a2:	e017      	b.n	1a0009d4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0009a4:	b30b      	cbz	r3, 1a0009ea <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0009a6:	461f      	mov	r7, r3
			sd = d;
1a0009a8:	9501      	str	r5, [sp, #4]
			sm = m;
1a0009aa:	46a2      	mov	sl, r4
			sdiv = div;
1a0009ac:	4691      	mov	r9, r2
		for (d = 0; d < m; d++) {
1a0009ae:	3501      	adds	r5, #1
1a0009b0:	42ac      	cmp	r4, r5
1a0009b2:	d91e      	bls.n	1a0009f2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0009b4:	0933      	lsrs	r3, r6, #4
1a0009b6:	0730      	lsls	r0, r6, #28
1a0009b8:	fba4 0100 	umull	r0, r1, r4, r0
1a0009bc:	fb04 1103 	mla	r1, r4, r3, r1
1a0009c0:	1962      	adds	r2, r4, r5
1a0009c2:	fb08 f202 	mul.w	r2, r8, r2
1a0009c6:	2300      	movs	r3, #0
1a0009c8:	f000 fce0 	bl	1a00138c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0009cc:	4603      	mov	r3, r0
			div = (uint32_t) (dval >> 32);
1a0009ce:	460a      	mov	r2, r1
			if ((int)diff < 0) {
1a0009d0:	2800      	cmp	r0, #0
1a0009d2:	dbe4      	blt.n	1a00099e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0009d4:	429f      	cmp	r7, r3
1a0009d6:	d3ea      	bcc.n	1a0009ae <Chip_UART_SetBaudFDR+0x3a>
1a0009d8:	2a00      	cmp	r2, #0
1a0009da:	d0e8      	beq.n	1a0009ae <Chip_UART_SetBaudFDR+0x3a>
1a0009dc:	0c11      	lsrs	r1, r2, #16
1a0009de:	d1e6      	bne.n	1a0009ae <Chip_UART_SetBaudFDR+0x3a>
1a0009e0:	2a02      	cmp	r2, #2
1a0009e2:	d8df      	bhi.n	1a0009a4 <Chip_UART_SetBaudFDR+0x30>
1a0009e4:	2d00      	cmp	r5, #0
1a0009e6:	d1e2      	bne.n	1a0009ae <Chip_UART_SetBaudFDR+0x3a>
1a0009e8:	e7dc      	b.n	1a0009a4 <Chip_UART_SetBaudFDR+0x30>
			odiff = diff;
1a0009ea:	461f      	mov	r7, r3
			sd = d;
1a0009ec:	9501      	str	r5, [sp, #4]
			sm = m;
1a0009ee:	46a2      	mov	sl, r4
			sdiv = div;
1a0009f0:	4691      	mov	r9, r2
	for (m = 1; odiff && m < 16; m++) {
1a0009f2:	3401      	adds	r4, #1
1a0009f4:	b11f      	cbz	r7, 1a0009fe <Chip_UART_SetBaudFDR+0x8a>
1a0009f6:	2c0f      	cmp	r4, #15
1a0009f8:	d801      	bhi.n	1a0009fe <Chip_UART_SetBaudFDR+0x8a>
1a0009fa:	2500      	movs	r5, #0
1a0009fc:	e7d8      	b.n	1a0009b0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0009fe:	f1b9 0f00 	cmp.w	r9, #0
1a000a02:	d024      	beq.n	1a000a4e <Chip_UART_SetBaudFDR+0xda>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000a04:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000a0c:	f8cb 300c 	str.w	r3, [fp, #12]
1a000a10:	fa5f f389 	uxtb.w	r3, r9
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000a14:	f8cb 3000 	str.w	r3, [fp]
1a000a18:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000a1c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000a20:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000a28:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000a2c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000a30:	b2db      	uxtb	r3, r3
1a000a32:	9901      	ldr	r1, [sp, #4]
1a000a34:	f001 020f 	and.w	r2, r1, #15
1a000a38:	4313      	orrs	r3, r2
1a000a3a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000a3e:	0933      	lsrs	r3, r6, #4
1a000a40:	fb03 f30a 	mul.w	r3, r3, sl
1a000a44:	448a      	add	sl, r1
1a000a46:	fb0a f909 	mul.w	r9, sl, r9
1a000a4a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000a4e:	4648      	mov	r0, r9
1a000a50:	b003      	add	sp, #12
1a000a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000a56:	bf00      	nop
1a000a58:	1a001830 	.word	0x1a001830

1a000a5c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000a5c:	4b03      	ldr	r3, [pc, #12]	; (1a000a6c <Chip_ADC_GetClockIndex+0x10>)
1a000a5e:	4298      	cmp	r0, r3
1a000a60:	d001      	beq.n	1a000a66 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000a62:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000a64:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000a66:	2004      	movs	r0, #4
1a000a68:	4770      	bx	lr
1a000a6a:	bf00      	nop
1a000a6c:	400e4000 	.word	0x400e4000

1a000a70 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000a70:	b570      	push	{r4, r5, r6, lr}
1a000a72:	460d      	mov	r5, r1
1a000a74:	4614      	mov	r4, r2
1a000a76:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000a78:	f7ff fff0 	bl	1a000a5c <Chip_ADC_GetClockIndex>
1a000a7c:	f000 faf2 	bl	1a001064 <Chip_Clock_GetRate>
	if (burstMode) {
1a000a80:	b965      	cbnz	r5, 1a000a9c <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a000a82:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000a86:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000a8a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000a8e:	0064      	lsls	r4, r4, #1
1a000a90:	fbb0 f0f4 	udiv	r0, r0, r4
1a000a94:	b2c0      	uxtb	r0, r0
1a000a96:	3801      	subs	r0, #1
	return div;
}
1a000a98:	b2c0      	uxtb	r0, r0
1a000a9a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a000a9c:	fb04 f406 	mul.w	r4, r4, r6
1a000aa0:	e7f3      	b.n	1a000a8a <getClkDiv+0x1a>
1a000aa2:	Address 0x000000001a000aa2 is out of bounds.


1a000aa4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000aa4:	b538      	push	{r3, r4, r5, lr}
1a000aa6:	4605      	mov	r5, r0
1a000aa8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000aaa:	f7ff ffd7 	bl	1a000a5c <Chip_ADC_GetClockIndex>
1a000aae:	2301      	movs	r3, #1
1a000ab0:	461a      	mov	r2, r3
1a000ab2:	4619      	mov	r1, r3
1a000ab4:	f000 fa9e 	bl	1a000ff4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000ab8:	2100      	movs	r1, #0
1a000aba:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000abc:	4a08      	ldr	r2, [pc, #32]	; (1a000ae0 <Chip_ADC_Init+0x3c>)
1a000abe:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000ac0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000ac2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000ac4:	230b      	movs	r3, #11
1a000ac6:	4628      	mov	r0, r5
1a000ac8:	f7ff ffd2 	bl	1a000a70 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000acc:	0200      	lsls	r0, r0, #8
1a000ace:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000ad2:	7923      	ldrb	r3, [r4, #4]
1a000ad4:	045b      	lsls	r3, r3, #17
1a000ad6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000ada:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000adc:	6028      	str	r0, [r5, #0]
1a000ade:	bd38      	pop	{r3, r4, r5, pc}
1a000ae0:	00061a80 	.word	0x00061a80

1a000ae4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000ae4:	b570      	push	{r4, r5, r6, lr}
1a000ae6:	4605      	mov	r5, r0
1a000ae8:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000aea:	6804      	ldr	r4, [r0, #0]
1a000aec:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000af0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000af4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000af6:	790b      	ldrb	r3, [r1, #4]
1a000af8:	f1c3 030b 	rsb	r3, r3, #11
1a000afc:	b2db      	uxtb	r3, r3
1a000afe:	7949      	ldrb	r1, [r1, #5]
1a000b00:	f7ff ffb6 	bl	1a000a70 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000b04:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000b08:	7934      	ldrb	r4, [r6, #4]
1a000b0a:	0464      	lsls	r4, r4, #17
1a000b0c:	f404 2460 	and.w	r4, r4, #917504	; 0xe0000
1a000b10:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a000b12:	6028      	str	r0, [r5, #0]
1a000b14:	bd70      	pop	{r4, r5, r6, pc}

1a000b16 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000b16:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000b18:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000b1a:	680a      	ldr	r2, [r1, #0]
1a000b1c:	f7ff ffe2 	bl	1a000ae4 <Chip_ADC_SetSampleRate>
1a000b20:	bd08      	pop	{r3, pc}
1a000b22:	Address 0x000000001a000b22 is out of bounds.


1a000b24 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000b24:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000b26:	680b      	ldr	r3, [r1, #0]
1a000b28:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000b2c:	d002      	beq.n	1a000b34 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000b32:	600b      	str	r3, [r1, #0]
1a000b34:	4607      	mov	r7, r0
1a000b36:	2501      	movs	r5, #1
1a000b38:	e03b      	b.n	1a000bb2 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000b3a:	694b      	ldr	r3, [r1, #20]
1a000b3c:	fb03 f302 	mul.w	r3, r3, r2
1a000b40:	fbb3 f3f5 	udiv	r3, r3, r5
1a000b44:	e014      	b.n	1a000b70 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000b46:	461c      	mov	r4, r3
1a000b48:	e020      	b.n	1a000b8c <pll_calc_divs+0x68>
		return -val;
1a000b4a:	f1ce 0e00 	rsb	lr, lr, #0
1a000b4e:	e020      	b.n	1a000b92 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a000b50:	3201      	adds	r2, #1
1a000b52:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000b56:	dc26      	bgt.n	1a000ba6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000b58:	680c      	ldr	r4, [r1, #0]
1a000b5a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000b5e:	d0ec      	beq.n	1a000b3a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000b60:	1c73      	adds	r3, r6, #1
1a000b62:	fa02 fe03 	lsl.w	lr, r2, r3
1a000b66:	694b      	ldr	r3, [r1, #20]
1a000b68:	fb03 f30e 	mul.w	r3, r3, lr
1a000b6c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000b70:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a000bbc <pll_calc_divs+0x98>
1a000b74:	4573      	cmp	r3, lr
1a000b76:	d9eb      	bls.n	1a000b50 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000b78:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a000bc0 <pll_calc_divs+0x9c>
1a000b7c:	4573      	cmp	r3, lr
1a000b7e:	d812      	bhi.n	1a000ba6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000b80:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000b84:	d1df      	bne.n	1a000b46 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a000b86:	1c74      	adds	r4, r6, #1
1a000b88:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a000b8c:	ebb0 0e04 	subs.w	lr, r0, r4
1a000b90:	d4db      	bmi.n	1a000b4a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a000b92:	4577      	cmp	r7, lr
1a000b94:	d9dc      	bls.n	1a000b50 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000b96:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000b98:	1c77      	adds	r7, r6, #1
1a000b9a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000b9c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000b9e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000ba0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000ba2:	4677      	mov	r7, lr
1a000ba4:	e7d4      	b.n	1a000b50 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000ba6:	3601      	adds	r6, #1
1a000ba8:	2e03      	cmp	r6, #3
1a000baa:	dc01      	bgt.n	1a000bb0 <pll_calc_divs+0x8c>
1a000bac:	2201      	movs	r2, #1
1a000bae:	e7d0      	b.n	1a000b52 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a000bb0:	3501      	adds	r5, #1
1a000bb2:	2d04      	cmp	r5, #4
1a000bb4:	dc01      	bgt.n	1a000bba <pll_calc_divs+0x96>
1a000bb6:	2600      	movs	r6, #0
1a000bb8:	e7f6      	b.n	1a000ba8 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a000bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000bbc:	094c5eff 	.word	0x094c5eff
1a000bc0:	1312d000 	.word	0x1312d000

1a000bc4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000bc6:	b099      	sub	sp, #100	; 0x64
1a000bc8:	4605      	mov	r5, r0
1a000bca:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000bcc:	2260      	movs	r2, #96	; 0x60
1a000bce:	2100      	movs	r1, #0
1a000bd0:	4668      	mov	r0, sp
1a000bd2:	f000 fd8b 	bl	1a0016ec <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000bd6:	2380      	movs	r3, #128	; 0x80
1a000bd8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000bda:	6963      	ldr	r3, [r4, #20]
1a000bdc:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000bde:	7923      	ldrb	r3, [r4, #4]
1a000be0:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000be4:	4669      	mov	r1, sp
1a000be6:	4628      	mov	r0, r5
1a000be8:	f7ff ff9c 	bl	1a000b24 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000bec:	9b06      	ldr	r3, [sp, #24]
1a000bee:	429d      	cmp	r5, r3
1a000bf0:	d027      	beq.n	1a000c42 <pll_get_frac+0x7e>
	if (val < 0)
1a000bf2:	1aeb      	subs	r3, r5, r3
1a000bf4:	d42e      	bmi.n	1a000c54 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000bf6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000bf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000bfe:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000c00:	6963      	ldr	r3, [r4, #20]
1a000c02:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000c04:	7923      	ldrb	r3, [r4, #4]
1a000c06:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000c0a:	a910      	add	r1, sp, #64	; 0x40
1a000c0c:	4628      	mov	r0, r5
1a000c0e:	f7ff ff89 	bl	1a000b24 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000c12:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000c14:	429d      	cmp	r5, r3
1a000c16:	d01f      	beq.n	1a000c58 <pll_get_frac+0x94>
	if (val < 0)
1a000c18:	1aeb      	subs	r3, r5, r3
1a000c1a:	d425      	bmi.n	1a000c68 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000c1c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000c1e:	4b2b      	ldr	r3, [pc, #172]	; (1a000ccc <pll_get_frac+0x108>)
1a000c20:	429d      	cmp	r5, r3
1a000c22:	d923      	bls.n	1a000c6c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000c26:	1aed      	subs	r5, r5, r3
1a000c28:	d433      	bmi.n	1a000c92 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000c2a:	42ae      	cmp	r6, r5
1a000c2c:	dc3b      	bgt.n	1a000ca6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000c2e:	42be      	cmp	r6, r7
1a000c30:	dc31      	bgt.n	1a000c96 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000c32:	466d      	mov	r5, sp
1a000c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c40:	e006      	b.n	1a000c50 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000c42:	466d      	mov	r5, sp
1a000c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000c50:	b019      	add	sp, #100	; 0x64
1a000c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000c54:	425b      	negs	r3, r3
1a000c56:	e7ce      	b.n	1a000bf6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000c58:	ad10      	add	r5, sp, #64	; 0x40
1a000c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000c66:	e7f3      	b.n	1a000c50 <pll_get_frac+0x8c>
		return -val;
1a000c68:	425b      	negs	r3, r3
1a000c6a:	e7d7      	b.n	1a000c1c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000c6c:	2340      	movs	r3, #64	; 0x40
1a000c6e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000c70:	6963      	ldr	r3, [r4, #20]
1a000c72:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000c74:	a908      	add	r1, sp, #32
1a000c76:	4628      	mov	r0, r5
1a000c78:	f7ff ff54 	bl	1a000b24 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000c7e:	429d      	cmp	r5, r3
1a000c80:	d1d0      	bne.n	1a000c24 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000c82:	ad08      	add	r5, sp, #32
1a000c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000c90:	e7de      	b.n	1a000c50 <pll_get_frac+0x8c>
		return -val;
1a000c92:	426d      	negs	r5, r5
1a000c94:	e7c9      	b.n	1a000c2a <pll_get_frac+0x66>
			*ppll = pll[2];
1a000c96:	ad10      	add	r5, sp, #64	; 0x40
1a000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ca4:	e7d4      	b.n	1a000c50 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000ca6:	42af      	cmp	r7, r5
1a000ca8:	db07      	blt.n	1a000cba <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000caa:	ad08      	add	r5, sp, #32
1a000cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000cb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000cb8:	e7ca      	b.n	1a000c50 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000cba:	ad10      	add	r5, sp, #64	; 0x40
1a000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000cc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000cc8:	e7c2      	b.n	1a000c50 <pll_get_frac+0x8c>
1a000cca:	bf00      	nop
1a000ccc:	068e7780 	.word	0x068e7780

1a000cd0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000cd0:	b430      	push	{r4, r5}
1a000cd2:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000cd4:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000cd6:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000cd8:	e000      	b.n	1a000cdc <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000cda:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000cdc:	281c      	cmp	r0, #28
1a000cde:	d118      	bne.n	1a000d12 <Chip_Clock_FindBaseClock+0x42>
1a000ce0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000ce4:	0051      	lsls	r1, r2, #1
1a000ce6:	4a0c      	ldr	r2, [pc, #48]	; (1a000d18 <Chip_Clock_FindBaseClock+0x48>)
1a000ce8:	440a      	add	r2, r1
1a000cea:	7914      	ldrb	r4, [r2, #4]
1a000cec:	42a0      	cmp	r0, r4
1a000cee:	d010      	beq.n	1a000d12 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000cf0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000cf4:	004a      	lsls	r2, r1, #1
1a000cf6:	4908      	ldr	r1, [pc, #32]	; (1a000d18 <Chip_Clock_FindBaseClock+0x48>)
1a000cf8:	5a8a      	ldrh	r2, [r1, r2]
1a000cfa:	42aa      	cmp	r2, r5
1a000cfc:	d8ed      	bhi.n	1a000cda <Chip_Clock_FindBaseClock+0xa>
1a000cfe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000d02:	0051      	lsls	r1, r2, #1
1a000d04:	4a04      	ldr	r2, [pc, #16]	; (1a000d18 <Chip_Clock_FindBaseClock+0x48>)
1a000d06:	440a      	add	r2, r1
1a000d08:	8852      	ldrh	r2, [r2, #2]
1a000d0a:	4295      	cmp	r5, r2
1a000d0c:	d8e5      	bhi.n	1a000cda <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000d0e:	4620      	mov	r0, r4
1a000d10:	e7e4      	b.n	1a000cdc <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000d12:	bc30      	pop	{r4, r5}
1a000d14:	4770      	bx	lr
1a000d16:	bf00      	nop
1a000d18:	1a00184c 	.word	0x1a00184c

1a000d1c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000d1c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000d22:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000d24:	4a0d      	ldr	r2, [pc, #52]	; (1a000d5c <Chip_Clock_EnableCrystal+0x40>)
1a000d26:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000d28:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000d2c:	6992      	ldr	r2, [r2, #24]
1a000d2e:	4291      	cmp	r1, r2
1a000d30:	d001      	beq.n	1a000d36 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000d32:	4a0a      	ldr	r2, [pc, #40]	; (1a000d5c <Chip_Clock_EnableCrystal+0x40>)
1a000d34:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000d36:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000d3a:	4a09      	ldr	r2, [pc, #36]	; (1a000d60 <Chip_Clock_EnableCrystal+0x44>)
1a000d3c:	6811      	ldr	r1, [r2, #0]
1a000d3e:	4a09      	ldr	r2, [pc, #36]	; (1a000d64 <Chip_Clock_EnableCrystal+0x48>)
1a000d40:	4291      	cmp	r1, r2
1a000d42:	d901      	bls.n	1a000d48 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000d44:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000d48:	4a04      	ldr	r2, [pc, #16]	; (1a000d5c <Chip_Clock_EnableCrystal+0x40>)
1a000d4a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000d4c:	9b01      	ldr	r3, [sp, #4]
1a000d4e:	1e5a      	subs	r2, r3, #1
1a000d50:	9201      	str	r2, [sp, #4]
1a000d52:	2b00      	cmp	r3, #0
1a000d54:	d1fa      	bne.n	1a000d4c <Chip_Clock_EnableCrystal+0x30>
}
1a000d56:	b002      	add	sp, #8
1a000d58:	4770      	bx	lr
1a000d5a:	bf00      	nop
1a000d5c:	40050000 	.word	0x40050000
1a000d60:	1a0017b4 	.word	0x1a0017b4
1a000d64:	01312cff 	.word	0x01312cff

1a000d68 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000d68:	3012      	adds	r0, #18
1a000d6a:	4b05      	ldr	r3, [pc, #20]	; (1a000d80 <Chip_Clock_GetDividerSource+0x18>)
1a000d6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000d70:	f010 0f01 	tst.w	r0, #1
1a000d74:	d001      	beq.n	1a000d7a <Chip_Clock_GetDividerSource+0x12>
		return CLKINPUT_PD;
1a000d76:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000d78:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000d7a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000d7e:	4770      	bx	lr
1a000d80:	40050000 	.word	0x40050000

1a000d84 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000d84:	f100 0212 	add.w	r2, r0, #18
1a000d88:	4b03      	ldr	r3, [pc, #12]	; (1a000d98 <Chip_Clock_GetDividerDivisor+0x14>)
1a000d8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000d8e:	4b03      	ldr	r3, [pc, #12]	; (1a000d9c <Chip_Clock_GetDividerDivisor+0x18>)
1a000d90:	5c18      	ldrb	r0, [r3, r0]
}
1a000d92:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000d96:	4770      	bx	lr
1a000d98:	40050000 	.word	0x40050000
1a000d9c:	1a001844 	.word	0x1a001844

1a000da0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000da0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000da2:	2810      	cmp	r0, #16
1a000da4:	d80a      	bhi.n	1a000dbc <Chip_Clock_GetClockInputHz+0x1c>
1a000da6:	e8df f000 	tbb	[pc, r0]
1a000daa:	0b44      	.short	0x0b44
1a000dac:	0921180d 	.word	0x0921180d
1a000db0:	2d2a2724 	.word	0x2d2a2724
1a000db4:	34300909 	.word	0x34300909
1a000db8:	3c38      	.short	0x3c38
1a000dba:	40          	.byte	0x40
1a000dbb:	00          	.byte	0x00
	uint32_t rate = 0;
1a000dbc:	2000      	movs	r0, #0
1a000dbe:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000dc0:	481e      	ldr	r0, [pc, #120]	; (1a000e3c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000dc2:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000dc4:	4b1e      	ldr	r3, [pc, #120]	; (1a000e40 <Chip_Clock_GetClockInputHz+0xa0>)
1a000dc6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000dca:	f003 0307 	and.w	r3, r3, #7
1a000dce:	2b04      	cmp	r3, #4
1a000dd0:	d001      	beq.n	1a000dd6 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000dd2:	481c      	ldr	r0, [pc, #112]	; (1a000e44 <Chip_Clock_GetClockInputHz+0xa4>)
1a000dd4:	bd08      	pop	{r3, pc}
	uint32_t rate = 0;
1a000dd6:	2000      	movs	r0, #0
1a000dd8:	bd08      	pop	{r3, pc}
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000dda:	4b19      	ldr	r3, [pc, #100]	; (1a000e40 <Chip_Clock_GetClockInputHz+0xa0>)
1a000ddc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000de0:	f003 0307 	and.w	r3, r3, #7
1a000de4:	2b04      	cmp	r3, #4
1a000de6:	d027      	beq.n	1a000e38 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000de8:	4816      	ldr	r0, [pc, #88]	; (1a000e44 <Chip_Clock_GetClockInputHz+0xa4>)
1a000dea:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000dec:	4b16      	ldr	r3, [pc, #88]	; (1a000e48 <Chip_Clock_GetClockInputHz+0xa8>)
1a000dee:	6818      	ldr	r0, [r3, #0]
		break;
1a000df0:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000df2:	4b16      	ldr	r3, [pc, #88]	; (1a000e4c <Chip_Clock_GetClockInputHz+0xac>)
1a000df4:	6818      	ldr	r0, [r3, #0]
		break;
1a000df6:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000df8:	4b15      	ldr	r3, [pc, #84]	; (1a000e50 <Chip_Clock_GetClockInputHz+0xb0>)
1a000dfa:	6818      	ldr	r0, [r3, #0]
		break;
1a000dfc:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000dfe:	4b14      	ldr	r3, [pc, #80]	; (1a000e50 <Chip_Clock_GetClockInputHz+0xb0>)
1a000e00:	6858      	ldr	r0, [r3, #4]
		break;
1a000e02:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000e04:	f000 f868 	bl	1a000ed8 <Chip_Clock_GetMainPLLHz>
		break;
1a000e08:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000e0a:	2100      	movs	r1, #0
1a000e0c:	f000 f89a 	bl	1a000f44 <Chip_Clock_GetDivRate>
		break;
1a000e10:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000e12:	2101      	movs	r1, #1
1a000e14:	f000 f896 	bl	1a000f44 <Chip_Clock_GetDivRate>
		break;
1a000e18:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000e1a:	2102      	movs	r1, #2
1a000e1c:	f000 f892 	bl	1a000f44 <Chip_Clock_GetDivRate>
		break;
1a000e20:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000e22:	2103      	movs	r1, #3
1a000e24:	f000 f88e 	bl	1a000f44 <Chip_Clock_GetDivRate>
		break;
1a000e28:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000e2a:	2104      	movs	r1, #4
1a000e2c:	f000 f88a 	bl	1a000f44 <Chip_Clock_GetDivRate>
		break;
1a000e30:	bd08      	pop	{r3, pc}
		rate = CRYSTAL_32K_FREQ_IN;
1a000e32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000e36:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000e38:	4806      	ldr	r0, [pc, #24]	; (1a000e54 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a000e3a:	bd08      	pop	{r3, pc}
1a000e3c:	00b71b00 	.word	0x00b71b00
1a000e40:	40043000 	.word	0x40043000
1a000e44:	017d7840 	.word	0x017d7840
1a000e48:	1a001788 	.word	0x1a001788
1a000e4c:	1a0017b4 	.word	0x1a0017b4
1a000e50:	1000003c 	.word	0x1000003c
1a000e54:	02faf080 	.word	0x02faf080

1a000e58 <Chip_Clock_CalcMainPLLValue>:
{
1a000e58:	b538      	push	{r3, r4, r5, lr}
1a000e5a:	4605      	mov	r5, r0
1a000e5c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000e5e:	7908      	ldrb	r0, [r1, #4]
1a000e60:	f7ff ff9e 	bl	1a000da0 <Chip_Clock_GetClockInputHz>
1a000e64:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000e66:	4b19      	ldr	r3, [pc, #100]	; (1a000ecc <Chip_Clock_CalcMainPLLValue+0x74>)
1a000e68:	442b      	add	r3, r5
1a000e6a:	4a19      	ldr	r2, [pc, #100]	; (1a000ed0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000e6c:	4293      	cmp	r3, r2
1a000e6e:	d821      	bhi.n	1a000eb4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000e70:	b318      	cbz	r0, 1a000eba <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000e72:	2380      	movs	r3, #128	; 0x80
1a000e74:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000e76:	2300      	movs	r3, #0
1a000e78:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000e7a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000e7c:	fbb5 f3f0 	udiv	r3, r5, r0
1a000e80:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000e82:	4a14      	ldr	r2, [pc, #80]	; (1a000ed4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000e84:	4295      	cmp	r5, r2
1a000e86:	d903      	bls.n	1a000e90 <Chip_Clock_CalcMainPLLValue+0x38>
1a000e88:	fb03 f000 	mul.w	r0, r3, r0
1a000e8c:	4285      	cmp	r5, r0
1a000e8e:	d007      	beq.n	1a000ea0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000e90:	4621      	mov	r1, r4
1a000e92:	4628      	mov	r0, r5
1a000e94:	f7ff fe96 	bl	1a000bc4 <pll_get_frac>
		if (!ppll->nsel) {
1a000e98:	68a3      	ldr	r3, [r4, #8]
1a000e9a:	b18b      	cbz	r3, 1a000ec0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000e9c:	3b01      	subs	r3, #1
1a000e9e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000ea0:	6923      	ldr	r3, [r4, #16]
1a000ea2:	b183      	cbz	r3, 1a000ec6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000ea4:	68e2      	ldr	r2, [r4, #12]
1a000ea6:	b10a      	cbz	r2, 1a000eac <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000ea8:	3a01      	subs	r2, #1
1a000eaa:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000eac:	3b01      	subs	r3, #1
1a000eae:	6123      	str	r3, [r4, #16]
	return 0;
1a000eb0:	2000      	movs	r0, #0
1a000eb2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000eb8:	bd38      	pop	{r3, r4, r5, pc}
1a000eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ebe:	bd38      	pop	{r3, r4, r5, pc}
			return -1;
1a000ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ec4:	bd38      	pop	{r3, r4, r5, pc}
		return - 1;
1a000ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000eca:	bd38      	pop	{r3, r4, r5, pc}
1a000ecc:	ff6b3a10 	.word	0xff6b3a10
1a000ed0:	0b940510 	.word	0x0b940510
1a000ed4:	094c5eff 	.word	0x094c5eff

1a000ed8 <Chip_Clock_GetMainPLLHz>:
{
1a000ed8:	b530      	push	{r4, r5, lr}
1a000eda:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000edc:	4d17      	ldr	r5, [pc, #92]	; (1a000f3c <Chip_Clock_GetMainPLLHz+0x64>)
1a000ede:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000ee0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000ee4:	f7ff ff5c 	bl	1a000da0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000ee8:	4b15      	ldr	r3, [pc, #84]	; (1a000f40 <Chip_Clock_GetMainPLLHz+0x68>)
1a000eea:	681b      	ldr	r3, [r3, #0]
1a000eec:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000eee:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000ef0:	f013 0f01 	tst.w	r3, #1
1a000ef4:	d01f      	beq.n	1a000f36 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a000ef6:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000efa:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000efe:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000f02:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000f06:	3201      	adds	r2, #1
	n = nsel + 1;
1a000f08:	3301      	adds	r3, #1
	p = ptab[psel];
1a000f0a:	f10d 0e08 	add.w	lr, sp, #8
1a000f0e:	4471      	add	r1, lr
1a000f10:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000f14:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000f18:	d108      	bne.n	1a000f2c <Chip_Clock_GetMainPLLHz+0x54>
1a000f1a:	b93d      	cbnz	r5, 1a000f2c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000f1c:	0049      	lsls	r1, r1, #1
1a000f1e:	fbb2 f2f1 	udiv	r2, r2, r1
1a000f22:	fbb0 f0f3 	udiv	r0, r0, r3
1a000f26:	fb00 f002 	mul.w	r0, r0, r2
1a000f2a:	e005      	b.n	1a000f38 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a000f2c:	fbb0 f0f3 	udiv	r0, r0, r3
1a000f30:	fb00 f002 	mul.w	r0, r0, r2
1a000f34:	e000      	b.n	1a000f38 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a000f36:	2000      	movs	r0, #0
}
1a000f38:	b003      	add	sp, #12
1a000f3a:	bd30      	pop	{r4, r5, pc}
1a000f3c:	40050000 	.word	0x40050000
1a000f40:	1a001840 	.word	0x1a001840

1a000f44 <Chip_Clock_GetDivRate>:
{
1a000f44:	b538      	push	{r3, r4, r5, lr}
1a000f46:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000f48:	4608      	mov	r0, r1
1a000f4a:	f7ff ff0d 	bl	1a000d68 <Chip_Clock_GetDividerSource>
1a000f4e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000f50:	4620      	mov	r0, r4
1a000f52:	f7ff ff17 	bl	1a000d84 <Chip_Clock_GetDividerDivisor>
1a000f56:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000f58:	4628      	mov	r0, r5
1a000f5a:	f7ff ff21 	bl	1a000da0 <Chip_Clock_GetClockInputHz>
1a000f5e:	3401      	adds	r4, #1
}
1a000f60:	fbb0 f0f4 	udiv	r0, r0, r4
1a000f64:	bd38      	pop	{r3, r4, r5, pc}
1a000f66:	Address 0x000000001a000f66 is out of bounds.


1a000f68 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000f68:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000f6a:	f100 0416 	add.w	r4, r0, #22
1a000f6e:	00a4      	lsls	r4, r4, #2
1a000f70:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000f74:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000f78:	6865      	ldr	r5, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000f7a:	281b      	cmp	r0, #27
1a000f7c:	d813      	bhi.n	1a000fa6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000f7e:	2911      	cmp	r1, #17
1a000f80:	d01a      	beq.n	1a000fb8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000f82:	4c0e      	ldr	r4, [pc, #56]	; (1a000fbc <Chip_Clock_SetBaseClock+0x54>)
1a000f84:	402c      	ands	r4, r5

			if (autoblocken) {
1a000f86:	b10a      	cbz	r2, 1a000f8c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000f88:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a000f8c:	b10b      	cbz	r3, 1a000f92 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000f8e:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000f92:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000f96:	3016      	adds	r0, #22
1a000f98:	0080      	lsls	r0, r0, #2
1a000f9a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000f9e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000fa2:	6044      	str	r4, [r0, #4]
1a000fa4:	e008      	b.n	1a000fb8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000fa6:	f045 0501 	orr.w	r5, r5, #1
1a000faa:	3016      	adds	r0, #22
1a000fac:	0080      	lsls	r0, r0, #2
1a000fae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000fb2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000fb6:	6045      	str	r5, [r0, #4]
	}
}
1a000fb8:	bc30      	pop	{r4, r5}
1a000fba:	4770      	bx	lr
1a000fbc:	e0fff7fe 	.word	0xe0fff7fe

1a000fc0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000fc0:	281b      	cmp	r0, #27
1a000fc2:	d901      	bls.n	1a000fc8 <Chip_Clock_GetBaseClock+0x8>
		return CLKINPUT_PD;
1a000fc4:	2011      	movs	r0, #17
1a000fc6:	4770      	bx	lr
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000fc8:	3016      	adds	r0, #22
1a000fca:	0080      	lsls	r0, r0, #2
1a000fcc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000fd0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000fd4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000fd6:	f010 0f01 	tst.w	r0, #1
1a000fda:	d001      	beq.n	1a000fe0 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
1a000fdc:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000fde:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000fe0:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000fe4:	4770      	bx	lr

1a000fe6 <Chip_Clock_GetBaseClocktHz>:
{
1a000fe6:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000fe8:	f7ff ffea 	bl	1a000fc0 <Chip_Clock_GetBaseClock>
1a000fec:	f7ff fed8 	bl	1a000da0 <Chip_Clock_GetClockInputHz>
}
1a000ff0:	bd08      	pop	{r3, pc}
1a000ff2:	Address 0x000000001a000ff2 is out of bounds.


1a000ff4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000ff4:	b969      	cbnz	r1, 1a001012 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a000ff6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000ff8:	b10a      	cbz	r2, 1a000ffe <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000ffa:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000ffe:	2b02      	cmp	r3, #2
1a001000:	d009      	beq.n	1a001016 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001002:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001006:	d209      	bcs.n	1a00101c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001008:	3020      	adds	r0, #32
1a00100a:	4b07      	ldr	r3, [pc, #28]	; (1a001028 <Chip_Clock_EnableOpts+0x34>)
1a00100c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001010:	4770      	bx	lr
		reg |= (1 << 1);
1a001012:	2103      	movs	r1, #3
1a001014:	e7f0      	b.n	1a000ff8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001016:	f041 0120 	orr.w	r1, r1, #32
1a00101a:	e7f2      	b.n	1a001002 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00101c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001020:	4b02      	ldr	r3, [pc, #8]	; (1a00102c <Chip_Clock_EnableOpts+0x38>)
1a001022:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001026:	4770      	bx	lr
1a001028:	40051000 	.word	0x40051000
1a00102c:	40052000 	.word	0x40052000

1a001030 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001030:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001034:	d208      	bcs.n	1a001048 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001036:	4a09      	ldr	r2, [pc, #36]	; (1a00105c <Chip_Clock_Enable+0x2c>)
1a001038:	3020      	adds	r0, #32
1a00103a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00103e:	f043 0301 	orr.w	r3, r3, #1
1a001042:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001046:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001048:	4a05      	ldr	r2, [pc, #20]	; (1a001060 <Chip_Clock_Enable+0x30>)
1a00104a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00104e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001052:	f043 0301 	orr.w	r3, r3, #1
1a001056:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00105a:	4770      	bx	lr
1a00105c:	40051000 	.word	0x40051000
1a001060:	40052000 	.word	0x40052000

1a001064 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001064:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001066:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00106a:	d309      	bcc.n	1a001080 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00106c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001070:	4a0d      	ldr	r2, [pc, #52]	; (1a0010a8 <Chip_Clock_GetRate+0x44>)
1a001072:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001076:	f014 0f01 	tst.w	r4, #1
1a00107a:	d107      	bne.n	1a00108c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00107c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00107e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001080:	f100 0320 	add.w	r3, r0, #32
1a001084:	4a09      	ldr	r2, [pc, #36]	; (1a0010ac <Chip_Clock_GetRate+0x48>)
1a001086:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00108a:	e7f4      	b.n	1a001076 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00108c:	f7ff fe20 	bl	1a000cd0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001090:	f7ff ffa9 	bl	1a000fe6 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001094:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001098:	d103      	bne.n	1a0010a2 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00109a:	2301      	movs	r3, #1
		rate = rate / div;
1a00109c:	fbb0 f0f3 	udiv	r0, r0, r3
1a0010a0:	bd10      	pop	{r4, pc}
			div = 2;/* No other dividers supported */
1a0010a2:	2302      	movs	r3, #2
1a0010a4:	e7fa      	b.n	1a00109c <Chip_Clock_GetRate+0x38>
1a0010a6:	bf00      	nop
1a0010a8:	40052000 	.word	0x40052000
1a0010ac:	40051000 	.word	0x40051000

1a0010b0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0010b0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0010b2:	2069      	movs	r0, #105	; 0x69
1a0010b4:	f7ff ffd6 	bl	1a001064 <Chip_Clock_GetRate>
1a0010b8:	4b01      	ldr	r3, [pc, #4]	; (1a0010c0 <SystemCoreClockUpdate+0x10>)
1a0010ba:	6018      	str	r0, [r3, #0]
1a0010bc:	bd08      	pop	{r3, pc}
1a0010be:	bf00      	nop
1a0010c0:	10000044 	.word	0x10000044

1a0010c4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0010c4:	b570      	push	{r4, r5, r6, lr}
1a0010c6:	b08a      	sub	sp, #40	; 0x28
1a0010c8:	4605      	mov	r5, r0
1a0010ca:	460e      	mov	r6, r1
1a0010cc:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0010ce:	f242 7310 	movw	r3, #10000	; 0x2710
1a0010d2:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0010d4:	2806      	cmp	r0, #6
1a0010d6:	d018      	beq.n	1a00110a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0010d8:	2300      	movs	r3, #0
1a0010da:	2201      	movs	r2, #1
1a0010dc:	4629      	mov	r1, r5
1a0010de:	2004      	movs	r0, #4
1a0010e0:	f7ff ff42 	bl	1a000f68 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0010e4:	4a49      	ldr	r2, [pc, #292]	; (1a00120c <Chip_SetupCoreClock+0x148>)
1a0010e6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0010e8:	f043 0301 	orr.w	r3, r3, #1
1a0010ec:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0010ee:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0010f2:	a901      	add	r1, sp, #4
1a0010f4:	4630      	mov	r0, r6
1a0010f6:	f7ff feaf 	bl	1a000e58 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0010fa:	4b45      	ldr	r3, [pc, #276]	; (1a001210 <Chip_SetupCoreClock+0x14c>)
1a0010fc:	429e      	cmp	r6, r3
1a0010fe:	d916      	bls.n	1a00112e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001100:	9b01      	ldr	r3, [sp, #4]
1a001102:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001106:	d003      	beq.n	1a001110 <Chip_SetupCoreClock+0x4c>
1a001108:	e7fe      	b.n	1a001108 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00110a:	f7ff fe07 	bl	1a000d1c <Chip_Clock_EnableCrystal>
1a00110e:	e7e3      	b.n	1a0010d8 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a001110:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001114:	d005      	beq.n	1a001122 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00111a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a00111c:	2500      	movs	r5, #0
			direct = 1;
1a00111e:	2601      	movs	r6, #1
1a001120:	e007      	b.n	1a001132 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001122:	9b04      	ldr	r3, [sp, #16]
1a001124:	3301      	adds	r3, #1
1a001126:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001128:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00112a:	2600      	movs	r6, #0
1a00112c:	e001      	b.n	1a001132 <Chip_SetupCoreClock+0x6e>
1a00112e:	2500      	movs	r5, #0
1a001130:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001132:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001136:	9b01      	ldr	r3, [sp, #4]
1a001138:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00113c:	9a05      	ldr	r2, [sp, #20]
1a00113e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001142:	9a03      	ldr	r2, [sp, #12]
1a001144:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001148:	9a04      	ldr	r2, [sp, #16]
1a00114a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00114e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001152:	4a2e      	ldr	r2, [pc, #184]	; (1a00120c <Chip_SetupCoreClock+0x148>)
1a001154:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001156:	4b2d      	ldr	r3, [pc, #180]	; (1a00120c <Chip_SetupCoreClock+0x148>)
1a001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00115a:	f013 0f01 	tst.w	r3, #1
1a00115e:	d0fa      	beq.n	1a001156 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001160:	2300      	movs	r3, #0
1a001162:	2201      	movs	r2, #1
1a001164:	2109      	movs	r1, #9
1a001166:	2004      	movs	r0, #4
1a001168:	f7ff fefe 	bl	1a000f68 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00116c:	b1fe      	cbz	r6, 1a0011ae <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00116e:	f242 7310 	movw	r3, #10000	; 0x2710
1a001172:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001174:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001176:	1e5a      	subs	r2, r3, #1
1a001178:	9209      	str	r2, [sp, #36]	; 0x24
1a00117a:	2b00      	cmp	r3, #0
1a00117c:	d1fa      	bne.n	1a001174 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00117e:	9b01      	ldr	r3, [sp, #4]
1a001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001184:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001186:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00118a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00118e:	9a05      	ldr	r2, [sp, #20]
1a001190:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001194:	9a03      	ldr	r2, [sp, #12]
1a001196:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00119a:	9a04      	ldr	r2, [sp, #16]
1a00119c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0011a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0011a4:	4a19      	ldr	r2, [pc, #100]	; (1a00120c <Chip_SetupCoreClock+0x148>)
1a0011a6:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0011a8:	b36c      	cbz	r4, 1a001206 <Chip_SetupCoreClock+0x142>
1a0011aa:	2400      	movs	r4, #0
1a0011ac:	e029      	b.n	1a001202 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0011ae:	2d00      	cmp	r5, #0
1a0011b0:	d0fa      	beq.n	1a0011a8 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0011b2:	f242 7310 	movw	r3, #10000	; 0x2710
1a0011b6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0011b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0011ba:	1e5a      	subs	r2, r3, #1
1a0011bc:	9209      	str	r2, [sp, #36]	; 0x24
1a0011be:	2b00      	cmp	r3, #0
1a0011c0:	d1fa      	bne.n	1a0011b8 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0011c2:	9b04      	ldr	r3, [sp, #16]
1a0011c4:	1e5a      	subs	r2, r3, #1
1a0011c6:	9204      	str	r2, [sp, #16]
1a0011c8:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0011cc:	9b01      	ldr	r3, [sp, #4]
1a0011ce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0011d2:	9905      	ldr	r1, [sp, #20]
1a0011d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0011d8:	9903      	ldr	r1, [sp, #12]
1a0011da:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0011de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0011e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0011e6:	4a09      	ldr	r2, [pc, #36]	; (1a00120c <Chip_SetupCoreClock+0x148>)
1a0011e8:	6453      	str	r3, [r2, #68]	; 0x44
1a0011ea:	e7dd      	b.n	1a0011a8 <Chip_SetupCoreClock+0xe4>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0011ec:	4809      	ldr	r0, [pc, #36]	; (1a001214 <Chip_SetupCoreClock+0x150>)
1a0011ee:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0011f2:	78cb      	ldrb	r3, [r1, #3]
1a0011f4:	788a      	ldrb	r2, [r1, #2]
1a0011f6:	7849      	ldrb	r1, [r1, #1]
1a0011f8:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0011fc:	f7ff feb4 	bl	1a000f68 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001200:	3401      	adds	r4, #1
1a001202:	2c11      	cmp	r4, #17
1a001204:	d9f2      	bls.n	1a0011ec <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001206:	b00a      	add	sp, #40	; 0x28
1a001208:	bd70      	pop	{r4, r5, r6, pc}
1a00120a:	bf00      	nop
1a00120c:	40050000 	.word	0x40050000
1a001210:	068e7780 	.word	0x068e7780
1a001214:	1a0018b8 	.word	0x1a0018b8

1a001218 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a001218:	4770      	bx	lr
1a00121a:	Address 0x000000001a00121a is out of bounds.


1a00121c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00121c:	4b03      	ldr	r3, [pc, #12]	; (1a00122c <Chip_SSP_GetClockIndex+0x10>)
1a00121e:	4298      	cmp	r0, r3
1a001220:	d001      	beq.n	1a001226 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001222:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001224:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001226:	20a5      	movs	r0, #165	; 0xa5
1a001228:	4770      	bx	lr
1a00122a:	bf00      	nop
1a00122c:	400c5000 	.word	0x400c5000

1a001230 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001230:	4b04      	ldr	r3, [pc, #16]	; (1a001244 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001232:	4298      	cmp	r0, r3
1a001234:	d002      	beq.n	1a00123c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001236:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00123a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00123c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001240:	4770      	bx	lr
1a001242:	bf00      	nop
1a001244:	400c5000 	.word	0x400c5000

1a001248 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001248:	6803      	ldr	r3, [r0, #0]
1a00124a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00124e:	0209      	lsls	r1, r1, #8
1a001250:	b289      	uxth	r1, r1
1a001252:	430b      	orrs	r3, r1
1a001254:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a001256:	6102      	str	r2, [r0, #16]
1a001258:	4770      	bx	lr

1a00125a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00125a:	b570      	push	{r4, r5, r6, lr}
1a00125c:	4606      	mov	r6, r0
1a00125e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001260:	f7ff ffe6 	bl	1a001230 <Chip_SSP_GetPeriphClockIndex>
1a001264:	f7ff fefe 	bl	1a001064 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001268:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00126a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00126e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001270:	e000      	b.n	1a001274 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001272:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001274:	42ab      	cmp	r3, r5
1a001276:	d90b      	bls.n	1a001290 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001278:	1c4c      	adds	r4, r1, #1
1a00127a:	fb04 f302 	mul.w	r3, r4, r2
1a00127e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001282:	429d      	cmp	r5, r3
1a001284:	d2f6      	bcs.n	1a001274 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001286:	2cff      	cmp	r4, #255	; 0xff
1a001288:	d9f3      	bls.n	1a001272 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00128a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00128c:	2100      	movs	r1, #0
1a00128e:	e7f1      	b.n	1a001274 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001290:	4630      	mov	r0, r6
1a001292:	f7ff ffd9 	bl	1a001248 <Chip_SSP_SetClockRate>
1a001296:	bd70      	pop	{r4, r5, r6, pc}

1a001298 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001298:	b510      	push	{r4, lr}
1a00129a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00129c:	f7ff ffbe 	bl	1a00121c <Chip_SSP_GetClockIndex>
1a0012a0:	f7ff fec6 	bl	1a001030 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0012a4:	4620      	mov	r0, r4
1a0012a6:	f7ff ffc3 	bl	1a001230 <Chip_SSP_GetPeriphClockIndex>
1a0012aa:	f7ff fec1 	bl	1a001030 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0012ae:	6863      	ldr	r3, [r4, #4]
1a0012b0:	f023 0304 	bic.w	r3, r3, #4
1a0012b4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0012b6:	6823      	ldr	r3, [r4, #0]
1a0012b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0012bc:	f043 0307 	orr.w	r3, r3, #7
1a0012c0:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0012c2:	4902      	ldr	r1, [pc, #8]	; (1a0012cc <Chip_SSP_Init+0x34>)
1a0012c4:	4620      	mov	r0, r4
1a0012c6:	f7ff ffc8 	bl	1a00125a <Chip_SSP_SetBitRate>
1a0012ca:	bd10      	pop	{r4, pc}
1a0012cc:	000186a0 	.word	0x000186a0

1a0012d0 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0012d0:	2901      	cmp	r1, #1
1a0012d2:	d000      	beq.n	1a0012d6 <Chip_I2C_EventHandler+0x6>
1a0012d4:	4770      	bx	lr
		return;
	}

	stat = &iic->mXfer->status;
1a0012d6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0012da:	0082      	lsls	r2, r0, #2
1a0012dc:	4b03      	ldr	r3, [pc, #12]	; (1a0012ec <Chip_I2C_EventHandler+0x1c>)
1a0012de:	4413      	add	r3, r2
1a0012e0:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0012e2:	7d13      	ldrb	r3, [r2, #20]
1a0012e4:	b2db      	uxtb	r3, r3
1a0012e6:	2b04      	cmp	r3, #4
1a0012e8:	d0fb      	beq.n	1a0012e2 <Chip_I2C_EventHandler+0x12>
1a0012ea:	e7f3      	b.n	1a0012d4 <Chip_I2C_EventHandler+0x4>
1a0012ec:	10000000 	.word	0x10000000

1a0012f0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0012f0:	b570      	push	{r4, r5, r6, lr}
1a0012f2:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0012f4:	4e06      	ldr	r6, [pc, #24]	; (1a001310 <Chip_I2C_Init+0x20>)
1a0012f6:	00c4      	lsls	r4, r0, #3
1a0012f8:	1a22      	subs	r2, r4, r0
1a0012fa:	0093      	lsls	r3, r2, #2
1a0012fc:	4433      	add	r3, r6
1a0012fe:	8898      	ldrh	r0, [r3, #4]
1a001300:	f7ff fe96 	bl	1a001030 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001304:	1b64      	subs	r4, r4, r5
1a001306:	00a3      	lsls	r3, r4, #2
1a001308:	58f3      	ldr	r3, [r6, r3]
1a00130a:	226c      	movs	r2, #108	; 0x6c
1a00130c:	619a      	str	r2, [r3, #24]
1a00130e:	bd70      	pop	{r4, r5, r6, pc}
1a001310:	10000000 	.word	0x10000000

1a001314 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001318:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00131a:	4e0b      	ldr	r6, [pc, #44]	; (1a001348 <Chip_I2C_SetClockRate+0x34>)
1a00131c:	00c5      	lsls	r5, r0, #3
1a00131e:	1a2b      	subs	r3, r5, r0
1a001320:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001324:	eb06 0308 	add.w	r3, r6, r8
1a001328:	8898      	ldrh	r0, [r3, #4]
1a00132a:	f7ff fe9b 	bl	1a001064 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00132e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001332:	f856 3008 	ldr.w	r3, [r6, r8]
1a001336:	0842      	lsrs	r2, r0, #1
1a001338:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00133a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00133e:	691a      	ldr	r2, [r3, #16]
1a001340:	1a80      	subs	r0, r0, r2
1a001342:	6158      	str	r0, [r3, #20]
1a001344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001348:	10000000 	.word	0x10000000

1a00134c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00134c:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00134e:	4b0d      	ldr	r3, [pc, #52]	; (1a001384 <SystemInit+0x38>)
1a001350:	4a0d      	ldr	r2, [pc, #52]	; (1a001388 <SystemInit+0x3c>)
1a001352:	609a      	str	r2, [r3, #8]
  mvfr0 = FPU->MVFR0;
1a001354:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001358:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00135a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00135e:	2b20      	cmp	r3, #32
1a001360:	d00d      	beq.n	1a00137e <SystemInit+0x32>
    return 0U;           /* No FPU */
1a001362:	2300      	movs	r3, #0

   if (SCB_GetFPUType() > 0)
1a001364:	b133      	cbz	r3, 1a001374 <SystemInit+0x28>
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001366:	4a07      	ldr	r2, [pc, #28]	; (1a001384 <SystemInit+0x38>)
1a001368:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00136c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Board specific SystemInit */
   Board_SystemInit();
1a001374:	f7ff fab8 	bl	1a0008e8 <Board_SystemInit>
   Board_Init();
1a001378:	f7ff fa4a 	bl	1a000810 <Board_Init>
1a00137c:	bd08      	pop	{r3, pc}
    return 1U;           /* Single precision FPU */
1a00137e:	2301      	movs	r3, #1
1a001380:	e7f0      	b.n	1a001364 <SystemInit+0x18>
1a001382:	bf00      	nop
1a001384:	e000ed00 	.word	0xe000ed00
1a001388:	1a000000 	.word	0x1a000000

1a00138c <__aeabi_uldivmod>:
1a00138c:	b953      	cbnz	r3, 1a0013a4 <__aeabi_uldivmod+0x18>
1a00138e:	b94a      	cbnz	r2, 1a0013a4 <__aeabi_uldivmod+0x18>
1a001390:	2900      	cmp	r1, #0
1a001392:	bf08      	it	eq
1a001394:	2800      	cmpeq	r0, #0
1a001396:	bf1c      	itt	ne
1a001398:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00139c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0013a0:	f000 b97a 	b.w	1a001698 <__aeabi_idiv0>
1a0013a4:	f1ad 0c08 	sub.w	ip, sp, #8
1a0013a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0013ac:	f000 f806 	bl	1a0013bc <__udivmoddi4>
1a0013b0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0013b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0013b8:	b004      	add	sp, #16
1a0013ba:	4770      	bx	lr

1a0013bc <__udivmoddi4>:
1a0013bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0013c0:	468c      	mov	ip, r1
1a0013c2:	460d      	mov	r5, r1
1a0013c4:	4604      	mov	r4, r0
1a0013c6:	9e08      	ldr	r6, [sp, #32]
1a0013c8:	2b00      	cmp	r3, #0
1a0013ca:	d151      	bne.n	1a001470 <__udivmoddi4+0xb4>
1a0013cc:	428a      	cmp	r2, r1
1a0013ce:	4617      	mov	r7, r2
1a0013d0:	d96d      	bls.n	1a0014ae <__udivmoddi4+0xf2>
1a0013d2:	fab2 fe82 	clz	lr, r2
1a0013d6:	f1be 0f00 	cmp.w	lr, #0
1a0013da:	d00b      	beq.n	1a0013f4 <__udivmoddi4+0x38>
1a0013dc:	f1ce 0c20 	rsb	ip, lr, #32
1a0013e0:	fa01 f50e 	lsl.w	r5, r1, lr
1a0013e4:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0013e8:	fa02 f70e 	lsl.w	r7, r2, lr
1a0013ec:	ea4c 0c05 	orr.w	ip, ip, r5
1a0013f0:	fa00 f40e 	lsl.w	r4, r0, lr
1a0013f4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a0013f8:	0c25      	lsrs	r5, r4, #16
1a0013fa:	fbbc f8fa 	udiv	r8, ip, sl
1a0013fe:	fa1f f987 	uxth.w	r9, r7
1a001402:	fb0a cc18 	mls	ip, sl, r8, ip
1a001406:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a00140a:	fb08 f309 	mul.w	r3, r8, r9
1a00140e:	42ab      	cmp	r3, r5
1a001410:	d90a      	bls.n	1a001428 <__udivmoddi4+0x6c>
1a001412:	19ed      	adds	r5, r5, r7
1a001414:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a001418:	f080 8123 	bcs.w	1a001662 <__udivmoddi4+0x2a6>
1a00141c:	42ab      	cmp	r3, r5
1a00141e:	f240 8120 	bls.w	1a001662 <__udivmoddi4+0x2a6>
1a001422:	f1a8 0802 	sub.w	r8, r8, #2
1a001426:	443d      	add	r5, r7
1a001428:	1aed      	subs	r5, r5, r3
1a00142a:	b2a4      	uxth	r4, r4
1a00142c:	fbb5 f0fa 	udiv	r0, r5, sl
1a001430:	fb0a 5510 	mls	r5, sl, r0, r5
1a001434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a001438:	fb00 f909 	mul.w	r9, r0, r9
1a00143c:	45a1      	cmp	r9, r4
1a00143e:	d909      	bls.n	1a001454 <__udivmoddi4+0x98>
1a001440:	19e4      	adds	r4, r4, r7
1a001442:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001446:	f080 810a 	bcs.w	1a00165e <__udivmoddi4+0x2a2>
1a00144a:	45a1      	cmp	r9, r4
1a00144c:	f240 8107 	bls.w	1a00165e <__udivmoddi4+0x2a2>
1a001450:	3802      	subs	r0, #2
1a001452:	443c      	add	r4, r7
1a001454:	eba4 0409 	sub.w	r4, r4, r9
1a001458:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a00145c:	2100      	movs	r1, #0
1a00145e:	2e00      	cmp	r6, #0
1a001460:	d061      	beq.n	1a001526 <__udivmoddi4+0x16a>
1a001462:	fa24 f40e 	lsr.w	r4, r4, lr
1a001466:	2300      	movs	r3, #0
1a001468:	6034      	str	r4, [r6, #0]
1a00146a:	6073      	str	r3, [r6, #4]
1a00146c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001470:	428b      	cmp	r3, r1
1a001472:	d907      	bls.n	1a001484 <__udivmoddi4+0xc8>
1a001474:	2e00      	cmp	r6, #0
1a001476:	d054      	beq.n	1a001522 <__udivmoddi4+0x166>
1a001478:	2100      	movs	r1, #0
1a00147a:	e886 0021 	stmia.w	r6, {r0, r5}
1a00147e:	4608      	mov	r0, r1
1a001480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001484:	fab3 f183 	clz	r1, r3
1a001488:	2900      	cmp	r1, #0
1a00148a:	f040 808e 	bne.w	1a0015aa <__udivmoddi4+0x1ee>
1a00148e:	42ab      	cmp	r3, r5
1a001490:	d302      	bcc.n	1a001498 <__udivmoddi4+0xdc>
1a001492:	4282      	cmp	r2, r0
1a001494:	f200 80fa 	bhi.w	1a00168c <__udivmoddi4+0x2d0>
1a001498:	1a84      	subs	r4, r0, r2
1a00149a:	eb65 0503 	sbc.w	r5, r5, r3
1a00149e:	2001      	movs	r0, #1
1a0014a0:	46ac      	mov	ip, r5
1a0014a2:	2e00      	cmp	r6, #0
1a0014a4:	d03f      	beq.n	1a001526 <__udivmoddi4+0x16a>
1a0014a6:	e886 1010 	stmia.w	r6, {r4, ip}
1a0014aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0014ae:	b912      	cbnz	r2, 1a0014b6 <__udivmoddi4+0xfa>
1a0014b0:	2701      	movs	r7, #1
1a0014b2:	fbb7 f7f2 	udiv	r7, r7, r2
1a0014b6:	fab7 fe87 	clz	lr, r7
1a0014ba:	f1be 0f00 	cmp.w	lr, #0
1a0014be:	d134      	bne.n	1a00152a <__udivmoddi4+0x16e>
1a0014c0:	1beb      	subs	r3, r5, r7
1a0014c2:	0c3a      	lsrs	r2, r7, #16
1a0014c4:	fa1f fc87 	uxth.w	ip, r7
1a0014c8:	2101      	movs	r1, #1
1a0014ca:	fbb3 f8f2 	udiv	r8, r3, r2
1a0014ce:	0c25      	lsrs	r5, r4, #16
1a0014d0:	fb02 3318 	mls	r3, r2, r8, r3
1a0014d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a0014d8:	fb0c f308 	mul.w	r3, ip, r8
1a0014dc:	42ab      	cmp	r3, r5
1a0014de:	d907      	bls.n	1a0014f0 <__udivmoddi4+0x134>
1a0014e0:	19ed      	adds	r5, r5, r7
1a0014e2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a0014e6:	d202      	bcs.n	1a0014ee <__udivmoddi4+0x132>
1a0014e8:	42ab      	cmp	r3, r5
1a0014ea:	f200 80d1 	bhi.w	1a001690 <__udivmoddi4+0x2d4>
1a0014ee:	4680      	mov	r8, r0
1a0014f0:	1aed      	subs	r5, r5, r3
1a0014f2:	b2a3      	uxth	r3, r4
1a0014f4:	fbb5 f0f2 	udiv	r0, r5, r2
1a0014f8:	fb02 5510 	mls	r5, r2, r0, r5
1a0014fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a001500:	fb0c fc00 	mul.w	ip, ip, r0
1a001504:	45a4      	cmp	ip, r4
1a001506:	d907      	bls.n	1a001518 <__udivmoddi4+0x15c>
1a001508:	19e4      	adds	r4, r4, r7
1a00150a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00150e:	d202      	bcs.n	1a001516 <__udivmoddi4+0x15a>
1a001510:	45a4      	cmp	ip, r4
1a001512:	f200 80b8 	bhi.w	1a001686 <__udivmoddi4+0x2ca>
1a001516:	4618      	mov	r0, r3
1a001518:	eba4 040c 	sub.w	r4, r4, ip
1a00151c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a001520:	e79d      	b.n	1a00145e <__udivmoddi4+0xa2>
1a001522:	4631      	mov	r1, r6
1a001524:	4630      	mov	r0, r6
1a001526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00152a:	f1ce 0420 	rsb	r4, lr, #32
1a00152e:	fa05 f30e 	lsl.w	r3, r5, lr
1a001532:	fa07 f70e 	lsl.w	r7, r7, lr
1a001536:	fa20 f804 	lsr.w	r8, r0, r4
1a00153a:	0c3a      	lsrs	r2, r7, #16
1a00153c:	fa25 f404 	lsr.w	r4, r5, r4
1a001540:	ea48 0803 	orr.w	r8, r8, r3
1a001544:	fbb4 f1f2 	udiv	r1, r4, r2
1a001548:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a00154c:	fb02 4411 	mls	r4, r2, r1, r4
1a001550:	fa1f fc87 	uxth.w	ip, r7
1a001554:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a001558:	fb01 f30c 	mul.w	r3, r1, ip
1a00155c:	42ab      	cmp	r3, r5
1a00155e:	fa00 f40e 	lsl.w	r4, r0, lr
1a001562:	d909      	bls.n	1a001578 <__udivmoddi4+0x1bc>
1a001564:	19ed      	adds	r5, r5, r7
1a001566:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
1a00156a:	f080 808a 	bcs.w	1a001682 <__udivmoddi4+0x2c6>
1a00156e:	42ab      	cmp	r3, r5
1a001570:	f240 8087 	bls.w	1a001682 <__udivmoddi4+0x2c6>
1a001574:	3902      	subs	r1, #2
1a001576:	443d      	add	r5, r7
1a001578:	1aeb      	subs	r3, r5, r3
1a00157a:	fa1f f588 	uxth.w	r5, r8
1a00157e:	fbb3 f0f2 	udiv	r0, r3, r2
1a001582:	fb02 3310 	mls	r3, r2, r0, r3
1a001586:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a00158a:	fb00 f30c 	mul.w	r3, r0, ip
1a00158e:	42ab      	cmp	r3, r5
1a001590:	d907      	bls.n	1a0015a2 <__udivmoddi4+0x1e6>
1a001592:	19ed      	adds	r5, r5, r7
1a001594:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
1a001598:	d26f      	bcs.n	1a00167a <__udivmoddi4+0x2be>
1a00159a:	42ab      	cmp	r3, r5
1a00159c:	d96d      	bls.n	1a00167a <__udivmoddi4+0x2be>
1a00159e:	3802      	subs	r0, #2
1a0015a0:	443d      	add	r5, r7
1a0015a2:	1aeb      	subs	r3, r5, r3
1a0015a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a0015a8:	e78f      	b.n	1a0014ca <__udivmoddi4+0x10e>
1a0015aa:	f1c1 0720 	rsb	r7, r1, #32
1a0015ae:	fa22 f807 	lsr.w	r8, r2, r7
1a0015b2:	408b      	lsls	r3, r1
1a0015b4:	fa05 f401 	lsl.w	r4, r5, r1
1a0015b8:	ea48 0303 	orr.w	r3, r8, r3
1a0015bc:	fa20 fe07 	lsr.w	lr, r0, r7
1a0015c0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a0015c4:	40fd      	lsrs	r5, r7
1a0015c6:	ea4e 0e04 	orr.w	lr, lr, r4
1a0015ca:	fbb5 f9fc 	udiv	r9, r5, ip
1a0015ce:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a0015d2:	fb0c 5519 	mls	r5, ip, r9, r5
1a0015d6:	fa1f f883 	uxth.w	r8, r3
1a0015da:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a0015de:	fb09 f408 	mul.w	r4, r9, r8
1a0015e2:	42ac      	cmp	r4, r5
1a0015e4:	fa02 f201 	lsl.w	r2, r2, r1
1a0015e8:	fa00 fa01 	lsl.w	sl, r0, r1
1a0015ec:	d908      	bls.n	1a001600 <__udivmoddi4+0x244>
1a0015ee:	18ed      	adds	r5, r5, r3
1a0015f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0015f4:	d243      	bcs.n	1a00167e <__udivmoddi4+0x2c2>
1a0015f6:	42ac      	cmp	r4, r5
1a0015f8:	d941      	bls.n	1a00167e <__udivmoddi4+0x2c2>
1a0015fa:	f1a9 0902 	sub.w	r9, r9, #2
1a0015fe:	441d      	add	r5, r3
1a001600:	1b2d      	subs	r5, r5, r4
1a001602:	fa1f fe8e 	uxth.w	lr, lr
1a001606:	fbb5 f0fc 	udiv	r0, r5, ip
1a00160a:	fb0c 5510 	mls	r5, ip, r0, r5
1a00160e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a001612:	fb00 f808 	mul.w	r8, r0, r8
1a001616:	45a0      	cmp	r8, r4
1a001618:	d907      	bls.n	1a00162a <__udivmoddi4+0x26e>
1a00161a:	18e4      	adds	r4, r4, r3
1a00161c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
1a001620:	d229      	bcs.n	1a001676 <__udivmoddi4+0x2ba>
1a001622:	45a0      	cmp	r8, r4
1a001624:	d927      	bls.n	1a001676 <__udivmoddi4+0x2ba>
1a001626:	3802      	subs	r0, #2
1a001628:	441c      	add	r4, r3
1a00162a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00162e:	eba4 0408 	sub.w	r4, r4, r8
1a001632:	fba0 8902 	umull	r8, r9, r0, r2
1a001636:	454c      	cmp	r4, r9
1a001638:	46c6      	mov	lr, r8
1a00163a:	464d      	mov	r5, r9
1a00163c:	d315      	bcc.n	1a00166a <__udivmoddi4+0x2ae>
1a00163e:	d012      	beq.n	1a001666 <__udivmoddi4+0x2aa>
1a001640:	b156      	cbz	r6, 1a001658 <__udivmoddi4+0x29c>
1a001642:	ebba 030e 	subs.w	r3, sl, lr
1a001646:	eb64 0405 	sbc.w	r4, r4, r5
1a00164a:	fa04 f707 	lsl.w	r7, r4, r7
1a00164e:	40cb      	lsrs	r3, r1
1a001650:	431f      	orrs	r7, r3
1a001652:	40cc      	lsrs	r4, r1
1a001654:	6037      	str	r7, [r6, #0]
1a001656:	6074      	str	r4, [r6, #4]
1a001658:	2100      	movs	r1, #0
1a00165a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00165e:	4618      	mov	r0, r3
1a001660:	e6f8      	b.n	1a001454 <__udivmoddi4+0x98>
1a001662:	4690      	mov	r8, r2
1a001664:	e6e0      	b.n	1a001428 <__udivmoddi4+0x6c>
1a001666:	45c2      	cmp	sl, r8
1a001668:	d2ea      	bcs.n	1a001640 <__udivmoddi4+0x284>
1a00166a:	ebb8 0e02 	subs.w	lr, r8, r2
1a00166e:	eb69 0503 	sbc.w	r5, r9, r3
1a001672:	3801      	subs	r0, #1
1a001674:	e7e4      	b.n	1a001640 <__udivmoddi4+0x284>
1a001676:	4628      	mov	r0, r5
1a001678:	e7d7      	b.n	1a00162a <__udivmoddi4+0x26e>
1a00167a:	4640      	mov	r0, r8
1a00167c:	e791      	b.n	1a0015a2 <__udivmoddi4+0x1e6>
1a00167e:	4681      	mov	r9, r0
1a001680:	e7be      	b.n	1a001600 <__udivmoddi4+0x244>
1a001682:	4601      	mov	r1, r0
1a001684:	e778      	b.n	1a001578 <__udivmoddi4+0x1bc>
1a001686:	3802      	subs	r0, #2
1a001688:	443c      	add	r4, r7
1a00168a:	e745      	b.n	1a001518 <__udivmoddi4+0x15c>
1a00168c:	4608      	mov	r0, r1
1a00168e:	e708      	b.n	1a0014a2 <__udivmoddi4+0xe6>
1a001690:	f1a8 0802 	sub.w	r8, r8, #2
1a001694:	443d      	add	r5, r7
1a001696:	e72b      	b.n	1a0014f0 <__udivmoddi4+0x134>

1a001698 <__aeabi_idiv0>:
1a001698:	4770      	bx	lr
1a00169a:	bf00      	nop

1a00169c <__libc_init_array>:
1a00169c:	b570      	push	{r4, r5, r6, lr}
1a00169e:	4e0f      	ldr	r6, [pc, #60]	; (1a0016dc <__libc_init_array+0x40>)
1a0016a0:	4d0f      	ldr	r5, [pc, #60]	; (1a0016e0 <__libc_init_array+0x44>)
1a0016a2:	1b76      	subs	r6, r6, r5
1a0016a4:	10b6      	asrs	r6, r6, #2
1a0016a6:	bf18      	it	ne
1a0016a8:	2400      	movne	r4, #0
1a0016aa:	d005      	beq.n	1a0016b8 <__libc_init_array+0x1c>
1a0016ac:	3401      	adds	r4, #1
1a0016ae:	f855 3b04 	ldr.w	r3, [r5], #4
1a0016b2:	4798      	blx	r3
1a0016b4:	42a6      	cmp	r6, r4
1a0016b6:	d1f9      	bne.n	1a0016ac <__libc_init_array+0x10>
1a0016b8:	4e0a      	ldr	r6, [pc, #40]	; (1a0016e4 <__libc_init_array+0x48>)
1a0016ba:	4d0b      	ldr	r5, [pc, #44]	; (1a0016e8 <__libc_init_array+0x4c>)
1a0016bc:	1b76      	subs	r6, r6, r5
1a0016be:	f7fe ff22 	bl	1a000506 <_init>
1a0016c2:	10b6      	asrs	r6, r6, #2
1a0016c4:	bf18      	it	ne
1a0016c6:	2400      	movne	r4, #0
1a0016c8:	d006      	beq.n	1a0016d8 <__libc_init_array+0x3c>
1a0016ca:	3401      	adds	r4, #1
1a0016cc:	f855 3b04 	ldr.w	r3, [r5], #4
1a0016d0:	4798      	blx	r3
1a0016d2:	42a6      	cmp	r6, r4
1a0016d4:	d1f9      	bne.n	1a0016ca <__libc_init_array+0x2e>
1a0016d6:	bd70      	pop	{r4, r5, r6, pc}
1a0016d8:	bd70      	pop	{r4, r5, r6, pc}
1a0016da:	bf00      	nop
1a0016dc:	1a001900 	.word	0x1a001900
1a0016e0:	1a001900 	.word	0x1a001900
1a0016e4:	1a001904 	.word	0x1a001904
1a0016e8:	1a001900 	.word	0x1a001900

1a0016ec <memset>:
1a0016ec:	b470      	push	{r4, r5, r6}
1a0016ee:	0786      	lsls	r6, r0, #30
1a0016f0:	d046      	beq.n	1a001780 <memset+0x94>
1a0016f2:	1e54      	subs	r4, r2, #1
1a0016f4:	2a00      	cmp	r2, #0
1a0016f6:	d041      	beq.n	1a00177c <memset+0x90>
1a0016f8:	b2ca      	uxtb	r2, r1
1a0016fa:	4603      	mov	r3, r0
1a0016fc:	e002      	b.n	1a001704 <memset+0x18>
1a0016fe:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a001702:	d33b      	bcc.n	1a00177c <memset+0x90>
1a001704:	f803 2b01 	strb.w	r2, [r3], #1
1a001708:	079d      	lsls	r5, r3, #30
1a00170a:	d1f8      	bne.n	1a0016fe <memset+0x12>
1a00170c:	2c03      	cmp	r4, #3
1a00170e:	d92e      	bls.n	1a00176e <memset+0x82>
1a001710:	b2cd      	uxtb	r5, r1
1a001712:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a001716:	2c0f      	cmp	r4, #15
1a001718:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a00171c:	d919      	bls.n	1a001752 <memset+0x66>
1a00171e:	f103 0210 	add.w	r2, r3, #16
1a001722:	4626      	mov	r6, r4
1a001724:	3e10      	subs	r6, #16
1a001726:	2e0f      	cmp	r6, #15
1a001728:	f842 5c10 	str.w	r5, [r2, #-16]
1a00172c:	f842 5c0c 	str.w	r5, [r2, #-12]
1a001730:	f842 5c08 	str.w	r5, [r2, #-8]
1a001734:	f842 5c04 	str.w	r5, [r2, #-4]
1a001738:	f102 0210 	add.w	r2, r2, #16
1a00173c:	d8f2      	bhi.n	1a001724 <memset+0x38>
1a00173e:	f1a4 0210 	sub.w	r2, r4, #16
1a001742:	f022 020f 	bic.w	r2, r2, #15
1a001746:	f004 040f 	and.w	r4, r4, #15
1a00174a:	3210      	adds	r2, #16
1a00174c:	2c03      	cmp	r4, #3
1a00174e:	4413      	add	r3, r2
1a001750:	d90d      	bls.n	1a00176e <memset+0x82>
1a001752:	461e      	mov	r6, r3
1a001754:	4622      	mov	r2, r4
1a001756:	3a04      	subs	r2, #4
1a001758:	2a03      	cmp	r2, #3
1a00175a:	f846 5b04 	str.w	r5, [r6], #4
1a00175e:	d8fa      	bhi.n	1a001756 <memset+0x6a>
1a001760:	1f22      	subs	r2, r4, #4
1a001762:	f022 0203 	bic.w	r2, r2, #3
1a001766:	3204      	adds	r2, #4
1a001768:	4413      	add	r3, r2
1a00176a:	f004 0403 	and.w	r4, r4, #3
1a00176e:	b12c      	cbz	r4, 1a00177c <memset+0x90>
1a001770:	b2c9      	uxtb	r1, r1
1a001772:	441c      	add	r4, r3
1a001774:	f803 1b01 	strb.w	r1, [r3], #1
1a001778:	429c      	cmp	r4, r3
1a00177a:	d1fb      	bne.n	1a001774 <memset+0x88>
1a00177c:	bc70      	pop	{r4, r5, r6}
1a00177e:	4770      	bx	lr
1a001780:	4614      	mov	r4, r2
1a001782:	4603      	mov	r3, r0
1a001784:	e7c2      	b.n	1a00170c <memset+0x20>
1a001786:	bf00      	nop

1a001788 <ExtRateIn>:
1a001788:	0000 0000                                   ....

1a00178c <GpioButtons>:
1a00178c:	0400 0800 0900 0901                         ........

1a001794 <GpioLeds>:
1a001794:	0005 0105 0205 0e00 0b01 0c01               ............

1a0017a0 <GpioPorts>:
1a0017a0:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a0017b0:	0802 ffff                                   ....

1a0017b4 <OscRateIn>:
1a0017b4:	1b00 00b7                                   ....

1a0017b8 <InitClkStates>:
1a0017b8:	0f01 0101                                   ....

1a0017bc <pinmuxing>:
1a0017bc:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a0017cc:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a0017dc:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a0017ec:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a0017fc:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a00180c:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a00181c:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a00182c:	0206 0057                                   ..W.

1a001830 <UART_BClock>:
1a001830:	01c2 01a2 0182 0162                         ......b.

1a001838 <UART_PClock>:
1a001838:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a001848:	00ff 0000                                   ....

1a00184c <periph_to_base>:
1a00184c:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a00185c:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a00186c:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a00187c:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a00188c:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a00189c:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a0018ac:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a0018b8 <InitClkStates>:
1a0018b8:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a0018c8:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a0018d8:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a0018e8:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a0018f8:	111a 0001 111b 0001                         ........
